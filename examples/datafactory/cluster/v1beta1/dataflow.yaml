# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC0-1.0

apiVersion: datafactory.azure.upbound.io/v1beta1
kind: DataFlow
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: example
  name: example
spec:
  forProvider:
    dataFactoryIdSelector:
      matchLabels:
        testing.upbound.io/example-name: factoryexample 
    script: "source(\n  allowSchemaDrift: true, \n  validateSchema: false, \n  limit:
      100, \n  ignoreNoFilesFound: false, \n  documentForm: 'documentPerLine') ~>
      source1 \nsource1 sink(\n  allowSchemaDrift: true, \n  validateSchema: false,
      \n  skipDuplicateMapInputs: true, \n  skipDuplicateMapOutputs: true) ~> sink1\n"
    sink:
    - dataset:
      - nameSelector:
          matchLabels:
            testing.upbound.io/example-name: example2
      name: sink1
    source:
    - dataset:
      - nameSelector:
          matchLabels:
            testing.upbound.io/example-name: example1
      name: source1

---

apiVersion: datafactory.azure.upbound.io/v1beta1
kind: Factory
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: factoryexample
  name: factoryexample
spec:
  forProvider:
    location: West Europe
    resourceGroupNameSelector:
      matchLabels:
        testing.upbound.io/example-name: dataflow-rg

---

apiVersion: datafactory.azure.upbound.io/v1beta1
kind: DataSetJSON
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: example1
  name: example1
spec:
  forProvider:
    httpServerLocation:
    - filename: foo.txt
      path: foo/bar/
      relativeUrl: /fizz/buzz/
    dataFactoryIdSelector:
      matchLabels:
        testing.upbound.io/example-name: factoryexample
    encoding: UTF-8
    linkedServiceName: linkedservice

---

apiVersion: datafactory.azure.upbound.io/v1beta1
kind: DataSetJSON
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: example2
  name: example2
spec:
  forProvider:
    httpServerLocation:
    - filename: foo.txt
      path: foo/bar/
      relativeUrl: /fizz/buzz/
    dataFactoryIdSelector:
      matchLabels:
        testing.upbound.io/example-name: factoryexample
    encoding: UTF-8
    linkedServiceName: linkedservice

---

apiVersion: azure.upbound.io/v1beta1
kind: ResourceGroup
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: dataflow-rg
  name: dataflow-rg
spec:
  forProvider:
    location: West Europe

# ---

# apiVersion: storage.azure.upbound.io/v1beta1
# kind: Account
# metadata:
#   annotations:
#     meta.upbound.io/example-id: datafactory/v1beta1/dataflow
#   labels:
#     testing.upbound.io/example-name: example
#   name: example
# spec:
#   forProvider:
#     accountReplicationType: LRS
#     accountTier: Standard
#     location: West Europe
#     resourceGroupNameSelector:
#       matchLabels:
#         testing.upbound.io/example-name: dataflow-rg

---

apiVersion: datafactory.azure.upbound.io/v1beta1
kind: LinkedServiceOdbc
metadata:
  annotations:
    meta.upbound.io/example-id: datafactory/v1beta1/dataflow
  labels:
    testing.upbound.io/example-name: linkedservice
  name: linkedservice
spec:
  forProvider:
    connectionString: Driver={SQL Server};Server=test;Database=test;Uid=test;Pwd=test;
    dataFactoryIdSelector:
      matchLabels:
        testing.upbound.io/example-name: factoryexample
