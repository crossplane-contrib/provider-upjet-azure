// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionTemplateDeploymentInitParameters struct {

	// The Debug Level which should be used for this Subscription Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	DebugLevel *string `json:"debugLevel,omitempty" tf:"debug_level,omitempty"`

	// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent *string `json:"parametersContent,omitempty" tf:"parameters_content,omitempty"`

	// A mapping of tags which should be assigned to the Subscription Template Deployment.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The contents of the ARM Template which should be deployed into this Subscription.
	TemplateContent *string `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// The ID of the Template Spec Version to deploy into the Subscription. Cannot be specified with template_content.
	TemplateSpecVersionID *string `json:"templateSpecVersionId,omitempty" tf:"template_spec_version_id,omitempty"`
}

type SubscriptionTemplateDeploymentObservation struct {

	// The Debug Level which should be used for this Subscription Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	DebugLevel *string `json:"debugLevel,omitempty" tf:"debug_level,omitempty"`

	// The ID of the Subscription Template Deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent *string `json:"outputContent,omitempty" tf:"output_content,omitempty"`

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent *string `json:"parametersContent,omitempty" tf:"parameters_content,omitempty"`

	// A mapping of tags which should be assigned to the Subscription Template Deployment.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The contents of the ARM Template which should be deployed into this Subscription.
	TemplateContent *string `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// The ID of the Template Spec Version to deploy into the Subscription. Cannot be specified with template_content.
	TemplateSpecVersionID *string `json:"templateSpecVersionId,omitempty" tf:"template_spec_version_id,omitempty"`
}

type SubscriptionTemplateDeploymentParameters struct {

	// The Debug Level which should be used for this Subscription Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	// +kubebuilder:validation:Optional
	DebugLevel *string `json:"debugLevel,omitempty" tf:"debug_level,omitempty"`

	// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	// +kubebuilder:validation:Optional
	ParametersContent *string `json:"parametersContent,omitempty" tf:"parameters_content,omitempty"`

	// A mapping of tags which should be assigned to the Subscription Template Deployment.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The contents of the ARM Template which should be deployed into this Subscription.
	// +kubebuilder:validation:Optional
	TemplateContent *string `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// The ID of the Template Spec Version to deploy into the Subscription. Cannot be specified with template_content.
	// +kubebuilder:validation:Optional
	TemplateSpecVersionID *string `json:"templateSpecVersionId,omitempty" tf:"template_spec_version_id,omitempty"`
}

// SubscriptionTemplateDeploymentSpec defines the desired state of SubscriptionTemplateDeployment
type SubscriptionTemplateDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionTemplateDeploymentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionTemplateDeploymentInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionTemplateDeploymentStatus defines the observed state of SubscriptionTemplateDeployment.
type SubscriptionTemplateDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionTemplateDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionTemplateDeployment is the Schema for the SubscriptionTemplateDeployments API. Manages a Subscription Template Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SubscriptionTemplateDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   SubscriptionTemplateDeploymentSpec   `json:"spec"`
	Status SubscriptionTemplateDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionTemplateDeploymentList contains a list of SubscriptionTemplateDeployments
type SubscriptionTemplateDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionTemplateDeployment `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionTemplateDeployment_Kind             = "SubscriptionTemplateDeployment"
	SubscriptionTemplateDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionTemplateDeployment_Kind}.String()
	SubscriptionTemplateDeployment_KindAPIVersion   = SubscriptionTemplateDeployment_Kind + "." + CRDGroupVersion.String()
	SubscriptionTemplateDeployment_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionTemplateDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionTemplateDeployment{}, &SubscriptionTemplateDeploymentList{})
}
