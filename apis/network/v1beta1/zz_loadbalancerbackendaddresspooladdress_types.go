/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InboundNATRulePortMappingObservation struct {

	// The Backend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
	BackendPort *float64 `json:"backendPort,omitempty" tf:"backend_port,omitempty"`

	// The Frontend Port of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
	FrontendPort *float64 `json:"frontendPort,omitempty" tf:"frontend_port,omitempty"`

	// The name of the Load Balancing Inbound NAT Rules associated with this Backend Address Pool Address.
	InboundNATRuleName *string `json:"inboundNatRuleName,omitempty" tf:"inbound_nat_rule_name,omitempty"`
}

type InboundNATRulePortMappingParameters struct {
}

type LoadBalancerBackendAddressPoolAddressObservation struct {

	// The ID of the Backend Address Pool Address.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of inbound_nat_rule_port_mapping block as defined below.
	InboundNATRulePortMapping []InboundNATRulePortMappingObservation `json:"inboundNatRulePortMapping,omitempty" tf:"inbound_nat_rule_port_mapping,omitempty"`
}

type LoadBalancerBackendAddressPoolAddressParameters struct {

	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	// For global load balancer, user needs to specify the `backend_address_ip_configuration_id` of the added regional load balancers
	// +kubebuilder:validation:Optional
	BackendAddressIPConfigurationID *string `json:"backendAddressIpConfigurationId,omitempty" tf:"backend_address_ip_configuration_id,omitempty"`

	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	// +crossplane:generate:reference:type=LoadBalancerBackendAddressPool
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackendAddressPoolID *string `json:"backendAddressPoolId,omitempty" tf:"backend_address_pool_id,omitempty"`

	// Reference to a LoadBalancerBackendAddressPool to populate backendAddressPoolId.
	// +kubebuilder:validation:Optional
	BackendAddressPoolIDRef *v1.Reference `json:"backendAddressPoolIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancerBackendAddressPool to populate backendAddressPoolId.
	// +kubebuilder:validation:Optional
	BackendAddressPoolIDSelector *v1.Selector `json:"backendAddressPoolIdSelector,omitempty" tf:"-"`

	// The Static IP Address which should be allocated to this Backend Address Pool.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	// For regional load balancer, user needs to specify `virtual_network_id` and `ip_address`
	// +crossplane:generate:reference:type=VirtualNetwork
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`

	// Reference to a VirtualNetwork to populate virtualNetworkId.
	// +kubebuilder:validation:Optional
	VirtualNetworkIDRef *v1.Reference `json:"virtualNetworkIdRef,omitempty" tf:"-"`

	// Selector for a VirtualNetwork to populate virtualNetworkId.
	// +kubebuilder:validation:Optional
	VirtualNetworkIDSelector *v1.Selector `json:"virtualNetworkIdSelector,omitempty" tf:"-"`
}

// LoadBalancerBackendAddressPoolAddressSpec defines the desired state of LoadBalancerBackendAddressPoolAddress
type LoadBalancerBackendAddressPoolAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerBackendAddressPoolAddressParameters `json:"forProvider"`
}

// LoadBalancerBackendAddressPoolAddressStatus defines the observed state of LoadBalancerBackendAddressPoolAddress.
type LoadBalancerBackendAddressPoolAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerBackendAddressPoolAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerBackendAddressPoolAddress is the Schema for the LoadBalancerBackendAddressPoolAddresss API. Manages a Backend Address within a Backend Address Pool.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LoadBalancerBackendAddressPoolAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerBackendAddressPoolAddressSpec   `json:"spec"`
	Status            LoadBalancerBackendAddressPoolAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerBackendAddressPoolAddressList contains a list of LoadBalancerBackendAddressPoolAddresss
type LoadBalancerBackendAddressPoolAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerBackendAddressPoolAddress `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerBackendAddressPoolAddress_Kind             = "LoadBalancerBackendAddressPoolAddress"
	LoadBalancerBackendAddressPoolAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancerBackendAddressPoolAddress_Kind}.String()
	LoadBalancerBackendAddressPoolAddress_KindAPIVersion   = LoadBalancerBackendAddressPoolAddress_Kind + "." + CRDGroupVersion.String()
	LoadBalancerBackendAddressPoolAddress_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancerBackendAddressPoolAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancerBackendAddressPoolAddress{}, &LoadBalancerBackendAddressPoolAddressList{})
}
