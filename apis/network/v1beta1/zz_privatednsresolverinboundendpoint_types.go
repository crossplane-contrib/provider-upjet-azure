//go:build (network || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPConfigurationsInitParameters struct {

	// Private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Private IP address allocation method. Allowed value is Dynamic and Static. Defaults to Dynamic.
	PrivateIPAllocationMethod *string `json:"privateIpAllocationMethod,omitempty" tf:"private_ip_allocation_method,omitempty"`

	// The subnet ID of the IP configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type IPConfigurationsObservation struct {

	// Private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Private IP address allocation method. Allowed value is Dynamic and Static. Defaults to Dynamic.
	PrivateIPAllocationMethod *string `json:"privateIpAllocationMethod,omitempty" tf:"private_ip_allocation_method,omitempty"`

	// The subnet ID of the IP configuration.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type IPConfigurationsParameters struct {

	// Private IP address of the IP configuration.
	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// Private IP address allocation method. Allowed value is Dynamic and Static. Defaults to Dynamic.
	// +kubebuilder:validation:Optional
	PrivateIPAllocationMethod *string `json:"privateIpAllocationMethod,omitempty" tf:"private_ip_allocation_method,omitempty"`

	// The subnet ID of the IP configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta2.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type PrivateDNSResolverInboundEndpointInitParameters struct {

	// Can be specified multiple times to define multiple IP configurations. Each ip_configurations block as defined below.
	IPConfigurations []IPConfigurationsInitParameters `json:"ipConfigurations,omitempty" tf:"ip_configurations,omitempty"`

	// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PrivateDNSResolverInboundEndpointObservation struct {

	// The ID of the Private DNS Resolver Inbound Endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Can be specified multiple times to define multiple IP configurations. Each ip_configurations block as defined below.
	IPConfigurations []IPConfigurationsObservation `json:"ipConfigurations,omitempty" tf:"ip_configurations,omitempty"`

	// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies the ID of the Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
	PrivateDNSResolverID *string `json:"privateDnsResolverId,omitempty" tf:"private_dns_resolver_id,omitempty"`

	// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PrivateDNSResolverInboundEndpointParameters struct {

	// Can be specified multiple times to define multiple IP configurations. Each ip_configurations block as defined below.
	// +kubebuilder:validation:Optional
	IPConfigurations []IPConfigurationsParameters `json:"ipConfigurations,omitempty" tf:"ip_configurations,omitempty"`

	// Specifies the Azure Region where the Private DNS Resolver Inbound Endpoint should exist. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies the ID of the Private DNS Resolver Inbound Endpoint. Changing this forces a new Private DNS Resolver Inbound Endpoint to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.PrivateDNSResolver
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PrivateDNSResolverID *string `json:"privateDnsResolverId,omitempty" tf:"private_dns_resolver_id,omitempty"`

	// Reference to a PrivateDNSResolver in network to populate privateDnsResolverId.
	// +kubebuilder:validation:Optional
	PrivateDNSResolverIDRef *v1.Reference `json:"privateDnsResolverIdRef,omitempty" tf:"-"`

	// Selector for a PrivateDNSResolver in network to populate privateDnsResolverId.
	// +kubebuilder:validation:Optional
	PrivateDNSResolverIDSelector *v1.Selector `json:"privateDnsResolverIdSelector,omitempty" tf:"-"`

	// A mapping of tags which should be assigned to the Private DNS Resolver Inbound Endpoint.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PrivateDNSResolverInboundEndpointSpec defines the desired state of PrivateDNSResolverInboundEndpoint
type PrivateDNSResolverInboundEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateDNSResolverInboundEndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateDNSResolverInboundEndpointInitParameters `json:"initProvider,omitempty"`
}

// PrivateDNSResolverInboundEndpointStatus defines the observed state of PrivateDNSResolverInboundEndpoint.
type PrivateDNSResolverInboundEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateDNSResolverInboundEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivateDNSResolverInboundEndpoint is the Schema for the PrivateDNSResolverInboundEndpoints API. Manages a Private DNS Resolver Inbound Endpoint.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateDNSResolverInboundEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipConfigurations) || (has(self.initProvider) && has(self.initProvider.ipConfigurations))",message="spec.forProvider.ipConfigurations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   PrivateDNSResolverInboundEndpointSpec   `json:"spec"`
	Status PrivateDNSResolverInboundEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDNSResolverInboundEndpointList contains a list of PrivateDNSResolverInboundEndpoints
type PrivateDNSResolverInboundEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDNSResolverInboundEndpoint `json:"items"`
}

// Repository type metadata.
var (
	PrivateDNSResolverInboundEndpoint_Kind             = "PrivateDNSResolverInboundEndpoint"
	PrivateDNSResolverInboundEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateDNSResolverInboundEndpoint_Kind}.String()
	PrivateDNSResolverInboundEndpoint_KindAPIVersion   = PrivateDNSResolverInboundEndpoint_Kind + "." + CRDGroupVersion.String()
	PrivateDNSResolverInboundEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(PrivateDNSResolverInboundEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateDNSResolverInboundEndpoint{}, &PrivateDNSResolverInboundEndpointList{})
}
