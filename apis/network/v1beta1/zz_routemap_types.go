/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MatchCriterionObservation struct {
}

type MatchCriterionParameters struct {

	// A list of AS paths.
	// +kubebuilder:validation:Optional
	AsPath []*string `json:"asPath,omitempty" tf:"as_path,omitempty"`

	// A list of BGP communities.
	// +kubebuilder:validation:Optional
	Community []*string `json:"community,omitempty" tf:"community,omitempty"`

	// The match condition to apply the rule of the Route Map. Possible values are Contains, Equals, NotContains, NotEquals and Unknown.
	// +kubebuilder:validation:Required
	MatchCondition *string `json:"matchCondition" tf:"match_condition,omitempty"`

	// A list of route prefixes.
	// +kubebuilder:validation:Optional
	RoutePrefix []*string `json:"routePrefix,omitempty" tf:"route_prefix,omitempty"`
}

type ParameterObservation struct {
}

type ParameterParameters struct {

	// A list of AS paths.
	// +kubebuilder:validation:Optional
	AsPath []*string `json:"asPath,omitempty" tf:"as_path,omitempty"`

	// A list of BGP communities.
	// +kubebuilder:validation:Optional
	Community []*string `json:"community,omitempty" tf:"community,omitempty"`

	// A list of route prefixes.
	// +kubebuilder:validation:Optional
	RoutePrefix []*string `json:"routePrefix,omitempty" tf:"route_prefix,omitempty"`
}

type RouteMapObservation struct {

	// The ID of the Route Map.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteMapParameters struct {

	// A rule block as defined below.
	// +kubebuilder:validation:Optional
	Rule []RouteMapRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VirtualHub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VirtualHubID *string `json:"virtualHubId,omitempty" tf:"virtual_hub_id,omitempty"`

	// Reference to a VirtualHub in network to populate virtualHubId.
	// +kubebuilder:validation:Optional
	VirtualHubIDRef *v1.Reference `json:"virtualHubIdRef,omitempty" tf:"-"`

	// Selector for a VirtualHub in network to populate virtualHubId.
	// +kubebuilder:validation:Optional
	VirtualHubIDSelector *v1.Selector `json:"virtualHubIdSelector,omitempty" tf:"-"`
}

type RouteMapRuleObservation struct {
}

type RouteMapRuleParameters struct {

	// An action block as defined below.
	// +kubebuilder:validation:Optional
	Action []RuleActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// A match_criterion block as defined below.
	// +kubebuilder:validation:Optional
	MatchCriterion []MatchCriterionParameters `json:"matchCriterion,omitempty" tf:"match_criterion,omitempty"`

	// The unique name for the rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The next step after the rule is evaluated. Possible values are Continue, Terminate and Unknown. Defaults to Unknown.
	// +kubebuilder:validation:Optional
	NextStepIfMatched *string `json:"nextStepIfMatched,omitempty" tf:"next_step_if_matched,omitempty"`
}

type RuleActionObservation struct {
}

type RuleActionParameters struct {

	// A parameter block as defined below.
	// +kubebuilder:validation:Required
	Parameter []ParameterParameters `json:"parameter" tf:"parameter,omitempty"`

	// The type of the action to be taken. Possible values are Add, Drop, Remove, Replace and Unknown.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// RouteMapSpec defines the desired state of RouteMap
type RouteMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteMapParameters `json:"forProvider"`
}

// RouteMapStatus defines the observed state of RouteMap.
type RouteMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteMap is the Schema for the RouteMaps API. Manages a Route Map.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RouteMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteMapSpec   `json:"spec"`
	Status            RouteMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteMapList contains a list of RouteMaps
type RouteMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteMap `json:"items"`
}

// Repository type metadata.
var (
	RouteMap_Kind             = "RouteMap"
	RouteMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteMap_Kind}.String()
	RouteMap_KindAPIVersion   = RouteMap_Kind + "." + CRDGroupVersion.String()
	RouteMap_GroupVersionKind = CRDGroupVersion.WithKind(RouteMap_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteMap{}, &RouteMapList{})
}
