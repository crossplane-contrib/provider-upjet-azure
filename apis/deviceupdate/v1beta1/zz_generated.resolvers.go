/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/devices/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this IOTHubDeviceUpdateAccount.
func (mg *IOTHubDeviceUpdateAccount) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IOTHubDeviceUpdateInstance.
func (mg *IOTHubDeviceUpdateInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeviceUpdateAccountID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DeviceUpdateAccountIDRef,
		Selector:     mg.Spec.ForProvider.DeviceUpdateAccountIDSelector,
		To: reference.To{
			List:    &IOTHubDeviceUpdateAccountList{},
			Managed: &IOTHubDeviceUpdateAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeviceUpdateAccountID")
	}
	mg.Spec.ForProvider.DeviceUpdateAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeviceUpdateAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DiagnosticStorageAccount); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DiagnosticStorageAccount[i3].ID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DiagnosticStorageAccount[i3].IDRef,
			Selector:     mg.Spec.ForProvider.DiagnosticStorageAccount[i3].IDSelector,
			To: reference.To{
				List:    &v1beta11.AccountList{},
				Managed: &v1beta11.Account{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DiagnosticStorageAccount[i3].ID")
		}
		mg.Spec.ForProvider.DiagnosticStorageAccount[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DiagnosticStorageAccount[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IOTHubID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IOTHubIDRef,
		Selector:     mg.Spec.ForProvider.IOTHubIDSelector,
		To: reference.To{
			List:    &v1beta12.IOTHubList{},
			Managed: &v1beta12.IOTHub{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IOTHubID")
	}
	mg.Spec.ForProvider.IOTHubID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IOTHubIDRef = rsp.ResolvedReference

	return nil
}
