// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Account.
	apisresolver "github.com/upbound/provider-azure/internal/apis"
)

func (mg *Account) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetBlobStorage.
func (mg *DataSetBlobStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ContainerNameRef,
			Selector:     mg.Spec.ForProvider.ContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerName")
	}
	mg.Spec.ForProvider.ContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datashare.azure.upbound.io", "v1beta2", "DataShare", "DataShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataShareID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataShareIDRef,
			Selector:     mg.Spec.ForProvider.DataShareIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataShareID")
	}
	mg.Spec.ForProvider.DataShareID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataShareIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.StorageAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccount.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.StorageAccount.NameRef,
				Selector:     mg.Spec.ForProvider.StorageAccount.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccount.Name")
		}
		mg.Spec.ForProvider.StorageAccount.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageAccount.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.StorageAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccount.ResourceGroupName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.StorageAccount.ResourceGroupNameRef,
				Selector:     mg.Spec.ForProvider.StorageAccount.ResourceGroupNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccount.ResourceGroupName")
		}
		mg.Spec.ForProvider.StorageAccount.ResourceGroupName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageAccount.ResourceGroupNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ContainerNameRef,
			Selector:     mg.Spec.InitProvider.ContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerName")
	}
	mg.Spec.InitProvider.ContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerNameRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.StorageAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccount.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.StorageAccount.NameRef,
				Selector:     mg.Spec.InitProvider.StorageAccount.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccount.Name")
		}
		mg.Spec.InitProvider.StorageAccount.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageAccount.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.StorageAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccount.ResourceGroupName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.StorageAccount.ResourceGroupNameRef,
				Selector:     mg.Spec.InitProvider.StorageAccount.ResourceGroupNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccount.ResourceGroupName")
		}
		mg.Spec.InitProvider.StorageAccount.ResourceGroupName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageAccount.ResourceGroupNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DataShare.
func (mg *DataShare) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datashare.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.AccountID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AccountIDRef,
			Selector:     mg.Spec.ForProvider.AccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccountID")
	}
	mg.Spec.ForProvider.AccountID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccountIDRef = rsp.ResolvedReference

	return nil
}
