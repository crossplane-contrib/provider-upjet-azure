/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ElasticPoolObservation struct {

	// The creation date of the SQL Elastic Pool.
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// The SQL Elastic Pool ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ElasticPoolParameters struct {

	// The maximum DTU which will be guaranteed to all databases in the elastic pool to be created.
	// +kubebuilder:validation:Optional
	DBDtuMax *float64 `json:"dbDtuMax,omitempty" tf:"db_dtu_max,omitempty"`

	// The minimum DTU which will be guaranteed to all databases in the elastic pool to be created.
	// +kubebuilder:validation:Optional
	DBDtuMin *float64 `json:"dbDtuMin,omitempty" tf:"db_dtu_min,omitempty"`

	// The total shared DTU for the elastic pool. Valid values depend on the edition which has been defined. Refer to Azure SQL Database Service Tiers for valid combinations.
	// +kubebuilder:validation:Required
	Dtu *float64 `json:"dtu" tf:"dtu,omitempty"`

	// The edition of the elastic pool to be created. Valid values are Basic, Standard, and Premium. Refer to Azure SQL Database Service Tiers for details. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Edition *string `json:"edition" tf:"edition,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The maximum size in MB that all databases in the elastic pool can grow to. The maximum size must be consistent with combination of edition and dtu and the limits documented in Azure SQL Database Service Tiers. If not defined when creating an elastic pool, the value is set to the size implied by edition and dtu.
	// +kubebuilder:validation:Optional
	PoolSize *float64 `json:"poolSize,omitempty" tf:"pool_size,omitempty"`

	// The name of the resource group in which to create the elastic pool. This must be the same as the resource group of the underlying SQL server. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The name of the SQL Server on which to create the elastic pool. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	ServerName *string `json:"serverName" tf:"server_name,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ElasticPoolSpec defines the desired state of ElasticPool
type ElasticPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ElasticPoolParameters `json:"forProvider"`
}

// ElasticPoolStatus defines the observed state of ElasticPool.
type ElasticPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ElasticPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticPool is the Schema for the ElasticPools API. Manages a SQL Elastic Pool.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ElasticPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticPoolSpec   `json:"spec"`
	Status            ElasticPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticPoolList contains a list of ElasticPools
type ElasticPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticPool `json:"items"`
}

// Repository type metadata.
var (
	ElasticPool_Kind             = "ElasticPool"
	ElasticPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ElasticPool_Kind}.String()
	ElasticPool_KindAPIVersion   = ElasticPool_Kind + "." + CRDGroupVersion.String()
	ElasticPool_GroupVersionKind = CRDGroupVersion.WithKind(ElasticPool_Kind)
)

func init() {
	SchemeBuilder.Register(&ElasticPool{}, &ElasticPoolList{})
}
