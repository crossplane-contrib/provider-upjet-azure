/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this MSSQLDatabase
func (mg *MSSQLDatabase) GetTerraformResourceType() string {
	return "azurerm_mssql_database"
}

// GetConnectionDetailsMapping for this MSSQLDatabase
func (tr *MSSQLDatabase) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"import[*].administrator_login_password": "spec.forProvider.import[*].administratorLoginPasswordSecretRef", "import[*].storage_key": "spec.forProvider.import[*].storageKeySecretRef", "threat_detection_policy[*].storage_account_access_key": "spec.forProvider.threatDetectionPolicy[*].storageAccountAccessKeySecretRef"}
}

// GetObservation of this MSSQLDatabase
func (tr *MSSQLDatabase) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLDatabase
func (tr *MSSQLDatabase) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLDatabase
func (tr *MSSQLDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLDatabase
func (tr *MSSQLDatabase) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLDatabase
func (tr *MSSQLDatabase) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLDatabase) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLFailoverGroup
func (mg *MSSQLFailoverGroup) GetTerraformResourceType() string {
	return "azurerm_mssql_failover_group"
}

// GetConnectionDetailsMapping for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLFailoverGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLFailoverGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLFailoverGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLFailoverGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLManagedDatabase
func (mg *MSSQLManagedDatabase) GetTerraformResourceType() string {
	return "azurerm_mssql_managed_database"
}

// GetConnectionDetailsMapping for this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLManagedDatabase
func (tr *MSSQLManagedDatabase) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLManagedDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLManagedDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLManagedDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLManagedDatabase) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLManagedInstance
func (mg *MSSQLManagedInstance) GetTerraformResourceType() string {
	return "azurerm_mssql_managed_instance"
}

// GetConnectionDetailsMapping for this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"administrator_login_password": "spec.forProvider.administratorLoginPasswordSecretRef"}
}

// GetObservation of this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLManagedInstance
func (tr *MSSQLManagedInstance) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLManagedInstance using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLManagedInstance) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLManagedInstanceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLManagedInstance) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLManagedInstanceActiveDirectoryAdministrator
func (mg *MSSQLManagedInstanceActiveDirectoryAdministrator) GetTerraformResourceType() string {
	return "azurerm_mssql_managed_instance_active_directory_administrator"
}

// GetConnectionDetailsMapping for this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLManagedInstanceActiveDirectoryAdministrator
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLManagedInstanceActiveDirectoryAdministrator using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLManagedInstanceActiveDirectoryAdministratorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLManagedInstanceActiveDirectoryAdministrator) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLManagedInstanceFailoverGroup
func (mg *MSSQLManagedInstanceFailoverGroup) GetTerraformResourceType() string {
	return "azurerm_mssql_managed_instance_failover_group"
}

// GetConnectionDetailsMapping for this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLManagedInstanceFailoverGroup
func (tr *MSSQLManagedInstanceFailoverGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLManagedInstanceFailoverGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLManagedInstanceFailoverGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLManagedInstanceFailoverGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLManagedInstanceFailoverGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLManagedInstanceVulnerabilityAssessment
func (mg *MSSQLManagedInstanceVulnerabilityAssessment) GetTerraformResourceType() string {
	return "azurerm_mssql_managed_instance_vulnerability_assessment"
}

// GetConnectionDetailsMapping for this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef", "storage_container_sas_key": "spec.forProvider.storageContainerSasKeySecretRef"}
}

// GetObservation of this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLManagedInstanceVulnerabilityAssessment
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLManagedInstanceVulnerabilityAssessment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLManagedInstanceVulnerabilityAssessmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLManagedInstanceVulnerabilityAssessment) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLOutboundFirewallRule
func (mg *MSSQLOutboundFirewallRule) GetTerraformResourceType() string {
	return "azurerm_mssql_outbound_firewall_rule"
}

// GetConnectionDetailsMapping for this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLOutboundFirewallRule
func (tr *MSSQLOutboundFirewallRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLOutboundFirewallRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLOutboundFirewallRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLOutboundFirewallRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLOutboundFirewallRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServer
func (mg *MSSQLServer) GetTerraformResourceType() string {
	return "azurerm_mssql_server"
}

// GetConnectionDetailsMapping for this MSSQLServer
func (tr *MSSQLServer) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"administrator_login_password": "spec.forProvider.administratorLoginPasswordSecretRef"}
}

// GetObservation of this MSSQLServer
func (tr *MSSQLServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServer
func (tr *MSSQLServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServer
func (tr *MSSQLServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServer
func (tr *MSSQLServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServer
func (tr *MSSQLServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServer) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerDNSAlias
func (mg *MSSQLServerDNSAlias) GetTerraformResourceType() string {
	return "azurerm_mssql_server_dns_alias"
}

// GetConnectionDetailsMapping for this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerDNSAlias
func (tr *MSSQLServerDNSAlias) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerDNSAlias using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerDNSAlias) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerDNSAliasParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerDNSAlias) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerTransparentDataEncryption
func (mg *MSSQLServerTransparentDataEncryption) GetTerraformResourceType() string {
	return "azurerm_mssql_server_transparent_data_encryption"
}

// GetConnectionDetailsMapping for this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerTransparentDataEncryption
func (tr *MSSQLServerTransparentDataEncryption) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerTransparentDataEncryption using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerTransparentDataEncryption) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerTransparentDataEncryptionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerTransparentDataEncryption) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLVirtualNetworkRule
func (mg *MSSQLVirtualNetworkRule) GetTerraformResourceType() string {
	return "azurerm_mssql_virtual_network_rule"
}

// GetConnectionDetailsMapping for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLVirtualNetworkRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLVirtualNetworkRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLVirtualNetworkRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLVirtualNetworkRule) GetTerraformSchemaVersion() int {
	return 0
}
