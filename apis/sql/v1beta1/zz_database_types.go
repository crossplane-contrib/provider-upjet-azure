/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseImportObservation struct {
}

type DatabaseImportParameters struct {

	// Specifies the name of the SQL administrator.
	// +kubebuilder:validation:Required
	AdministratorLogin *string `json:"administratorLogin" tf:"administrator_login,omitempty"`

	// Specifies the password of the SQL administrator.
	// +kubebuilder:validation:Required
	AdministratorLoginPasswordSecretRef v1.SecretKeySelector `json:"administratorLoginPasswordSecretRef" tf:"-"`

	// Specifies the type of authentication used to access the server. Valid values are SQL or ADPassword.
	// +kubebuilder:validation:Required
	AuthenticationType *string `json:"authenticationType" tf:"authentication_type,omitempty"`

	// Specifies the type of import operation being performed. The only allowable value is Import.
	// +kubebuilder:validation:Optional
	OperationMode *string `json:"operationMode,omitempty" tf:"operation_mode,omitempty"`

	// Specifies the access key for the storage account.
	// +kubebuilder:validation:Required
	StorageKeySecretRef v1.SecretKeySelector `json:"storageKeySecretRef" tf:"-"`

	// Specifies the type of access key for the storage account. Valid values are StorageAccessKey or SharedAccessKey.
	// +kubebuilder:validation:Required
	StorageKeyType *string `json:"storageKeyType" tf:"storage_key_type,omitempty"`

	// Specifies the blob URI of the .bacpac file.
	// +kubebuilder:validation:Required
	StorageURI *string `json:"storageUri" tf:"storage_uri,omitempty"`
}

type DatabaseObservation struct {

	// The creation date of the SQL Database.
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// The default secondary location of the SQL Database.
	DefaultSecondaryLocation *string `json:"defaultSecondaryLocation,omitempty" tf:"default_secondary_location,omitempty"`

	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// The SQL Database ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DatabaseParameters struct {

	// The name of the collation. Applies only if create_mode is Default.  Azure default is SQL_LATIN1_GENERAL_CP1_CI_AS. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Specifies how to create the database. Valid values are: Default, Copy, OnlineSecondary, NonReadableSecondary,  PointInTimeRestore, Recovery, Restore or RestoreLongTermRetentionBackup. Must be Default to create a new database. Defaults to Default. Please see Azure SQL Database REST API
	// +kubebuilder:validation:Optional
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode,omitempty"`

	// The edition of the database to be created. Applies only if create_mode is Default. Valid values are: Basic, Standard, Premium, DataWarehouse, Business, BusinessCritical, Free, GeneralPurpose, Hyperscale, Premium, PremiumRS, Standard, Stretch, System, System2, or Web. Please see Azure SQL database models.
	// +kubebuilder:validation:Optional
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// The name of the elastic database pool.
	// +kubebuilder:validation:Optional
	ElasticPoolName *string `json:"elasticPoolName,omitempty" tf:"elastic_pool_name,omitempty"`

	// A Database Import block as documented below. create_mode must be set to Default.
	// +kubebuilder:validation:Optional
	Import []DatabaseImportParameters `json:"import,omitempty" tf:"import,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The maximum size that the database can grow to. Applies only if create_mode is Default.  Please see Azure SQL database models.
	// +kubebuilder:validation:Optional
	MaxSizeBytes *string `json:"maxSizeBytes,omitempty" tf:"max_size_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	MaxSizeGb *string `json:"maxSizeGb,omitempty" tf:"max_size_gb,omitempty"`

	// Read-only connections will be redirected to a high-available replica. Please see Use read-only replicas to load-balance read-only query workloads.
	// +kubebuilder:validation:Optional
	ReadScale *bool `json:"readScale,omitempty" tf:"read_scale,omitempty"`

	// A GUID/UUID corresponding to a configured Service Level Objective for the Azure SQL database which can be used to configure a performance level.
	// .
	// +kubebuilder:validation:Optional
	RequestedServiceObjectiveID *string `json:"requestedServiceObjectiveId,omitempty" tf:"requested_service_objective_id,omitempty"`

	// The service objective name for the database. Valid values depend on edition and location and may include S0, S1, S2, S3, P1, P2, P4, P6, P11 and ElasticPool. You can list the available names with the CLI: shell az sql db list-editions -l westus -o table. For further information please see Azure CLI - az sql db.
	// +kubebuilder:validation:Optional
	RequestedServiceObjectiveName *string `json:"requestedServiceObjectiveName,omitempty" tf:"requested_service_objective_name,omitempty"`

	// The name of the resource group in which to create the database.  This must be the same as Database Server resource group currently. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The point in time for the restore. Only applies if create_mode is PointInTimeRestore, it should be provided in RFC3339 format, e.g. 2013-11-08T22:00:40Z.
	// +kubebuilder:validation:Optional
	RestorePointInTime *string `json:"restorePointInTime,omitempty" tf:"restore_point_in_time,omitempty"`

	// The name of the SQL Server on which to create the database. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	ServerName *string `json:"serverName" tf:"server_name,omitempty"`

	// The deletion date time of the source database. Only applies to deleted databases where create_mode is PointInTimeRestore.
	// +kubebuilder:validation:Optional
	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty" tf:"source_database_deletion_date,omitempty"`

	// The URI of the source database if create_mode value is not Default.
	// +kubebuilder:validation:Optional
	SourceDatabaseID *string `json:"sourceDatabaseId,omitempty" tf:"source_database_id,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Threat detection policy configuration. The threat_detection_policy block supports fields documented below.
	// +kubebuilder:validation:Optional
	ThreatDetectionPolicy []DatabaseThreatDetectionPolicyParameters `json:"threatDetectionPolicy,omitempty" tf:"threat_detection_policy,omitempty"`

	// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant,omitempty"`
}

type DatabaseThreatDetectionPolicyObservation struct {
}

type DatabaseThreatDetectionPolicyParameters struct {

	// Specifies a list of alerts which should be disabled. Possible values include Access_Anomaly, Sql_Injection and Sql_Injection_Vulnerability.
	// +kubebuilder:validation:Optional
	DisabledAlerts []*string `json:"disabledAlerts,omitempty" tf:"disabled_alerts,omitempty"`

	// Should the account administrators be emailed when this alert is triggered? Possible values are Disabled and Enabled.
	// +kubebuilder:validation:Optional
	EmailAccountAdmins *string `json:"emailAccountAdmins,omitempty" tf:"email_account_admins,omitempty"`

	// A list of email addresses which alerts should be sent to.
	// +kubebuilder:validation:Optional
	EmailAddresses []*string `json:"emailAddresses,omitempty" tf:"email_addresses,omitempty"`

	// Specifies the number of days to keep in the Threat Detection audit logs.
	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// The State of the Policy. Possible values are Enabled, Disabled or New.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Specifies the identifier key of the Threat Detection audit storage account. Required if state is Enabled.
	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if state is Enabled.
	// +kubebuilder:validation:Optional
	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint,omitempty"`
}

// DatabaseSpec defines the desired state of Database
type DatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseParameters `json:"forProvider"`
}

// DatabaseStatus defines the observed state of Database.
type DatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Database is the Schema for the Databases API. Manages a SQL Database.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseSpec   `json:"spec"`
	Status            DatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseList contains a list of Databases
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Repository type metadata.
var (
	Database_Kind             = "Database"
	Database_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Database_Kind}.String()
	Database_KindAPIVersion   = Database_Kind + "." + CRDGroupVersion.String()
	Database_GroupVersionKind = CRDGroupVersion.WithKind(Database_Kind)
)

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
