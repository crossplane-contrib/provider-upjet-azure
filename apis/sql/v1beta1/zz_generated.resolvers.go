/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta14 "github.com/upbound/provider-azure/apis/keyvault/v1beta1"
	v1beta13 "github.com/upbound/provider-azure/apis/managedidentity/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/network/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	v1beta1 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this MSSQLDatabase.
func (mg *MSSQLDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLDatabaseExtendedAuditingPolicy.
func (mg *MSSQLDatabaseExtendedAuditingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DatabaseIDRef,
		Selector:     mg.Spec.ForProvider.DatabaseIDSelector,
		To: reference.To{
			List:    &MSSQLDatabaseList{},
			Managed: &MSSQLDatabase{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseID")
	}
	mg.Spec.ForProvider.DatabaseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageEndpoint),
		Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
		Reference:    mg.Spec.ForProvider.StorageEndpointRef,
		Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
		To: reference.To{
			List:    &v1beta1.AccountList{},
			Managed: &v1beta1.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline.
func (mg *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DatabaseNameRef,
		Selector:     mg.Spec.ForProvider.DatabaseNameSelector,
		To: reference.To{
			List:    &MSSQLDatabaseList{},
			Managed: &MSSQLDatabase{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseName")
	}
	mg.Spec.ForProvider.DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerVulnerabilityAssessmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerVulnerabilityAssessmentIDRef,
		Selector:     mg.Spec.ForProvider.ServerVulnerabilityAssessmentIDSelector,
		To: reference.To{
			List:    &MSSQLServerVulnerabilityAssessmentList{},
			Managed: &MSSQLServerVulnerabilityAssessment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerVulnerabilityAssessmentID")
	}
	mg.Spec.ForProvider.ServerVulnerabilityAssessmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerVulnerabilityAssessmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLElasticPool.
func (mg *MSSQLElasticPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServerNameRef,
		Selector:     mg.Spec.ForProvider.ServerNameSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerName")
	}
	mg.Spec.ForProvider.ServerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLFailoverGroup.
func (mg *MSSQLFailoverGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Databases),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.ForProvider.DatabasesRefs,
		Selector:      mg.Spec.ForProvider.DatabasesSelector,
		To: reference.To{
			List:    &MSSQLDatabaseList{},
			Managed: &MSSQLDatabase{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Databases")
	}
	mg.Spec.ForProvider.Databases = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DatabasesRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PartnerServer); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PartnerServer[i3].ID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.PartnerServer[i3].IDRef,
			Selector:     mg.Spec.ForProvider.PartnerServer[i3].IDSelector,
			To: reference.To{
				List:    &MSSQLServerList{},
				Managed: &MSSQLServer{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PartnerServer[i3].ID")
		}
		mg.Spec.ForProvider.PartnerServer[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PartnerServer[i3].IDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLFirewallRule.
func (mg *MSSQLFirewallRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLJobAgent.
func (mg *MSSQLJobAgent) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DatabaseIDRef,
		Selector:     mg.Spec.ForProvider.DatabaseIDSelector,
		To: reference.To{
			List:    &MSSQLDatabaseList{},
			Managed: &MSSQLDatabase{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseID")
	}
	mg.Spec.ForProvider.DatabaseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLJobCredential.
func (mg *MSSQLJobCredential) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.JobAgentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.JobAgentIDRef,
		Selector:     mg.Spec.ForProvider.JobAgentIDSelector,
		To: reference.To{
			List:    &MSSQLJobAgentList{},
			Managed: &MSSQLJobAgent{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.JobAgentID")
	}
	mg.Spec.ForProvider.JobAgentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.JobAgentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLManagedDatabase.
func (mg *MSSQLManagedDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagedInstanceID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ManagedInstanceIDRef,
		Selector:     mg.Spec.ForProvider.ManagedInstanceIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedInstanceID")
	}
	mg.Spec.ForProvider.ManagedInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLManagedInstance.
func (mg *MSSQLManagedInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DNSZonePartnerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DNSZonePartnerIDRef,
		Selector:     mg.Spec.ForProvider.DNSZonePartnerIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DNSZonePartnerID")
	}
	mg.Spec.ForProvider.DNSZonePartnerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DNSZonePartnerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1beta12.SubnetList{},
			Managed: &v1beta12.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLManagedInstanceActiveDirectoryAdministrator.
func (mg *MSSQLManagedInstanceActiveDirectoryAdministrator) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagedInstanceID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ManagedInstanceIDRef,
		Selector:     mg.Spec.ForProvider.ManagedInstanceIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedInstanceID")
	}
	mg.Spec.ForProvider.ManagedInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLManagedInstanceFailoverGroup.
func (mg *MSSQLManagedInstanceFailoverGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagedInstanceID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ManagedInstanceIDRef,
		Selector:     mg.Spec.ForProvider.ManagedInstanceIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedInstanceID")
	}
	mg.Spec.ForProvider.ManagedInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedInstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PartnerManagedInstanceID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PartnerManagedInstanceIDRef,
		Selector:     mg.Spec.ForProvider.PartnerManagedInstanceIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PartnerManagedInstanceID")
	}
	mg.Spec.ForProvider.PartnerManagedInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PartnerManagedInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLManagedInstanceVulnerabilityAssessment.
func (mg *MSSQLManagedInstanceVulnerabilityAssessment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagedInstanceID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ManagedInstanceIDRef,
		Selector:     mg.Spec.ForProvider.ManagedInstanceIDSelector,
		To: reference.To{
			List:    &MSSQLManagedInstanceList{},
			Managed: &MSSQLManagedInstance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedInstanceID")
	}
	mg.Spec.ForProvider.ManagedInstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedInstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLOutboundFirewallRule.
func (mg *MSSQLOutboundFirewallRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServer.
func (mg *MSSQLServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AzureadAdministrator); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsername),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsernameRef,
			Selector:     mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsernameSelector,
			To: reference.To{
				List:    &v1beta13.UserAssignedIdentityList{},
				Managed: &v1beta13.UserAssignedIdentity{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsername")
		}
		mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsername = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AzureadAdministrator[i3].LoginUsernameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.AzureadAdministrator); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectID),
			Extract:      resource.ExtractParamPath("principal_id", true),
			Reference:    mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectIDRef,
			Selector:     mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectIDSelector,
			To: reference.To{
				List:    &v1beta13.UserAssignedIdentityList{},
				Managed: &v1beta13.UserAssignedIdentity{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectID")
		}
		mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AzureadAdministrator[i3].ObjectIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrimaryUserAssignedIdentityID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PrimaryUserAssignedIdentityIDRef,
		Selector:     mg.Spec.ForProvider.PrimaryUserAssignedIdentityIDSelector,
		To: reference.To{
			List:    &v1beta13.UserAssignedIdentityList{},
			Managed: &v1beta13.UserAssignedIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrimaryUserAssignedIdentityID")
	}
	mg.Spec.ForProvider.PrimaryUserAssignedIdentityID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrimaryUserAssignedIdentityIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyIDRef,
		Selector:     mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyIDSelector,
		To: reference.To{
			List:    &v1beta14.KeyList{},
			Managed: &v1beta14.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyID")
	}
	mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransparentDataEncryptionKeyVaultKeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServerDNSAlias.
func (mg *MSSQLServerDNSAlias) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MSSQLServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.MSSQLServerIDRef,
		Selector:     mg.Spec.ForProvider.MSSQLServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MSSQLServerID")
	}
	mg.Spec.ForProvider.MSSQLServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MSSQLServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServerMicrosoftSupportAuditingPolicy.
func (mg *MSSQLServerMicrosoftSupportAuditingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BlobStorageEndpoint),
		Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
		Reference:    mg.Spec.ForProvider.BlobStorageEndpointRef,
		Selector:     mg.Spec.ForProvider.BlobStorageEndpointSelector,
		To: reference.To{
			List:    &v1beta1.AccountList{},
			Managed: &v1beta1.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BlobStorageEndpoint")
	}
	mg.Spec.ForProvider.BlobStorageEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BlobStorageEndpointRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServerSecurityAlertPolicy.
func (mg *MSSQLServerSecurityAlertPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServerNameRef,
		Selector:     mg.Spec.ForProvider.ServerNameSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerName")
	}
	mg.Spec.ForProvider.ServerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageEndpoint),
		Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
		Reference:    mg.Spec.ForProvider.StorageEndpointRef,
		Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
		To: reference.To{
			List:    &v1beta1.AccountList{},
			Managed: &v1beta1.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServerTransparentDataEncryption.
func (mg *MSSQLServerTransparentDataEncryption) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultKeyID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.KeyVaultKeyIDRef,
		Selector:     mg.Spec.ForProvider.KeyVaultKeyIDSelector,
		To: reference.To{
			List:    &v1beta14.KeyList{},
			Managed: &v1beta14.Key{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultKeyID")
	}
	mg.Spec.ForProvider.KeyVaultKeyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultKeyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLServerVulnerabilityAssessment.
func (mg *MSSQLServerVulnerabilityAssessment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerSecurityAlertPolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerSecurityAlertPolicyIDRef,
		Selector:     mg.Spec.ForProvider.ServerSecurityAlertPolicyIDSelector,
		To: reference.To{
			List:    &MSSQLServerSecurityAlertPolicyList{},
			Managed: &MSSQLServerSecurityAlertPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerSecurityAlertPolicyID")
	}
	mg.Spec.ForProvider.ServerSecurityAlertPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerSecurityAlertPolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MSSQLVirtualNetworkRule.
func (mg *MSSQLVirtualNetworkRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ServerIDRef,
		Selector:     mg.Spec.ForProvider.ServerIDSelector,
		To: reference.To{
			List:    &MSSQLServerList{},
			Managed: &MSSQLServer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1beta12.SubnetList{},
			Managed: &v1beta12.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}
