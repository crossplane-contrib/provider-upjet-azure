/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CreatorObservation struct {

	// The ID of the Azure Maps Creator.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CreatorParameters struct {

	// The Azure Region where the Azure Maps Creator should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the Azure Maps Creator. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/maps/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	MapsAccountID *string `json:"mapsAccountId,omitempty" tf:"maps_account_id,omitempty"`

	// Reference to a Account in maps to populate mapsAccountId.
	// +kubebuilder:validation:Optional
	MapsAccountIDRef *v1.Reference `json:"mapsAccountIdRef,omitempty" tf:"-"`

	// Selector for a Account in maps to populate mapsAccountId.
	// +kubebuilder:validation:Optional
	MapsAccountIDSelector *v1.Selector `json:"mapsAccountIdSelector,omitempty" tf:"-"`

	// The storage units to be allocated. Integer values from 1 to 100, inclusive.
	// +kubebuilder:validation:Required
	StorageUnits *float64 `json:"storageUnits" tf:"storage_units,omitempty"`

	// A mapping of tags which should be assigned to the Azure Maps Creator.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CreatorSpec defines the desired state of Creator
type CreatorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CreatorParameters `json:"forProvider"`
}

// CreatorStatus defines the observed state of Creator.
type CreatorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CreatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Creator is the Schema for the Creators API. Manages an Azure Maps Creator.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Creator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CreatorSpec   `json:"spec"`
	Status            CreatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CreatorList contains a list of Creators
type CreatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Creator `json:"items"`
}

// Repository type metadata.
var (
	Creator_Kind             = "Creator"
	Creator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Creator_Kind}.String()
	Creator_KindAPIVersion   = Creator_Kind + "." + CRDGroupVersion.String()
	Creator_GroupVersionKind = CRDGroupVersion.WithKind(Creator_Kind)
)

func init() {
	SchemeBuilder.Register(&Creator{}, &CreatorList{})
}
