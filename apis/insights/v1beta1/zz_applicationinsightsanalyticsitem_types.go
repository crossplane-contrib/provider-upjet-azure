/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInsightsAnalyticsItemObservation struct {

	// The ID of the Application Insights Analytics Item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A string containing the time the Analytics Item was created.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// A string containing the time the Analytics Item was last modified.
	TimeModified *string `json:"timeModified,omitempty" tf:"time_modified,omitempty"`

	// A string indicating the version of the query format
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ApplicationInsightsAnalyticsItemParameters struct {

	// The ID of the Application Insights component on which the Analytics Item exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/insights/v1beta1.ApplicationInsights
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ApplicationInsightsID *string `json:"applicationInsightsId,omitempty" tf:"application_insights_id,omitempty"`

	// Reference to a ApplicationInsights in insights to populate applicationInsightsId.
	// +kubebuilder:validation:Optional
	ApplicationInsightsIDRef *v1.Reference `json:"applicationInsightsIdRef,omitempty" tf:"-"`

	// Selector for a ApplicationInsights in insights to populate applicationInsightsId.
	// +kubebuilder:validation:Optional
	ApplicationInsightsIDSelector *v1.Selector `json:"applicationInsightsIdSelector,omitempty" tf:"-"`

	// The content for the Analytics Item, for example the query text if type is query.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// The alias to use for the function. Required when type is function.
	// +kubebuilder:validation:Optional
	FunctionAlias *string `json:"functionAlias,omitempty" tf:"function_alias,omitempty"`

	// Specifies the name of the Application Insights Analytics Item. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The scope for the Analytics Item. Can be shared or user. Changing this forces a new resource to be created. Must be shared for functions.
	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`

	// The type of Analytics Item to create. Can be one of query, function, folder, recent. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ApplicationInsightsAnalyticsItemSpec defines the desired state of ApplicationInsightsAnalyticsItem
type ApplicationInsightsAnalyticsItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationInsightsAnalyticsItemParameters `json:"forProvider"`
}

// ApplicationInsightsAnalyticsItemStatus defines the observed state of ApplicationInsightsAnalyticsItem.
type ApplicationInsightsAnalyticsItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationInsightsAnalyticsItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsAnalyticsItem is the Schema for the ApplicationInsightsAnalyticsItems API. Manages an Application Insights Analytics Item component.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationInsightsAnalyticsItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationInsightsAnalyticsItemSpec   `json:"spec"`
	Status            ApplicationInsightsAnalyticsItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsAnalyticsItemList contains a list of ApplicationInsightsAnalyticsItems
type ApplicationInsightsAnalyticsItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationInsightsAnalyticsItem `json:"items"`
}

// Repository type metadata.
var (
	ApplicationInsightsAnalyticsItem_Kind             = "ApplicationInsightsAnalyticsItem"
	ApplicationInsightsAnalyticsItem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationInsightsAnalyticsItem_Kind}.String()
	ApplicationInsightsAnalyticsItem_KindAPIVersion   = ApplicationInsightsAnalyticsItem_Kind + "." + CRDGroupVersion.String()
	ApplicationInsightsAnalyticsItem_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationInsightsAnalyticsItem_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationInsightsAnalyticsItem{}, &ApplicationInsightsAnalyticsItemList{})
}
