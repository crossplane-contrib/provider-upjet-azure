// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsights
func (mg *ApplicationInsights) GetTerraformResourceType() string {
	return "azurerm_application_insights"
}

// GetConnectionDetailsMapping for this ApplicationInsights
func (tr *ApplicationInsights) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "status.atProvider.connectionString", "instrumentation_key": "status.atProvider.instrumentationKey"}
}

// GetObservation of this ApplicationInsights
func (tr *ApplicationInsights) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsights
func (tr *ApplicationInsights) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsights
func (tr *ApplicationInsights) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsights
func (tr *ApplicationInsights) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsights
func (tr *ApplicationInsights) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsights
func (tr *ApplicationInsights) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsights using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsights) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsights) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsAnalyticsItem
func (mg *ApplicationInsightsAnalyticsItem) GetTerraformResourceType() string {
	return "azurerm_application_insights_analytics_item"
}

// GetConnectionDetailsMapping for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsAnalyticsItem using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsAnalyticsItem) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsAnalyticsItemParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsAnalyticsItem) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsAPIKey
func (mg *ApplicationInsightsAPIKey) GetTerraformResourceType() string {
	return "azurerm_application_insights_api_key"
}

// GetConnectionDetailsMapping for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"api_key": "status.atProvider.apiKey"}
}

// GetObservation of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsAPIKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsAPIKey) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsAPIKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsAPIKey) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsSmartDetectionRule
func (mg *ApplicationInsightsSmartDetectionRule) GetTerraformResourceType() string {
	return "azurerm_application_insights_smart_detection_rule"
}

// GetConnectionDetailsMapping for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsSmartDetectionRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsSmartDetectionRule) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsSmartDetectionRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsSmartDetectionRule) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsStandardWebTest
func (mg *ApplicationInsightsStandardWebTest) GetTerraformResourceType() string {
	return "azurerm_application_insights_standard_web_test"
}

// GetConnectionDetailsMapping for this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsStandardWebTest
func (tr *ApplicationInsightsStandardWebTest) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsStandardWebTest using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsStandardWebTest) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsStandardWebTestParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsStandardWebTest) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsWebTest
func (mg *ApplicationInsightsWebTest) GetTerraformResourceType() string {
	return "azurerm_application_insights_web_test"
}

// GetConnectionDetailsMapping for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsWebTest using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsWebTest) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsWebTestParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsWebTest) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsWorkbook
func (mg *ApplicationInsightsWorkbook) GetTerraformResourceType() string {
	return "azurerm_application_insights_workbook"
}

// GetConnectionDetailsMapping for this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsWorkbook
func (tr *ApplicationInsightsWorkbook) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsWorkbook using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsWorkbook) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsWorkbookParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsWorkbook) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsWorkbookTemplate
func (mg *ApplicationInsightsWorkbookTemplate) GetTerraformResourceType() string {
	return "azurerm_application_insights_workbook_template"
}

// GetConnectionDetailsMapping for this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ApplicationInsightsWorkbookTemplate
func (tr *ApplicationInsightsWorkbookTemplate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ApplicationInsightsWorkbookTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsWorkbookTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsWorkbookTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsWorkbookTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorActionGroup
func (mg *MonitorActionGroup) GetTerraformResourceType() string {
	return "azurerm_monitor_action_group"
}

// GetConnectionDetailsMapping for this MonitorActionGroup
func (tr *MonitorActionGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActionGroup
func (tr *MonitorActionGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActionGroup
func (tr *MonitorActionGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActionGroup
func (tr *MonitorActionGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActionGroup
func (tr *MonitorActionGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActionGroup
func (tr *MonitorActionGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorActionGroup
func (tr *MonitorActionGroup) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorActionGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActionGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActionGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActionGroup) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MonitorActivityLogAlert
func (mg *MonitorActivityLogAlert) GetTerraformResourceType() string {
	return "azurerm_monitor_activity_log_alert"
}

// GetConnectionDetailsMapping for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorActivityLogAlert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActivityLogAlert) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActivityLogAlertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActivityLogAlert) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MonitorAutoscaleSetting
func (mg *MonitorAutoscaleSetting) GetTerraformResourceType() string {
	return "azurerm_monitor_autoscale_setting"
}

// GetConnectionDetailsMapping for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorAutoscaleSetting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorAutoscaleSetting) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorAutoscaleSettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorAutoscaleSetting) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this MonitorDataCollectionEndpoint
func (mg *MonitorDataCollectionEndpoint) GetTerraformResourceType() string {
	return "azurerm_monitor_data_collection_endpoint"
}

// GetConnectionDetailsMapping for this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorDataCollectionEndpoint
func (tr *MonitorDataCollectionEndpoint) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorDataCollectionEndpoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorDataCollectionEndpoint) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorDataCollectionEndpointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorDataCollectionEndpoint) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorDataCollectionRule
func (mg *MonitorDataCollectionRule) GetTerraformResourceType() string {
	return "azurerm_monitor_data_collection_rule"
}

// GetConnectionDetailsMapping for this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorDataCollectionRule
func (tr *MonitorDataCollectionRule) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorDataCollectionRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorDataCollectionRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorDataCollectionRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorDataCollectionRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorDataCollectionRuleAssociation
func (mg *MonitorDataCollectionRuleAssociation) GetTerraformResourceType() string {
	return "azurerm_monitor_data_collection_rule_association"
}

// GetConnectionDetailsMapping for this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorDataCollectionRuleAssociation
func (tr *MonitorDataCollectionRuleAssociation) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorDataCollectionRuleAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorDataCollectionRuleAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorDataCollectionRuleAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorDataCollectionRuleAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorDiagnosticSetting
func (mg *MonitorDiagnosticSetting) GetTerraformResourceType() string {
	return "azurerm_monitor_diagnostic_setting"
}

// GetConnectionDetailsMapping for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorDiagnosticSetting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorDiagnosticSetting) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorDiagnosticSettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	opts = append(opts, resource.WithNameFilter("EnabledLog"))
	opts = append(opts, resource.WithNameFilter("Log"))

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorDiagnosticSetting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorMetricAlert
func (mg *MonitorMetricAlert) GetTerraformResourceType() string {
	return "azurerm_monitor_metric_alert"
}

// GetConnectionDetailsMapping for this MonitorMetricAlert
func (tr *MonitorMetricAlert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorMetricAlert
func (tr *MonitorMetricAlert) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorMetricAlert
func (tr *MonitorMetricAlert) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorMetricAlert
func (tr *MonitorMetricAlert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorMetricAlert
func (tr *MonitorMetricAlert) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorMetricAlert
func (tr *MonitorMetricAlert) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorMetricAlert
func (tr *MonitorMetricAlert) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorMetricAlert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorMetricAlert) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorMetricAlertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorMetricAlert) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MonitorPrivateLinkScope
func (mg *MonitorPrivateLinkScope) GetTerraformResourceType() string {
	return "azurerm_monitor_private_link_scope"
}

// GetConnectionDetailsMapping for this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorPrivateLinkScope
func (tr *MonitorPrivateLinkScope) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorPrivateLinkScope using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorPrivateLinkScope) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorPrivateLinkScopeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorPrivateLinkScope) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorPrivateLinkScopedService
func (mg *MonitorPrivateLinkScopedService) GetTerraformResourceType() string {
	return "azurerm_monitor_private_link_scoped_service"
}

// GetConnectionDetailsMapping for this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorPrivateLinkScopedService
func (tr *MonitorPrivateLinkScopedService) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorPrivateLinkScopedService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorPrivateLinkScopedService) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorPrivateLinkScopedServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorPrivateLinkScopedService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorScheduledQueryRulesAlert
func (mg *MonitorScheduledQueryRulesAlert) GetTerraformResourceType() string {
	return "azurerm_monitor_scheduled_query_rules_alert"
}

// GetConnectionDetailsMapping for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorScheduledQueryRulesAlert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorScheduledQueryRulesAlert) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorScheduledQueryRulesAlertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorScheduledQueryRulesAlert) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MonitorScheduledQueryRulesAlertV2
func (mg *MonitorScheduledQueryRulesAlertV2) GetTerraformResourceType() string {
	return "azurerm_monitor_scheduled_query_rules_alert_v2"
}

// GetConnectionDetailsMapping for this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorScheduledQueryRulesAlertV2
func (tr *MonitorScheduledQueryRulesAlertV2) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorScheduledQueryRulesAlertV2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorScheduledQueryRulesAlertV2) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorScheduledQueryRulesAlertV2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorScheduledQueryRulesAlertV2) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorScheduledQueryRulesLog
func (mg *MonitorScheduledQueryRulesLog) GetTerraformResourceType() string {
	return "azurerm_monitor_scheduled_query_rules_log"
}

// GetConnectionDetailsMapping for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this MonitorScheduledQueryRulesLog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorScheduledQueryRulesLog) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorScheduledQueryRulesLogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorScheduledQueryRulesLog) GetTerraformSchemaVersion() int {
	return 1
}
