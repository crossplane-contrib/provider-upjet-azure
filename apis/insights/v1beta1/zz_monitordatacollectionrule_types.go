/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureMonitorMetricsObservation struct {
}

type AzureMonitorMetricsParameters struct {

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type DataFlowObservation struct {
}

type DataFlowParameters struct {

	// Specifies a list of destination names. A azure_monitor_metrics data source only allows for stream of kind Microsoft-InsightsMetrics.
	// +kubebuilder:validation:Required
	Destinations []*string `json:"destinations" tf:"destinations,omitempty"`

	// Specifies a list of streams. Possible values include but not limited to Microsoft-Event, Microsoft-InsightsMetrics, Microsoft-Perf, Microsoft-Syslog,and Microsoft-WindowsEvent.
	// +kubebuilder:validation:Required
	Streams []*string `json:"streams" tf:"streams,omitempty"`
}

type DataSourcesObservation struct {
}

type DataSourcesParameters struct {

	// One or more extension blocks as defined below.
	// +kubebuilder:validation:Optional
	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension,omitempty"`

	// One or more performance_counter blocks as defined below.
	// +kubebuilder:validation:Optional
	PerformanceCounter []PerformanceCounterParameters `json:"performanceCounter,omitempty" tf:"performance_counter,omitempty"`

	// One or more syslog blocks as defined below.
	// +kubebuilder:validation:Optional
	Syslog []SyslogParameters `json:"syslog,omitempty" tf:"syslog,omitempty"`

	// One or more windows_event_log blocks as defined below.
	// +kubebuilder:validation:Optional
	WindowsEventLog []WindowsEventLogParameters `json:"windowsEventLog,omitempty" tf:"windows_event_log,omitempty"`
}

type DestinationsObservation struct {
}

type DestinationsParameters struct {

	// A azure_monitor_metrics block as defined above.
	// +kubebuilder:validation:Optional
	AzureMonitorMetrics []AzureMonitorMetricsParameters `json:"azureMonitorMetrics,omitempty" tf:"azure_monitor_metrics,omitempty"`

	// One or more log_analytics blocks as defined below.
	// +kubebuilder:validation:Optional
	LogAnalytics []LogAnalyticsParameters `json:"logAnalytics,omitempty" tf:"log_analytics,omitempty"`
}

type ExtensionObservation struct {
}

type ExtensionParameters struct {

	// A JSON String which specifies the extension setting.
	// +kubebuilder:validation:Optional
	ExtensionJSON *string `json:"extensionJson,omitempty" tf:"extension_json,omitempty"`

	// The name of the VM extension.
	// +kubebuilder:validation:Required
	ExtensionName *string `json:"extensionName" tf:"extension_name,omitempty"`

	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: performance_counter, windows_event_log,and syslog.
	// +kubebuilder:validation:Optional
	InputDataSources []*string `json:"inputDataSources,omitempty" tf:"input_data_sources,omitempty"`

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to Microsoft-Event,and Microsoft-WindowsEvent, Microsoft-RomeDetectionEvent, and Microsoft-SecurityEvent.
	// +kubebuilder:validation:Required
	Streams []*string `json:"streams" tf:"streams,omitempty"`
}

type LogAnalyticsObservation struct {
}

type LogAnalyticsParameters struct {

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The ID of a Log Analytic Workspace resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WorkspaceResourceID *string `json:"workspaceResourceId,omitempty" tf:"workspace_resource_id,omitempty"`

	// Reference to a Workspace in operationalinsights to populate workspaceResourceId.
	// +kubebuilder:validation:Optional
	WorkspaceResourceIDRef *v1.Reference `json:"workspaceResourceIdRef,omitempty" tf:"-"`

	// Selector for a Workspace in operationalinsights to populate workspaceResourceId.
	// +kubebuilder:validation:Optional
	WorkspaceResourceIDSelector *v1.Selector `json:"workspaceResourceIdSelector,omitempty" tf:"-"`
}

type MonitorDataCollectionRuleObservation struct {

	// The ID of the Data Collection Rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MonitorDataCollectionRuleParameters struct {

	// One or more data_flow blocks as defined below.
	// +kubebuilder:validation:Required
	DataFlow []DataFlowParameters `json:"dataFlow" tf:"data_flow,omitempty"`

	// A data_sources block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	// +kubebuilder:validation:Optional
	DataSources []DataSourcesParameters `json:"dataSources,omitempty" tf:"data_sources,omitempty"`

	// The description of the Data Collection Rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A destinations block as defined below.
	// +kubebuilder:validation:Required
	Destinations []DestinationsParameters `json:"destinations" tf:"destinations,omitempty"`

	// The kind of the Data Collection Rule. Possible values are Linux and Windows. A rule of kind Linux does not allow for windows_event_log data sources. And a rule of kind Windows does not allow for syslog data sources. If kind is not specified, all kinds of data sources are allowed.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags which should be assigned to the Data Collection Rule.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PerformanceCounterObservation struct {
}

type PerformanceCounterParameters struct {

	// Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard * to collect counters for all instances. To get a list of performance counters on Windows, run the command typeperf.
	// +kubebuilder:validation:Required
	CounterSpecifiers []*string `json:"counterSpecifiers" tf:"counter_specifiers,omitempty"`

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The number of seconds between consecutive counter measurements (samples). The value should be integer between 1 and 300 inclusive.
	// +kubebuilder:validation:Required
	SamplingFrequencyInSeconds *float64 `json:"samplingFrequencyInSeconds" tf:"sampling_frequency_in_seconds,omitempty"`

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to Microsoft-Event,and Microsoft-WindowsEvent, Microsoft-RomeDetectionEvent, and Microsoft-SecurityEvent.
	// +kubebuilder:validation:Required
	Streams []*string `json:"streams" tf:"streams,omitempty"`
}

type SyslogObservation struct {
}

type SyslogParameters struct {

	// Specifies a list of facility names. Use a wildcard * to collect logs for all facility names. Possible values are auth, authpriv, cron, daemon, kern, lpr, mail, mark, news, syslog, user, uucp, local0, local1, local2, local3, local4, local5, local6, local7,and *.
	// +kubebuilder:validation:Required
	FacilityNames []*string `json:"facilityNames" tf:"facility_names,omitempty"`

	// Specifies a list of log levels. Use a wildcard * to collect logs for all log levels. Possible values are Debug, Info, Notice, Warning, Error, Critical, Alert, Emergency,and *.
	// +kubebuilder:validation:Required
	LogLevels []*string `json:"logLevels" tf:"log_levels,omitempty"`

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to Microsoft-Event,and Microsoft-WindowsEvent, Microsoft-RomeDetectionEvent, and Microsoft-SecurityEvent.
	// +kubebuilder:validation:Optional
	Streams []*string `json:"streams,omitempty" tf:"streams,omitempty"`
}

type WindowsEventLogObservation struct {
}

type WindowsEventLogParameters struct {

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to Microsoft-Event,and Microsoft-WindowsEvent, Microsoft-RomeDetectionEvent, and Microsoft-SecurityEvent.
	// +kubebuilder:validation:Required
	Streams []*string `json:"streams" tf:"streams,omitempty"`

	// Specifies a list of Windows Event Log queries in XPath expression.
	// +kubebuilder:validation:Required
	XPathQueries []*string `json:"xPathQueries" tf:"x_path_queries,omitempty"`
}

// MonitorDataCollectionRuleSpec defines the desired state of MonitorDataCollectionRule
type MonitorDataCollectionRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorDataCollectionRuleParameters `json:"forProvider"`
}

// MonitorDataCollectionRuleStatus defines the observed state of MonitorDataCollectionRule.
type MonitorDataCollectionRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorDataCollectionRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorDataCollectionRule is the Schema for the MonitorDataCollectionRules API. Manages a Data Collection Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorDataCollectionRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorDataCollectionRuleSpec   `json:"spec"`
	Status            MonitorDataCollectionRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorDataCollectionRuleList contains a list of MonitorDataCollectionRules
type MonitorDataCollectionRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorDataCollectionRule `json:"items"`
}

// Repository type metadata.
var (
	MonitorDataCollectionRule_Kind             = "MonitorDataCollectionRule"
	MonitorDataCollectionRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorDataCollectionRule_Kind}.String()
	MonitorDataCollectionRule_KindAPIVersion   = MonitorDataCollectionRule_Kind + "." + CRDGroupVersion.String()
	MonitorDataCollectionRule_GroupVersionKind = CRDGroupVersion.WithKind(MonitorDataCollectionRule_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorDataCollectionRule{}, &MonitorDataCollectionRuleList{})
}
