// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	helper "github.com/crossplane/crossplane-tools/pkg/helpers"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ApplicationInsightsStandardWebTest) ResolveReferences( // ResolveReferences of this ApplicationInsightsStandardWebTest.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ApplicationInsightsID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ApplicationInsightsIDRef,
			Selector:     mg.Spec.ForProvider.ApplicationInsightsIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationInsightsID")
	}
	mg.Spec.ForProvider.ApplicationInsightsID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationInsightsIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ApplicationInsightsID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ApplicationInsightsIDRef,
			Selector:     mg.Spec.InitProvider.ApplicationInsightsIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationInsightsID")
	}
	mg.Spec.InitProvider.ApplicationInsightsID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationInsightsIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ApplicationInsightsWorkbook.
func (mg *ApplicationInsightsWorkbook) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorActionGroup.
func (mg *MonitorActionGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorActivityLogAlert.
func (mg *MonitorActivityLogAlert) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Action); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Action[i3].ActionGroupID, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Action[i3].ActionGroupIDRef,
				Selector:     mg.Spec.ForProvider.Action[i3].ActionGroupIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Action[i3].ActionGroupID")
		}
		mg.Spec.ForProvider.Action[i3].ActionGroupID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Action[i3].ActionGroupIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Criteria != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Criteria.ResourceID, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Criteria.ResourceIDRef,
				Selector:     mg.Spec.ForProvider.Criteria.ResourceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Criteria.ResourceID")
		}
		mg.Spec.ForProvider.Criteria.ResourceID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Criteria.ResourceIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.ForProvider.ScopesRefs,
			Selector:      mg.Spec.ForProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scopes")
	}
	mg.Spec.ForProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopesRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Action); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Action[i3].ActionGroupID, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Action[i3].ActionGroupIDRef,
				Selector:     mg.Spec.InitProvider.Action[i3].ActionGroupIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Action[i3].ActionGroupID")
		}
		mg.Spec.InitProvider.Action[i3].ActionGroupID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Action[i3].ActionGroupIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Criteria != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Criteria.ResourceID, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Criteria.ResourceIDRef,
				Selector:     mg.Spec.InitProvider.Criteria.ResourceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Criteria.ResourceID")
		}
		mg.Spec.InitProvider.Criteria.ResourceID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Criteria.ResourceIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.InitProvider.ScopesRefs,
			Selector:      mg.Spec.InitProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scopes")
	}
	mg.Spec.InitProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MonitorAutoscaleSetting.
func (mg *MonitorAutoscaleSetting) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Profile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Profile[i3].Rule); i4++ {
			if mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger != nil {
				{
					m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "LinuxVirtualMachineScaleSet", "LinuxVirtualMachineScaleSetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: ptr.Deref(mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID, ""),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDRef,
						Selector:     mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID")
				}
				mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID = ptr.To(rsp.ResolvedValue)
				mg.Spec.ForProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "LinuxVirtualMachineScaleSet", "LinuxVirtualMachineScaleSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.TargetResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Profile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Profile[i3].Rule); i4++ {
			if mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger != nil {
				{
					m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "LinuxVirtualMachineScaleSet", "LinuxVirtualMachineScaleSetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: ptr.Deref(mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID, ""),
						Extract:      resource.ExtractResourceID(),
						Reference:    mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDRef,
						Selector:     mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID")
				}
				mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceID = ptr.To(rsp.ResolvedValue)
				mg.Spec.InitProvider.Profile[i3].Rule[i4].MetricTrigger.MetricResourceIDRef = rsp.ResolvedReference

			}
		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "LinuxVirtualMachineScaleSet", "LinuxVirtualMachineScaleSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.TargetResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorDataCollectionRule.
func (mg *MonitorDataCollectionRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "MonitorDataCollectionEndpoint", "MonitorDataCollectionEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataCollectionEndpointID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataCollectionEndpointIDRef,
			Selector:     mg.Spec.ForProvider.DataCollectionEndpointIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataCollectionEndpointID")
	}
	mg.Spec.ForProvider.DataCollectionEndpointID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataCollectionEndpointIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Destinations != nil {
		if mg.Spec.ForProvider.Destinations.EventHub != nil {
			{
				m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Destinations.EventHub.EventHubID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Destinations.EventHub.EventHubIDRef,
					Selector:     mg.Spec.ForProvider.Destinations.EventHub.EventHubIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Destinations.EventHub.EventHubID")
			}
			mg.Spec.ForProvider.Destinations.EventHub.EventHubID = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Destinations.EventHub.EventHubIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Destinations.LogAnalytics); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDRef,
					Selector:     mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID")
			}
			mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Destinations.StorageBlob); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerName, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerNameRef,
					Selector:     mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerName")
			}
			mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerName = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Destinations.StorageBlob[i4].ContainerNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Destinations.StorageBlob); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountIDRef,
					Selector:     mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountID")
			}
			mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountID = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Destinations.StorageBlob[i4].StorageAccountIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Identity != nil {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Identity.IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Identity.IdentityIdsRefs,
				Selector:      mg.Spec.ForProvider.Identity.IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Identity.IdentityIds")
		}
		mg.Spec.ForProvider.Identity.IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Identity.IdentityIdsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "MonitorDataCollectionEndpoint", "MonitorDataCollectionEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.DataCollectionEndpointID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DataCollectionEndpointIDRef,
			Selector:     mg.Spec.InitProvider.DataCollectionEndpointIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataCollectionEndpointID")
	}
	mg.Spec.InitProvider.DataCollectionEndpointID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataCollectionEndpointIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Destinations != nil {
		if mg.Spec.InitProvider.Destinations.EventHub != nil {
			{
				m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Destinations.EventHub.EventHubID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Destinations.EventHub.EventHubIDRef,
					Selector:     mg.Spec.InitProvider.Destinations.EventHub.EventHubIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Destinations.EventHub.EventHubID")
			}
			mg.Spec.InitProvider.Destinations.EventHub.EventHubID = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Destinations.EventHub.EventHubIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Destinations.LogAnalytics); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDRef,
					Selector:     mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID")
			}
			mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceID = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Destinations.LogAnalytics[i4].WorkspaceResourceIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Destinations.StorageBlob); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerName, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerNameRef,
					Selector:     mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerName")
			}
			mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerName = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Destinations.StorageBlob[i4].ContainerNameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Destinations != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Destinations.StorageBlob); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountID, ""),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountIDRef,
					Selector:     mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountID")
			}
			mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountID = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Destinations.StorageBlob[i4].StorageAccountIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Identity != nil {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Identity.IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Identity.IdentityIdsRefs,
				Selector:      mg.Spec.InitProvider.Identity.IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Identity.IdentityIds")
		}
		mg.Spec.InitProvider.Identity.IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Identity.IdentityIdsRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this MonitorDiagnosticSetting.
func (mg *MonitorDiagnosticSetting) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccountID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.StorageAccountIDRef,
			Selector:     mg.Spec.ForProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountID")
	}
	mg.Spec.ForProvider.StorageAccountID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccountID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.StorageAccountIDRef,
			Selector:     mg.Spec.InitProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountID")
	}
	mg.Spec.InitProvider.StorageAccountID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorMetricAlert.
func (mg *MonitorMetricAlert) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Action); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Action[i3].ActionGroupID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Action[i3].ActionGroupIDRef,
				Selector:     mg.Spec.ForProvider.Action[i3].ActionGroupIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Action[i3].ActionGroupID")
		}
		mg.Spec.ForProvider.Action[i3].ActionGroupID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Action[i3].ActionGroupIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.ForProvider.ScopesRefs,
			Selector:      mg.Spec.ForProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scopes")
	}
	mg.Spec.ForProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopesRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Action); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Action[i3].ActionGroupID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Action[i3].ActionGroupIDRef,
				Selector:     mg.Spec.InitProvider.Action[i3].ActionGroupIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Action[i3].ActionGroupID")
		}
		mg.Spec.InitProvider.Action[i3].ActionGroupID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Action[i3].ActionGroupIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.InitProvider.ScopesRefs,
			Selector:      mg.Spec.InitProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scopes")
	}
	mg.Spec.InitProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MonitorScheduledQueryRulesAlert.
func (mg *MonitorScheduledQueryRulesAlert) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Action != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Action.ActionGroup),
				Extract:       rconfig.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Action.ActionGroupRefs,
				Selector:      mg.Spec.ForProvider.Action.ActionGroupSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Action.ActionGroup")
		}
		mg.Spec.ForProvider.Action.ActionGroup = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Action.ActionGroupRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.AuthorizedResourceIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.ForProvider.AuthorizedResourceIdsRefs,
			Selector:      mg.Spec.ForProvider.AuthorizedResourceIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizedResourceIds")
	}
	mg.Spec.ForProvider.AuthorizedResourceIds = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AuthorizedResourceIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataSourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataSourceIDRef,
			Selector:     mg.Spec.ForProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataSourceID")
	}
	mg.Spec.ForProvider.DataSourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Action != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Action.ActionGroup),
				Extract:       rconfig.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Action.ActionGroupRefs,
				Selector:      mg.Spec.InitProvider.Action.ActionGroupSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Action.ActionGroup")
		}
		mg.Spec.InitProvider.Action.ActionGroup = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Action.ActionGroupRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.AuthorizedResourceIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.InitProvider.AuthorizedResourceIdsRefs,
			Selector:      mg.Spec.InitProvider.AuthorizedResourceIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizedResourceIds")
	}
	mg.Spec.InitProvider.AuthorizedResourceIds = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.AuthorizedResourceIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.DataSourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DataSourceIDRef,
			Selector:     mg.Spec.InitProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataSourceID")
	}
	mg.Spec.InitProvider.DataSourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorScheduledQueryRulesAlertV2.
func (mg *MonitorScheduledQueryRulesAlertV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Action != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Action.ActionGroups),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Action.ActionGroupsRefs,
				Selector:      mg.Spec.ForProvider.Action.ActionGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Action.ActionGroups")
		}
		mg.Spec.ForProvider.Action.ActionGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Action.ActionGroupsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.Identity != nil {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Identity.IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Identity.IdentityIdsRefs,
				Selector:      mg.Spec.ForProvider.Identity.IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Identity.IdentityIds")
		}
		mg.Spec.ForProvider.Identity.IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Identity.IdentityIdsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.ForProvider.ScopesRefs,
			Selector:      mg.Spec.ForProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scopes")
	}
	mg.Spec.ForProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopesRefs = mrsp.ResolvedReferences

	if mg.Spec.InitProvider.Action != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Action.ActionGroups),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Action.ActionGroupsRefs,
				Selector:      mg.Spec.InitProvider.Action.ActionGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Action.ActionGroups")
		}
		mg.Spec.InitProvider.Action.ActionGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Action.ActionGroupsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.Identity != nil {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Identity.IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Identity.IdentityIdsRefs,
				Selector:      mg.Spec.InitProvider.Identity.IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Identity.IdentityIds")
		}
		mg.Spec.InitProvider.Identity.IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Identity.IdentityIdsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Scopes),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.InitProvider.ScopesRefs,
			Selector:      mg.Spec.InitProvider.ScopesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scopes")
	}
	mg.Spec.InitProvider.Scopes = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MonitorScheduledQueryRulesLog.
func (mg *MonitorScheduledQueryRulesLog) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataSourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataSourceIDRef,
			Selector:     mg.Spec.ForProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataSourceID")
	}
	mg.Spec.ForProvider.DataSourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.DataSourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DataSourceIDRef,
			Selector:     mg.Spec.InitProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataSourceID")
	}
	mg.Spec.InitProvider.DataSourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
