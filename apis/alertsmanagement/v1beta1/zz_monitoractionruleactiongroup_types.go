// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertContextInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AlertContextObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AlertContextParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type AlertRuleIDInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AlertRuleIDObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AlertRuleIDParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type ConditionInitParameters struct {

	// A alert_context block as defined below.
	AlertContext []AlertContextInitParameters `json:"alertContext,omitempty" tf:"alert_context,omitempty"`

	// A alert_rule_id block as defined below.
	AlertRuleID []AlertRuleIDInitParameters `json:"alertRuleId,omitempty" tf:"alert_rule_id,omitempty"`

	// A description block as defined below.
	Description []DescriptionInitParameters `json:"description,omitempty" tf:"description,omitempty"`

	// A monitor block as defined below.
	Monitor []MonitorInitParameters `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// A monitor_service as block defined below.
	MonitorService []MonitorServiceInitParameters `json:"monitorService,omitempty" tf:"monitor_service,omitempty"`

	// A severity block as defined below.
	Severity []SeverityInitParameters `json:"severity,omitempty" tf:"severity,omitempty"`

	// A target_resource_type block as defined below.
	TargetResourceType []TargetResourceTypeInitParameters `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`
}

type ConditionObservation struct {

	// A alert_context block as defined below.
	AlertContext []AlertContextObservation `json:"alertContext,omitempty" tf:"alert_context,omitempty"`

	// A alert_rule_id block as defined below.
	AlertRuleID []AlertRuleIDObservation `json:"alertRuleId,omitempty" tf:"alert_rule_id,omitempty"`

	// A description block as defined below.
	Description []DescriptionObservation `json:"description,omitempty" tf:"description,omitempty"`

	// A monitor block as defined below.
	Monitor []MonitorObservation `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// A monitor_service as block defined below.
	MonitorService []MonitorServiceObservation `json:"monitorService,omitempty" tf:"monitor_service,omitempty"`

	// A severity block as defined below.
	Severity []SeverityObservation `json:"severity,omitempty" tf:"severity,omitempty"`

	// A target_resource_type block as defined below.
	TargetResourceType []TargetResourceTypeObservation `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`
}

type ConditionParameters struct {

	// A alert_context block as defined below.
	// +kubebuilder:validation:Optional
	AlertContext []AlertContextParameters `json:"alertContext,omitempty" tf:"alert_context,omitempty"`

	// A alert_rule_id block as defined below.
	// +kubebuilder:validation:Optional
	AlertRuleID []AlertRuleIDParameters `json:"alertRuleId,omitempty" tf:"alert_rule_id,omitempty"`

	// A description block as defined below.
	// +kubebuilder:validation:Optional
	Description []DescriptionParameters `json:"description,omitempty" tf:"description,omitempty"`

	// A monitor block as defined below.
	// +kubebuilder:validation:Optional
	Monitor []MonitorParameters `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// A monitor_service as block defined below.
	// +kubebuilder:validation:Optional
	MonitorService []MonitorServiceParameters `json:"monitorService,omitempty" tf:"monitor_service,omitempty"`

	// A severity block as defined below.
	// +kubebuilder:validation:Optional
	Severity []SeverityParameters `json:"severity,omitempty" tf:"severity,omitempty"`

	// A target_resource_type block as defined below.
	// +kubebuilder:validation:Optional
	TargetResourceType []TargetResourceTypeParameters `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`
}

type DescriptionInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type DescriptionObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type DescriptionParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type MonitorActionRuleActionGroupInitParameters struct {

	// A condition block as defined below.
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies a description for the Action Rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Is the Action Rule enabled? Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A scope block as defined below.
	Scope []ScopeInitParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type MonitorActionRuleActionGroupObservation struct {

	// Specifies the resource id of monitor action group.
	ActionGroupID *string `json:"actionGroupId,omitempty" tf:"action_group_id,omitempty"`

	// A condition block as defined below.
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies a description for the Action Rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Is the Action Rule enabled? Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the Monitor Action Rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the resource group in which the Monitor Action Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// A scope block as defined below.
	Scope []ScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type MonitorActionRuleActionGroupParameters struct {

	// Specifies the resource id of monitor action group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/insights/v1beta1.MonitorActionGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ActionGroupID *string `json:"actionGroupId,omitempty" tf:"action_group_id,omitempty"`

	// Reference to a MonitorActionGroup in insights to populate actionGroupId.
	// +kubebuilder:validation:Optional
	ActionGroupIDRef *v1.Reference `json:"actionGroupIdRef,omitempty" tf:"-"`

	// Selector for a MonitorActionGroup in insights to populate actionGroupId.
	// +kubebuilder:validation:Optional
	ActionGroupIDSelector *v1.Selector `json:"actionGroupIdSelector,omitempty" tf:"-"`

	// A condition block as defined below.
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// Specifies a description for the Action Rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Is the Action Rule enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the name of the resource group in which the Monitor Action Rule should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A scope block as defined below.
	// +kubebuilder:validation:Optional
	Scope []ScopeParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type MonitorInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MonitorObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MonitorParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type MonitorServiceInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MonitorServiceObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MonitorServiceParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type ScopeInitParameters struct {

	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds []*string `json:"resourceIds,omitempty" tf:"resource_ids,omitempty"`

	// Specifies the type of target scope. Possible values are ResourceGroup and Resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScopeObservation struct {

	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds []*string `json:"resourceIds,omitempty" tf:"resource_ids,omitempty"`

	// Specifies the type of target scope. Possible values are ResourceGroup and Resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScopeParameters struct {

	// A list of resource IDs of the given scope type which will be the target of action rule.
	// +kubebuilder:validation:Optional
	ResourceIds []*string `json:"resourceIds" tf:"resource_ids,omitempty"`

	// Specifies the type of target scope. Possible values are ResourceGroup and Resource.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SeverityInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SeverityObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SeverityParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type TargetResourceTypeInitParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TargetResourceTypeObservation struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TargetResourceTypeParameters struct {

	// The operator for a given condition. Possible values are Equals and NotEquals.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// A list of values to match for a given condition. The values should be valid resource types.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

// MonitorActionRuleActionGroupSpec defines the desired state of MonitorActionRuleActionGroup
type MonitorActionRuleActionGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorActionRuleActionGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorActionRuleActionGroupInitParameters `json:"initProvider,omitempty"`
}

// MonitorActionRuleActionGroupStatus defines the observed state of MonitorActionRuleActionGroup.
type MonitorActionRuleActionGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorActionRuleActionGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActionRuleActionGroup is the Schema for the MonitorActionRuleActionGroups API. Manages an Monitor Action Rule which type is action group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorActionRuleActionGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorActionRuleActionGroupSpec   `json:"spec"`
	Status            MonitorActionRuleActionGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActionRuleActionGroupList contains a list of MonitorActionRuleActionGroups
type MonitorActionRuleActionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorActionRuleActionGroup `json:"items"`
}

// Repository type metadata.
var (
	MonitorActionRuleActionGroup_Kind             = "MonitorActionRuleActionGroup"
	MonitorActionRuleActionGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MonitorActionRuleActionGroup_Kind}.String()
	MonitorActionRuleActionGroup_KindAPIVersion   = MonitorActionRuleActionGroup_Kind + "." + CRDGroupVersion.String()
	MonitorActionRuleActionGroup_GroupVersionKind = CRDGroupVersion.WithKind(MonitorActionRuleActionGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&MonitorActionRuleActionGroup{}, &MonitorActionRuleActionGroupList{})
}
