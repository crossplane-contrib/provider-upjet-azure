/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this MonitorActionRuleActionGroup
func (mg *MonitorActionRuleActionGroup) GetTerraformResourceType() string {
	return "azurerm_monitor_action_rule_action_group"
}

// GetConnectionDetailsMapping for this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActionRuleActionGroup
func (tr *MonitorActionRuleActionGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorActionRuleActionGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActionRuleActionGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActionRuleActionGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActionRuleActionGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorActionRuleSuppression
func (mg *MonitorActionRuleSuppression) GetTerraformResourceType() string {
	return "azurerm_monitor_action_rule_suppression"
}

// GetConnectionDetailsMapping for this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActionRuleSuppression
func (tr *MonitorActionRuleSuppression) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorActionRuleSuppression using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActionRuleSuppression) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActionRuleSuppressionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActionRuleSuppression) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorAlertProcessingRuleActionGroup
func (mg *MonitorAlertProcessingRuleActionGroup) GetTerraformResourceType() string {
	return "azurerm_monitor_alert_processing_rule_action_group"
}

// GetConnectionDetailsMapping for this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorAlertProcessingRuleActionGroup
func (tr *MonitorAlertProcessingRuleActionGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorAlertProcessingRuleActionGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorAlertProcessingRuleActionGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorAlertProcessingRuleActionGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorAlertProcessingRuleActionGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorAlertProcessingRuleSuppression
func (mg *MonitorAlertProcessingRuleSuppression) GetTerraformResourceType() string {
	return "azurerm_monitor_alert_processing_rule_suppression"
}

// GetConnectionDetailsMapping for this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorAlertProcessingRuleSuppression
func (tr *MonitorAlertProcessingRuleSuppression) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorAlertProcessingRuleSuppression using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorAlertProcessingRuleSuppression) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorAlertProcessingRuleSuppressionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorAlertProcessingRuleSuppression) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorSmartDetectorAlertRule
func (mg *MonitorSmartDetectorAlertRule) GetTerraformResourceType() string {
	return "azurerm_monitor_smart_detector_alert_rule"
}

// GetConnectionDetailsMapping for this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorSmartDetectorAlertRule
func (tr *MonitorSmartDetectorAlertRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorSmartDetectorAlertRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorSmartDetectorAlertRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorSmartDetectorAlertRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorSmartDetectorAlertRule) GetTerraformSchemaVersion() int {
	return 1
}
