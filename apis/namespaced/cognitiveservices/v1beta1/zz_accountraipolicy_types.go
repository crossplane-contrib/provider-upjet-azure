// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AccountRaiPolicyInitParameters struct {

	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName *string `json:"basePolicyName,omitempty" tf:"base_policy_name,omitempty"`

	// A content_filter block as defined below.
	ContentFilter []ContentFilterInitParameters `json:"contentFilter,omitempty" tf:"content_filter,omitempty"`

	// The mode of the RAI Policy. Possible values are Default, Deferred, Blocking or Asynchronous_filter.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type AccountRaiPolicyObservation struct {

	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName *string `json:"basePolicyName,omitempty" tf:"base_policy_name,omitempty"`

	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountID *string `json:"cognitiveAccountId,omitempty" tf:"cognitive_account_id,omitempty"`

	// A content_filter block as defined below.
	ContentFilter []ContentFilterObservation `json:"contentFilter,omitempty" tf:"content_filter,omitempty"`

	// The ID of the Cognitive Service Account RAI Policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mode of the RAI Policy. Possible values are Default, Deferred, Blocking or Asynchronous_filter.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type AccountRaiPolicyParameters struct {

	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	BasePolicyName *string `json:"basePolicyName,omitempty" tf:"base_policy_name,omitempty"`

	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/cognitiveservices/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/namespaced/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CognitiveAccountID *string `json:"cognitiveAccountId,omitempty" tf:"cognitive_account_id,omitempty"`

	// Reference to a Account in cognitiveservices to populate cognitiveAccountId.
	// +kubebuilder:validation:Optional
	CognitiveAccountIDRef *v1.NamespacedReference `json:"cognitiveAccountIdRef,omitempty" tf:"-"`

	// Selector for a Account in cognitiveservices to populate cognitiveAccountId.
	// +kubebuilder:validation:Optional
	CognitiveAccountIDSelector *v1.NamespacedSelector `json:"cognitiveAccountIdSelector,omitempty" tf:"-"`

	// A content_filter block as defined below.
	// +kubebuilder:validation:Optional
	ContentFilter []ContentFilterParameters `json:"contentFilter,omitempty" tf:"content_filter,omitempty"`

	// The mode of the RAI Policy. Possible values are Default, Deferred, Blocking or Asynchronous_filter.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ContentFilterInitParameters struct {

	// Whether the filter should block content. Possible values are true or false.
	BlockEnabled *bool `json:"blockEnabled,omitempty" tf:"block_enabled,omitempty"`

	// Whether the filter is enabled. Possible values are true or false.
	FilterEnabled *bool `json:"filterEnabled,omitempty" tf:"filter_enabled,omitempty"`

	// The name of the content filter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The severity threshold for the filter. Possible values are Low, Medium or High.
	SeverityThreshold *string `json:"severityThreshold,omitempty" tf:"severity_threshold,omitempty"`

	// Content source to apply the content filter. Possible values are Prompt or Completion.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type ContentFilterObservation struct {

	// Whether the filter should block content. Possible values are true or false.
	BlockEnabled *bool `json:"blockEnabled,omitempty" tf:"block_enabled,omitempty"`

	// Whether the filter is enabled. Possible values are true or false.
	FilterEnabled *bool `json:"filterEnabled,omitempty" tf:"filter_enabled,omitempty"`

	// The name of the content filter.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The severity threshold for the filter. Possible values are Low, Medium or High.
	SeverityThreshold *string `json:"severityThreshold,omitempty" tf:"severity_threshold,omitempty"`

	// Content source to apply the content filter. Possible values are Prompt or Completion.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type ContentFilterParameters struct {

	// Whether the filter should block content. Possible values are true or false.
	// +kubebuilder:validation:Optional
	BlockEnabled *bool `json:"blockEnabled" tf:"block_enabled,omitempty"`

	// Whether the filter is enabled. Possible values are true or false.
	// +kubebuilder:validation:Optional
	FilterEnabled *bool `json:"filterEnabled" tf:"filter_enabled,omitempty"`

	// The name of the content filter.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The severity threshold for the filter. Possible values are Low, Medium or High.
	// +kubebuilder:validation:Optional
	SeverityThreshold *string `json:"severityThreshold" tf:"severity_threshold,omitempty"`

	// Content source to apply the content filter. Possible values are Prompt or Completion.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`
}

// AccountRaiPolicySpec defines the desired state of AccountRaiPolicy
type AccountRaiPolicySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            AccountRaiPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountRaiPolicyInitParameters `json:"initProvider,omitempty"`
}

// AccountRaiPolicyStatus defines the observed state of AccountRaiPolicy.
type AccountRaiPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountRaiPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccountRaiPolicy is the Schema for the AccountRaiPolicys API. Manages a Cognitive Services Account RAI Policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type AccountRaiPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.basePolicyName) || (has(self.initProvider) && has(self.initProvider.basePolicyName))",message="spec.forProvider.basePolicyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentFilter) || (has(self.initProvider) && has(self.initProvider.contentFilter))",message="spec.forProvider.contentFilter is a required parameter"
	Spec   AccountRaiPolicySpec   `json:"spec"`
	Status AccountRaiPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountRaiPolicyList contains a list of AccountRaiPolicys
type AccountRaiPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountRaiPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccountRaiPolicy_Kind             = "AccountRaiPolicy"
	AccountRaiPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountRaiPolicy_Kind}.String()
	AccountRaiPolicy_KindAPIVersion   = AccountRaiPolicy_Kind + "." + CRDGroupVersion.String()
	AccountRaiPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccountRaiPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountRaiPolicy{}, &AccountRaiPolicyList{})
}
