// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Endpoint) ResolveReferences( // ResolveReferences of this Endpoint.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "Profile", "ProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProfileName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProfileNameRef,
			Selector:     mg.Spec.ForProvider.ProfileNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProfileName")
	}
	mg.Spec.ForProvider.ProfileName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProfileNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.m.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorCustomDomain.
func (mg *FrontdoorCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.m.upbound.io", "v1beta1", "DNSZone", "DNSZoneList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DNSZoneID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DNSZoneIDRef,
			Selector:     mg.Spec.ForProvider.DNSZoneIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DNSZoneID")
	}
	mg.Spec.ForProvider.DNSZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DNSZoneIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.m.upbound.io", "v1beta1", "DNSZone", "DNSZoneList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DNSZoneID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DNSZoneIDRef,
			Selector:     mg.Spec.InitProvider.DNSZoneIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DNSZoneID")
	}
	mg.Spec.InitProvider.DNSZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DNSZoneIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorCustomDomainAssociation.
func (mg *FrontdoorCustomDomainAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorCustomDomainID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorCustomDomainIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorCustomDomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorCustomDomainID")
	}
	mg.Spec.ForProvider.CdnFrontdoorCustomDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorCustomDomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorRoute", "FrontdoorRouteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CdnFrontdoorRouteIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.CdnFrontdoorRouteIdsRefs,
			Selector:      mg.Spec.ForProvider.CdnFrontdoorRouteIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorRouteIds")
	}
	mg.Spec.ForProvider.CdnFrontdoorRouteIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CdnFrontdoorRouteIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CdnFrontdoorCustomDomainID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CdnFrontdoorCustomDomainIDRef,
			Selector:     mg.Spec.InitProvider.CdnFrontdoorCustomDomainIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorCustomDomainID")
	}
	mg.Spec.InitProvider.CdnFrontdoorCustomDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CdnFrontdoorCustomDomainIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorRoute", "FrontdoorRouteList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CdnFrontdoorRouteIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.CdnFrontdoorRouteIdsRefs,
			Selector:      mg.Spec.InitProvider.CdnFrontdoorRouteIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorRouteIds")
	}
	mg.Spec.InitProvider.CdnFrontdoorRouteIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.CdnFrontdoorRouteIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this FrontdoorEndpoint.
func (mg *FrontdoorEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorFirewallPolicy.
func (mg *FrontdoorFirewallPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.m.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SkuName),
			Extract:      resource.ExtractParamPath("sku_name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SkuNameRef,
			Selector:     mg.Spec.ForProvider.SkuNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SkuName")
	}
	mg.Spec.ForProvider.SkuName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SkuNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SkuName),
			Extract:      resource.ExtractParamPath("sku_name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SkuNameRef,
			Selector:     mg.Spec.InitProvider.SkuNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SkuName")
	}
	mg.Spec.InitProvider.SkuName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SkuNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorOrigin.
func (mg *FrontdoorOrigin) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOriginGroup", "FrontdoorOriginGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorOriginGroupID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorOriginGroupID")
	}
	mg.Spec.ForProvider.CdnFrontdoorOriginGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HostName),
			Extract:      resource.ExtractParamPath("primary_blob_host", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.HostNameRef,
			Selector:     mg.Spec.ForProvider.HostNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HostName")
	}
	mg.Spec.ForProvider.HostName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HostNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OriginHostHeader),
			Extract:      resource.ExtractParamPath("primary_blob_host", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.OriginHostHeaderRef,
			Selector:     mg.Spec.ForProvider.OriginHostHeaderSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OriginHostHeader")
	}
	mg.Spec.ForProvider.OriginHostHeader = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OriginHostHeaderRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PrivateLink != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateLink.Location),
				Extract:      resource.ExtractParamPath("location", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.PrivateLink.LocationRef,
				Selector:     mg.Spec.ForProvider.PrivateLink.LocationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PrivateLink.Location")
		}
		mg.Spec.ForProvider.PrivateLink.Location = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PrivateLink.LocationRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.PrivateLink != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetIDRef,
				Selector:     mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetID")
		}
		mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PrivateLink.PrivateLinkTargetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HostName),
			Extract:      resource.ExtractParamPath("primary_blob_host", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.HostNameRef,
			Selector:     mg.Spec.InitProvider.HostNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HostName")
	}
	mg.Spec.InitProvider.HostName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.HostNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OriginHostHeader),
			Extract:      resource.ExtractParamPath("primary_blob_host", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.OriginHostHeaderRef,
			Selector:     mg.Spec.InitProvider.OriginHostHeaderSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OriginHostHeader")
	}
	mg.Spec.InitProvider.OriginHostHeader = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OriginHostHeaderRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.PrivateLink != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateLink.Location),
				Extract:      resource.ExtractParamPath("location", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.PrivateLink.LocationRef,
				Selector:     mg.Spec.InitProvider.PrivateLink.LocationSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PrivateLink.Location")
		}
		mg.Spec.InitProvider.PrivateLink.Location = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PrivateLink.LocationRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.PrivateLink != nil {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.m.upbound.io", "v1beta1", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetIDRef,
				Selector:     mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetID")
		}
		mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PrivateLink.PrivateLinkTargetIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this FrontdoorOriginGroup.
func (mg *FrontdoorOriginGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorProfile.
func (mg *FrontdoorProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.m.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorRoute.
func (mg *FrontdoorRoute) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CdnFrontdoorCustomDomainIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.CdnFrontdoorCustomDomainIdsRefs,
			Selector:      mg.Spec.ForProvider.CdnFrontdoorCustomDomainIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorCustomDomainIds")
	}
	mg.Spec.ForProvider.CdnFrontdoorCustomDomainIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CdnFrontdoorCustomDomainIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorEndpoint", "FrontdoorEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorEndpointID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorEndpointIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorEndpointIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorEndpointID")
	}
	mg.Spec.ForProvider.CdnFrontdoorEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorEndpointIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOriginGroup", "FrontdoorOriginGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorOriginGroupID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorOriginGroupID")
	}
	mg.Spec.ForProvider.CdnFrontdoorOriginGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorOriginGroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOrigin", "FrontdoorOriginList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CdnFrontdoorOriginIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.CdnFrontdoorOriginIdsRefs,
			Selector:      mg.Spec.ForProvider.CdnFrontdoorOriginIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorOriginIds")
	}
	mg.Spec.ForProvider.CdnFrontdoorOriginIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CdnFrontdoorOriginIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorRuleSet", "FrontdoorRuleSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CdnFrontdoorRuleSetIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.CdnFrontdoorRuleSetIdsRefs,
			Selector:      mg.Spec.ForProvider.CdnFrontdoorRuleSetIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorRuleSetIds")
	}
	mg.Spec.ForProvider.CdnFrontdoorRuleSetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CdnFrontdoorRuleSetIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CdnFrontdoorCustomDomainIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.CdnFrontdoorCustomDomainIdsRefs,
			Selector:      mg.Spec.InitProvider.CdnFrontdoorCustomDomainIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorCustomDomainIds")
	}
	mg.Spec.InitProvider.CdnFrontdoorCustomDomainIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.CdnFrontdoorCustomDomainIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOriginGroup", "FrontdoorOriginGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CdnFrontdoorOriginGroupID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CdnFrontdoorOriginGroupIDRef,
			Selector:     mg.Spec.InitProvider.CdnFrontdoorOriginGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorOriginGroupID")
	}
	mg.Spec.InitProvider.CdnFrontdoorOriginGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CdnFrontdoorOriginGroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOrigin", "FrontdoorOriginList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CdnFrontdoorOriginIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.CdnFrontdoorOriginIdsRefs,
			Selector:      mg.Spec.InitProvider.CdnFrontdoorOriginIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorOriginIds")
	}
	mg.Spec.InitProvider.CdnFrontdoorOriginIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.CdnFrontdoorOriginIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorRuleSet", "FrontdoorRuleSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CdnFrontdoorRuleSetIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.CdnFrontdoorRuleSetIdsRefs,
			Selector:      mg.Spec.InitProvider.CdnFrontdoorRuleSetIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CdnFrontdoorRuleSetIds")
	}
	mg.Spec.InitProvider.CdnFrontdoorRuleSetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.CdnFrontdoorRuleSetIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this FrontdoorRule.
func (mg *FrontdoorRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Actions != nil {
		if mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOriginGroup", "FrontdoorOriginGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDRef,
					Selector:     mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID")
			}
			mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorRuleSet", "FrontdoorRuleSetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorRuleSetID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorRuleSetIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorRuleSetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorRuleSetID")
	}
	mg.Spec.ForProvider.CdnFrontdoorRuleSetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorRuleSetIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Actions != nil {
		if mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorOriginGroup", "FrontdoorOriginGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDRef,
					Selector:     mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID")
			}
			mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions.RouteConfigurationOverrideAction.CdnFrontdoorOriginGroupIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this FrontdoorRuleSet.
func (mg *FrontdoorRuleSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FrontdoorSecret.
func (mg *FrontdoorSecret) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Secret != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Secret.CustomerCertificate); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("keyvault.azure.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDRef,
					Selector:     mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID")
			}
			mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Secret != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Secret.CustomerCertificate); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("keyvault.azure.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDRef,
					Selector:     mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID")
			}
			mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Secret.CustomerCertificate[i4].KeyVaultCertificateIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this FrontdoorSecurityPolicy.
func (mg *FrontdoorSecurityPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorProfile", "FrontdoorProfileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CdnFrontdoorProfileID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CdnFrontdoorProfileIDRef,
			Selector:     mg.Spec.ForProvider.CdnFrontdoorProfileIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CdnFrontdoorProfileID")
	}
	mg.Spec.ForProvider.CdnFrontdoorProfileID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CdnFrontdoorProfileIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.SecurityPolicies != nil {
		if mg.Spec.ForProvider.SecurityPolicies.Firewall != nil {
			if mg.Spec.ForProvider.SecurityPolicies.Firewall.Association != nil {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID),
							Extract:      resource.ExtractResourceID(),
							Namespace:    mg.GetNamespace(),
							Reference:    mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDRef,
							Selector:     mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID")
					}
					mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.ForProvider.SecurityPolicies != nil {
		if mg.Spec.ForProvider.SecurityPolicies.Firewall != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorFirewallPolicy", "FrontdoorFirewallPolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDRef,
					Selector:     mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID")
			}
			mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.SecurityPolicies != nil {
		if mg.Spec.InitProvider.SecurityPolicies.Firewall != nil {
			if mg.Spec.InitProvider.SecurityPolicies.Firewall.Association != nil {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorCustomDomain", "FrontdoorCustomDomainList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID),
							Extract:      resource.ExtractResourceID(),
							Namespace:    mg.GetNamespace(),
							Reference:    mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDRef,
							Selector:     mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID")
					}
					mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainID = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.SecurityPolicies.Firewall.Association.Domain[i6].CdnFrontdoorDomainIDRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.SecurityPolicies != nil {
		if mg.Spec.InitProvider.SecurityPolicies.Firewall != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cdn.azure.m.upbound.io", "v1beta1", "FrontdoorFirewallPolicy", "FrontdoorFirewallPolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDRef,
					Selector:     mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID")
			}
			mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.SecurityPolicies.Firewall.CdnFrontdoorFirewallPolicyIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Profile.
func (mg *Profile) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.m.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
