// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ContainerEnvInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerEnvObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerEnvParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerJobIdentityInitParameters struct {

	// A list of Managed Identity IDs to assign to the Container App Job.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// References to UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsRefs []v1.NamespacedReference `json:"identityIdsRefs,omitempty" tf:"-"`

	// Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsSelector *v1.NamespacedSelector `json:"identityIdsSelector,omitempty" tf:"-"`

	// The type of identity used for the Container App Job. Possible values are SystemAssigned, UserAssigned and None. Defaults to None.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ContainerJobIdentityObservation struct {

	// A list of Managed Identity IDs to assign to the Container App Job.
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The Principal ID associated with this Managed Service Identity.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The Tenant ID associated with this Managed Service Identity.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The type of identity used for the Container App Job. Possible values are SystemAssigned, UserAssigned and None. Defaults to None.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ContainerJobIdentityParameters struct {

	// A list of Managed Identity IDs to assign to the Container App Job.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// References to UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsRefs []v1.NamespacedReference `json:"identityIdsRefs,omitempty" tf:"-"`

	// Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsSelector *v1.NamespacedSelector `json:"identityIdsSelector,omitempty" tf:"-"`

	// The type of identity used for the Container App Job. Possible values are SystemAssigned, UserAssigned and None. Defaults to None.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ContainerJobInitParameters struct {

	// The ID of the Container App Environment in which to create the Container App Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.NamespacedReference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.NamespacedSelector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// A event_trigger_config block as defined below.
	EventTriggerConfig *EventTriggerConfigInitParameters `json:"eventTriggerConfig,omitempty" tf:"event_trigger_config,omitempty"`

	// A identity block as defined below.
	Identity *ContainerJobIdentityInitParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A manual_trigger_config block as defined below.
	ManualTriggerConfig *ManualTriggerConfigInitParameters `json:"manualTriggerConfig,omitempty" tf:"manual_trigger_config,omitempty"`

	// One or more registry blocks as defined below.
	Registry []ContainerJobRegistryInitParameters `json:"registry,omitempty" tf:"registry,omitempty"`

	// The maximum number of times a replica is allowed to retry.
	ReplicaRetryLimit *float64 `json:"replicaRetryLimit,omitempty" tf:"replica_retry_limit,omitempty"`

	// The maximum number of seconds a replica is allowed to run.
	ReplicaTimeoutInSeconds *float64 `json:"replicaTimeoutInSeconds,omitempty" tf:"replica_timeout_in_seconds,omitempty"`

	// A schedule_trigger_config block as defined below.
	ScheduleTriggerConfig *ScheduleTriggerConfigInitParameters `json:"scheduleTriggerConfig,omitempty" tf:"schedule_trigger_config,omitempty"`

	// One or more secret blocks as defined below.
	Secret []ContainerJobSecretInitParameters `json:"secret,omitempty" tf:"secret,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A template block as defined below.
	Template *ContainerJobTemplateInitParameters `json:"template,omitempty" tf:"template,omitempty"`

	// The name of the workload profile to use for the Container App Job.
	WorkloadProfileName *string `json:"workloadProfileName,omitempty" tf:"workload_profile_name,omitempty"`
}

type ContainerJobObservation struct {

	// The ID of the Container App Environment in which to create the Container App Job. Changing this forces a new resource to be created.
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// The endpoint for the Container App Job event stream.
	EventStreamEndpoint *string `json:"eventStreamEndpoint,omitempty" tf:"event_stream_endpoint,omitempty"`

	// A event_trigger_config block as defined below.
	EventTriggerConfig *EventTriggerConfigObservation `json:"eventTriggerConfig,omitempty" tf:"event_trigger_config,omitempty"`

	// The ID of the Container App Job.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A identity block as defined below.
	Identity *ContainerJobIdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A manual_trigger_config block as defined below.
	ManualTriggerConfig *ManualTriggerConfigObservation `json:"manualTriggerConfig,omitempty" tf:"manual_trigger_config,omitempty"`

	// A list of the Public IP Addresses which the Container App uses for outbound network access.
	OutboundIPAddresses []*string `json:"outboundIpAddresses,omitempty" tf:"outbound_ip_addresses,omitempty"`

	// One or more registry blocks as defined below.
	Registry []ContainerJobRegistryObservation `json:"registry,omitempty" tf:"registry,omitempty"`

	// The maximum number of times a replica is allowed to retry.
	ReplicaRetryLimit *float64 `json:"replicaRetryLimit,omitempty" tf:"replica_retry_limit,omitempty"`

	// The maximum number of seconds a replica is allowed to run.
	ReplicaTimeoutInSeconds *float64 `json:"replicaTimeoutInSeconds,omitempty" tf:"replica_timeout_in_seconds,omitempty"`

	// The name of the resource group in which to create the Container App Job. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// A schedule_trigger_config block as defined below.
	ScheduleTriggerConfig *ScheduleTriggerConfigObservation `json:"scheduleTriggerConfig,omitempty" tf:"schedule_trigger_config,omitempty"`

	// One or more secret blocks as defined below.
	Secret []ContainerJobSecretObservation `json:"secret,omitempty" tf:"secret,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A template block as defined below.
	Template *ContainerJobTemplateObservation `json:"template,omitempty" tf:"template,omitempty"`

	// The name of the workload profile to use for the Container App Job.
	WorkloadProfileName *string `json:"workloadProfileName,omitempty" tf:"workload_profile_name,omitempty"`
}

type ContainerJobParameters struct {

	// The ID of the Container App Environment in which to create the Container App Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.NamespacedReference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.NamespacedSelector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// A event_trigger_config block as defined below.
	// +kubebuilder:validation:Optional
	EventTriggerConfig *EventTriggerConfigParameters `json:"eventTriggerConfig,omitempty" tf:"event_trigger_config,omitempty"`

	// A identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity *ContainerJobIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A manual_trigger_config block as defined below.
	// +kubebuilder:validation:Optional
	ManualTriggerConfig *ManualTriggerConfigParameters `json:"manualTriggerConfig,omitempty" tf:"manual_trigger_config,omitempty"`

	// One or more registry blocks as defined below.
	// +kubebuilder:validation:Optional
	Registry []ContainerJobRegistryParameters `json:"registry,omitempty" tf:"registry,omitempty"`

	// The maximum number of times a replica is allowed to retry.
	// +kubebuilder:validation:Optional
	ReplicaRetryLimit *float64 `json:"replicaRetryLimit,omitempty" tf:"replica_retry_limit,omitempty"`

	// The maximum number of seconds a replica is allowed to run.
	// +kubebuilder:validation:Optional
	ReplicaTimeoutInSeconds *float64 `json:"replicaTimeoutInSeconds,omitempty" tf:"replica_timeout_in_seconds,omitempty"`

	// The name of the resource group in which to create the Container App Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.NamespacedReference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.NamespacedSelector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A schedule_trigger_config block as defined below.
	// +kubebuilder:validation:Optional
	ScheduleTriggerConfig *ScheduleTriggerConfigParameters `json:"scheduleTriggerConfig,omitempty" tf:"schedule_trigger_config,omitempty"`

	// One or more secret blocks as defined below.
	// +kubebuilder:validation:Optional
	Secret []ContainerJobSecretParameters `json:"secret,omitempty" tf:"secret,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A template block as defined below.
	// +kubebuilder:validation:Optional
	Template *ContainerJobTemplateParameters `json:"template,omitempty" tf:"template,omitempty"`

	// The name of the workload profile to use for the Container App Job.
	// +kubebuilder:validation:Optional
	WorkloadProfileName *string `json:"workloadProfileName,omitempty" tf:"workload_profile_name,omitempty"`
}

type ContainerJobRegistryInitParameters struct {

	// A Managed Identity to use to authenticate with Azure Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The name of the Secret that contains the registry login password.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// The URL of the Azure Container Registry server.
	// The hostname for the Container Registry.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The username to use to authenticate with Azure Container Registry.
	// The username to use for this Container Registry.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ContainerJobRegistryObservation struct {

	// A Managed Identity to use to authenticate with Azure Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The name of the Secret that contains the registry login password.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// The URL of the Azure Container Registry server.
	// The hostname for the Container Registry.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The username to use to authenticate with Azure Container Registry.
	// The username to use for this Container Registry.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ContainerJobRegistryParameters struct {

	// A Managed Identity to use to authenticate with Azure Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	// +kubebuilder:validation:Optional
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The name of the Secret that contains the registry login password.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	// +kubebuilder:validation:Optional
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// The URL of the Azure Container Registry server.
	// The hostname for the Container Registry.
	// +kubebuilder:validation:Optional
	Server *string `json:"server" tf:"server,omitempty"`

	// The username to use to authenticate with Azure Container Registry.
	// The username to use for this Container Registry.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ContainerJobSecretInitParameters struct {

	// The identity to use for accessing the Key Vault secret reference. This can either be the Resource ID of a User Assigned Identity, or System for the System Assigned Identity.
	// The identity to use for accessing key vault reference.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The ID of a Key Vault secret. This can be a versioned or version-less ID.
	// The Key Vault Secret ID. Could be either one of `id` or `versionless_id`.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/keyvault/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id,omitempty"`

	// Reference to a Secret in keyvault to populate keyVaultSecretId.
	// +kubebuilder:validation:Optional
	KeyVaultSecretIDRef *v1.NamespacedReference `json:"keyVaultSecretIdRef,omitempty" tf:"-"`

	// Selector for a Secret in keyvault to populate keyVaultSecretId.
	// +kubebuilder:validation:Optional
	KeyVaultSecretIDSelector *v1.NamespacedSelector `json:"keyVaultSecretIdSelector,omitempty" tf:"-"`

	// The secret name.
	// The secret name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The value for this secret.
	ValueSecretRef *v1.LocalSecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type ContainerJobSecretObservation struct {

	// The identity to use for accessing the Key Vault secret reference. This can either be the Resource ID of a User Assigned Identity, or System for the System Assigned Identity.
	// The identity to use for accessing key vault reference.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The ID of a Key Vault secret. This can be a versioned or version-less ID.
	// The Key Vault Secret ID. Could be either one of `id` or `versionless_id`.
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id,omitempty"`

	// The secret name.
	// The secret name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainerJobSecretParameters struct {

	// The identity to use for accessing the Key Vault secret reference. This can either be the Resource ID of a User Assigned Identity, or System for the System Assigned Identity.
	// The identity to use for accessing key vault reference.
	// +kubebuilder:validation:Optional
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// The ID of a Key Vault secret. This can be a versioned or version-less ID.
	// The Key Vault Secret ID. Could be either one of `id` or `versionless_id`.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/keyvault/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty" tf:"key_vault_secret_id,omitempty"`

	// Reference to a Secret in keyvault to populate keyVaultSecretId.
	// +kubebuilder:validation:Optional
	KeyVaultSecretIDRef *v1.NamespacedReference `json:"keyVaultSecretIdRef,omitempty" tf:"-"`

	// Selector for a Secret in keyvault to populate keyVaultSecretId.
	// +kubebuilder:validation:Optional
	KeyVaultSecretIDSelector *v1.NamespacedSelector `json:"keyVaultSecretIdSelector,omitempty" tf:"-"`

	// The secret name.
	// The secret name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The value for this secret.
	// The value for this secret.
	// +kubebuilder:validation:Optional
	ValueSecretRef *v1.LocalSecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type ContainerJobTemplateInitParameters struct {

	// A container block as defined below.
	Container []TemplateContainerInitParameters `json:"container,omitempty" tf:"container,omitempty"`

	// A init_container block as defined below.
	InitContainer []TemplateInitContainerInitParameters `json:"initContainer,omitempty" tf:"init_container,omitempty"`

	// A volume block as defined below.
	Volume []TemplateVolumeInitParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type ContainerJobTemplateObservation struct {

	// A container block as defined below.
	Container []TemplateContainerObservation `json:"container,omitempty" tf:"container,omitempty"`

	// A init_container block as defined below.
	InitContainer []TemplateInitContainerObservation `json:"initContainer,omitempty" tf:"init_container,omitempty"`

	// A volume block as defined below.
	Volume []TemplateVolumeObservation `json:"volume,omitempty" tf:"volume,omitempty"`
}

type ContainerJobTemplateParameters struct {

	// A container block as defined below.
	// +kubebuilder:validation:Optional
	Container []TemplateContainerParameters `json:"container" tf:"container,omitempty"`

	// A init_container block as defined below.
	// +kubebuilder:validation:Optional
	InitContainer []TemplateInitContainerParameters `json:"initContainer,omitempty" tf:"init_container,omitempty"`

	// A volume block as defined below.
	// +kubebuilder:validation:Optional
	Volume []TemplateVolumeParameters `json:"volume,omitempty" tf:"volume,omitempty"`
}

type ContainerLivenessProbeInitParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []LivenessProbeHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `1` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerLivenessProbeObservation struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []LivenessProbeHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `1` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	TerminationGracePeriodSeconds *float64 `json:"terminationGracePeriodSeconds,omitempty" tf:"termination_grace_period_seconds,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerLivenessProbeParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	Header []LivenessProbeHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `1` seconds.
	// +kubebuilder:validation:Optional
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	Transport *string `json:"transport" tf:"transport,omitempty"`
}

type ContainerReadinessProbeHeaderInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerReadinessProbeHeaderObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerReadinessProbeHeaderParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ContainerReadinessProbeInitParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []ContainerReadinessProbeHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	SuccessCountThreshold *float64 `json:"successCountThreshold,omitempty" tf:"success_count_threshold,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerReadinessProbeObservation struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []ContainerReadinessProbeHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	SuccessCountThreshold *float64 `json:"successCountThreshold,omitempty" tf:"success_count_threshold,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerReadinessProbeParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	Header []ContainerReadinessProbeHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	// +kubebuilder:validation:Optional
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	SuccessCountThreshold *float64 `json:"successCountThreshold,omitempty" tf:"success_count_threshold,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	Transport *string `json:"transport" tf:"transport,omitempty"`
}

type ContainerStartupProbeHeaderInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerStartupProbeHeaderObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ContainerStartupProbeHeaderParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ContainerStartupProbeInitParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []ContainerStartupProbeHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerStartupProbeObservation struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	Header []ContainerStartupProbeHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	TerminationGracePeriodSeconds *float64 `json:"terminationGracePeriodSeconds,omitempty" tf:"termination_grace_period_seconds,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	Transport *string `json:"transport,omitempty" tf:"transport,omitempty"`
}

type ContainerStartupProbeParameters struct {

	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `30`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	FailureCountThreshold *float64 `json:"failureCountThreshold,omitempty" tf:"failure_count_threshold,omitempty"`

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	Header []ContainerStartupProbeHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The time in seconds to wait after the container has started before the probe is started.
	// The number of seconds elapsed after the container has started before the probe is initiated. Possible values are between `0` and `60`. Defaults to `0` seconds.
	// +kubebuilder:validation:Optional
	InitialDelay *float64 `json:"initialDelay,omitempty" tf:"initial_delay,omitempty"`

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	Transport *string `json:"transport" tf:"transport,omitempty"`
}

type ContainerVolumeMountsInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type ContainerVolumeMountsObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type ContainerVolumeMountsParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	// +kubebuilder:validation:Optional
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type EventTriggerConfigInitParameters struct {

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`

	// A scale block as defined below.
	Scale []ScaleInitParameters `json:"scale,omitempty" tf:"scale,omitempty"`
}

type EventTriggerConfigObservation struct {

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`

	// A scale block as defined below.
	Scale []ScaleObservation `json:"scale,omitempty" tf:"scale,omitempty"`
}

type EventTriggerConfigParameters struct {

	// Number of parallel replicas of a job that can run at a given time.
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	// +kubebuilder:validation:Optional
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`

	// A scale block as defined below.
	// +kubebuilder:validation:Optional
	Scale []ScaleParameters `json:"scale,omitempty" tf:"scale,omitempty"`
}

type LivenessProbeHeaderInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LivenessProbeHeaderObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LivenessProbeHeaderParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ManualTriggerConfigInitParameters struct {

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type ManualTriggerConfigObservation struct {

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type ManualTriggerConfigParameters struct {

	// Number of parallel replicas of a job that can run at a given time.
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	// +kubebuilder:validation:Optional
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type RulesAuthenticationInitParameters struct {

	// Name of the Container App secret from which to pull the environment variable value.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// Trigger Parameter that uses the secret.
	TriggerParameter *string `json:"triggerParameter,omitempty" tf:"trigger_parameter,omitempty"`
}

type RulesAuthenticationObservation struct {

	// Name of the Container App secret from which to pull the environment variable value.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// Trigger Parameter that uses the secret.
	TriggerParameter *string `json:"triggerParameter,omitempty" tf:"trigger_parameter,omitempty"`
}

type RulesAuthenticationParameters struct {

	// Name of the Container App secret from which to pull the environment variable value.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`

	// Trigger Parameter that uses the secret.
	// +kubebuilder:validation:Optional
	TriggerParameter *string `json:"triggerParameter" tf:"trigger_parameter,omitempty"`
}

type RulesInitParameters struct {

	// A authentication block as defined below.
	Authentication []RulesAuthenticationInitParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// Type of the scale rule.
	CustomRuleType *string `json:"customRuleType,omitempty" tf:"custom_rule_type,omitempty"`

	// Metadata properties to describe the scale rule.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RulesObservation struct {

	// A authentication block as defined below.
	Authentication []RulesAuthenticationObservation `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// Type of the scale rule.
	CustomRuleType *string `json:"customRuleType,omitempty" tf:"custom_rule_type,omitempty"`

	// Metadata properties to describe the scale rule.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RulesParameters struct {

	// A authentication block as defined below.
	// +kubebuilder:validation:Optional
	Authentication []RulesAuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// Type of the scale rule.
	// +kubebuilder:validation:Optional
	CustomRuleType *string `json:"customRuleType" tf:"custom_rule_type,omitempty"`

	// Metadata properties to describe the scale rule.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata" tf:"metadata,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ScaleInitParameters struct {

	// Maximum number of job executions that are created for a trigger.
	MaxExecutions *float64 `json:"maxExecutions,omitempty" tf:"max_executions,omitempty"`

	// Minimum number of job executions that are created for a trigger.
	MinExecutions *float64 `json:"minExecutions,omitempty" tf:"min_executions,omitempty"`

	// Interval to check each event source in seconds.
	PollingIntervalInSeconds *float64 `json:"pollingIntervalInSeconds,omitempty" tf:"polling_interval_in_seconds,omitempty"`

	// A rules block as defined below.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ScaleObservation struct {

	// Maximum number of job executions that are created for a trigger.
	MaxExecutions *float64 `json:"maxExecutions,omitempty" tf:"max_executions,omitempty"`

	// Minimum number of job executions that are created for a trigger.
	MinExecutions *float64 `json:"minExecutions,omitempty" tf:"min_executions,omitempty"`

	// Interval to check each event source in seconds.
	PollingIntervalInSeconds *float64 `json:"pollingIntervalInSeconds,omitempty" tf:"polling_interval_in_seconds,omitempty"`

	// A rules block as defined below.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ScaleParameters struct {

	// Maximum number of job executions that are created for a trigger.
	// +kubebuilder:validation:Optional
	MaxExecutions *float64 `json:"maxExecutions,omitempty" tf:"max_executions,omitempty"`

	// Minimum number of job executions that are created for a trigger.
	// +kubebuilder:validation:Optional
	MinExecutions *float64 `json:"minExecutions,omitempty" tf:"min_executions,omitempty"`

	// Interval to check each event source in seconds.
	// +kubebuilder:validation:Optional
	PollingIntervalInSeconds *float64 `json:"pollingIntervalInSeconds,omitempty" tf:"polling_interval_in_seconds,omitempty"`

	// A rules block as defined below.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ScheduleTriggerConfigInitParameters struct {

	// Cron formatted repeating schedule of a Cron Job.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type ScheduleTriggerConfigObservation struct {

	// Cron formatted repeating schedule of a Cron Job.
	CronExpression *string `json:"cronExpression,omitempty" tf:"cron_expression,omitempty"`

	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type ScheduleTriggerConfigParameters struct {

	// Cron formatted repeating schedule of a Cron Job.
	// +kubebuilder:validation:Optional
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`

	// Number of parallel replicas of a job that can run at a given time.
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Minimum number of successful replica completions before overall job completion.
	// +kubebuilder:validation:Optional
	ReplicaCompletionCount *float64 `json:"replicaCompletionCount,omitempty" tf:"replica_completion_count,omitempty"`
}

type TemplateContainerInitParameters struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	Env []ContainerEnvInitParameters `json:"env,omitempty" tf:"env,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// A liveness_probe block as detailed below.
	LivenessProbe []ContainerLivenessProbeInitParameters `json:"livenessProbe,omitempty" tf:"liveness_probe,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A readiness_probe block as detailed below.
	ReadinessProbe []ContainerReadinessProbeInitParameters `json:"readinessProbe,omitempty" tf:"readiness_probe,omitempty"`

	// A startup_probe block as detailed below.
	StartupProbe []ContainerStartupProbeInitParameters `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// A volume_mounts block as detailed below.
	VolumeMounts []ContainerVolumeMountsInitParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateContainerObservation struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	Env []ContainerEnvObservation `json:"env,omitempty" tf:"env,omitempty"`

	// The amount of ephemeral storage available to the Container App.
	// The amount of ephemeral storage available to the Container App.
	EphemeralStorage *string `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// A liveness_probe block as detailed below.
	LivenessProbe []ContainerLivenessProbeObservation `json:"livenessProbe,omitempty" tf:"liveness_probe,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A readiness_probe block as detailed below.
	ReadinessProbe []ContainerReadinessProbeObservation `json:"readinessProbe,omitempty" tf:"readiness_probe,omitempty"`

	// A startup_probe block as detailed below.
	StartupProbe []ContainerStartupProbeObservation `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// A volume_mounts block as detailed below.
	VolumeMounts []ContainerVolumeMountsObservation `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateContainerParameters struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	// +kubebuilder:validation:Optional
	Env []ContainerEnvParameters `json:"env,omitempty" tf:"env,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	// +kubebuilder:validation:Optional
	Image *string `json:"image" tf:"image,omitempty"`

	// A liveness_probe block as detailed below.
	// +kubebuilder:validation:Optional
	LivenessProbe []ContainerLivenessProbeParameters `json:"livenessProbe,omitempty" tf:"liveness_probe,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	// +kubebuilder:validation:Optional
	Memory *string `json:"memory" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A readiness_probe block as detailed below.
	// +kubebuilder:validation:Optional
	ReadinessProbe []ContainerReadinessProbeParameters `json:"readinessProbe,omitempty" tf:"readiness_probe,omitempty"`

	// A startup_probe block as detailed below.
	// +kubebuilder:validation:Optional
	StartupProbe []ContainerStartupProbeParameters `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// A volume_mounts block as detailed below.
	// +kubebuilder:validation:Optional
	VolumeMounts []ContainerVolumeMountsParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateInitContainerEnvInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TemplateInitContainerEnvObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TemplateInitContainerEnvParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the environment variable for the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of the Container App secret from which to pull the environment variable value.
	// The name of the secret that contains the value for this environment variable.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TemplateInitContainerInitParameters struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	Env []TemplateInitContainerEnvInitParameters `json:"env,omitempty" tf:"env,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A volume_mounts block as detailed below.
	VolumeMounts []TemplateInitContainerVolumeMountsInitParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateInitContainerObservation struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	Env []TemplateInitContainerEnvObservation `json:"env,omitempty" tf:"env,omitempty"`

	// The amount of ephemeral storage available to the Container App.
	// The amount of ephemeral storage available to the Container App.
	EphemeralStorage *string `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A volume_mounts block as detailed below.
	VolumeMounts []TemplateInitContainerVolumeMountsObservation `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateInitContainerParameters struct {

	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`. When there's a workload profile specified, there's no such constraint.
	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// One or more env blocks as detailed below.
	// +kubebuilder:validation:Optional
	Env []TemplateInitContainerEnvParameters `json:"env,omitempty" tf:"env,omitempty"`

	// The image to use to create the container.
	// The image to use to create the container.
	// +kubebuilder:validation:Optional
	Image *string `json:"image" tf:"image,omitempty"`

	// The amount of memory to allocate to the container. Possible values are 0.5Gi, 1Gi, 1.5Gi, 2Gi, 2.5Gi, 3Gi, 3.5Gi and 4Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`. When there's a workload profile specified, there's no such constraint.
	// +kubebuilder:validation:Optional
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A volume_mounts block as detailed below.
	// +kubebuilder:validation:Optional
	VolumeMounts []TemplateInitContainerVolumeMountsParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`
}

type TemplateInitContainerVolumeMountsInitParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type TemplateInitContainerVolumeMountsObservation struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type TemplateInitContainerVolumeMountsParameters struct {

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the Volume to be mounted in the container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The path within the container at which the volume should be mounted. Must not contain :.
	// The path in the container at which to mount this volume.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// The sub path of the volume to be mounted in the container.
	// The sub path of the volume to be mounted in the container.
	// +kubebuilder:validation:Optional
	SubPath *string `json:"subPath,omitempty" tf:"sub_path,omitempty"`
}

type TemplateVolumeInitParameters struct {

	// Mount options used while mounting the AzureFile. Must be a comma-separated string e.g. dir_mode=0751,file_mode=0751.
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	MountOptions *string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the volume.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the storage to use for the volume.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// The type of storage to use for the volume. Possible values are AzureFile, EmptyDir and Secret.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`
}

type TemplateVolumeObservation struct {

	// Mount options used while mounting the AzureFile. Must be a comma-separated string e.g. dir_mode=0751,file_mode=0751.
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	MountOptions *string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the volume.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of the storage to use for the volume.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// The type of storage to use for the volume. Possible values are AzureFile, EmptyDir and Secret.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`
}

type TemplateVolumeParameters struct {

	// Mount options used while mounting the AzureFile. Must be a comma-separated string e.g. dir_mode=0751,file_mode=0751.
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	// +kubebuilder:validation:Optional
	MountOptions *string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// The name of the volume to mount. This must match the name of a volume defined in the volume block.
	// The name of the volume.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of the storage to use for the volume.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	// +kubebuilder:validation:Optional
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// The type of storage to use for the volume. Possible values are AzureFile, EmptyDir and Secret.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`
}

// ContainerJobSpec defines the desired state of ContainerJob
type ContainerJobSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ContainerJobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerJobInitParameters `json:"initProvider,omitempty"`
}

// ContainerJobStatus defines the observed state of ContainerJob.
type ContainerJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContainerJob is the Schema for the ContainerJobs API. Manages a Container App Job.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type ContainerJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replicaTimeoutInSeconds) || (has(self.initProvider) && has(self.initProvider.replicaTimeoutInSeconds))",message="spec.forProvider.replicaTimeoutInSeconds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.template) || (has(self.initProvider) && has(self.initProvider.template))",message="spec.forProvider.template is a required parameter"
	Spec   ContainerJobSpec   `json:"spec"`
	Status ContainerJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerJobList contains a list of ContainerJobs
type ContainerJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerJob `json:"items"`
}

// Repository type metadata.
var (
	ContainerJob_Kind             = "ContainerJob"
	ContainerJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerJob_Kind}.String()
	ContainerJob_KindAPIVersion   = ContainerJob_Kind + "." + CRDGroupVersion.String()
	ContainerJob_GroupVersionKind = CRDGroupVersion.WithKind(ContainerJob_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerJob{}, &ContainerJobList{})
}
