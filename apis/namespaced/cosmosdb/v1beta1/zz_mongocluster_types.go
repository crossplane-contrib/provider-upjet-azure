// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ConnectionStringsInitParameters struct {
}

type ConnectionStringsObservation struct {

	// The description of the connection string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the Mongo Cluster connection string. The <user>:<password> placeholder returned from API will be replaced by the real administrator_username and administrator_password if available in the state.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConnectionStringsParameters struct {
}

type MongoClusterInitParameters struct {

	// The Password associated with the administrator_username for the MongoDB Cluster.
	AdministratorPasswordSecretRef *v1.LocalSecretKeySelector `json:"administratorPasswordSecretRef,omitempty" tf:"-"`

	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername *string `json:"administratorUsername,omitempty" tf:"administrator_username,omitempty"`

	// The compute tier to assign to the MongoDB Cluster. Possible values are Free, M10, M20, M25, M30, M40, M50, M60, M80, and M200.
	ComputeTier *string `json:"computeTier,omitempty" tf:"compute_tier,omitempty"`

	// The creation mode for the MongoDB Cluster. Possibles values are Default and GeoReplica. Defaults to Default. Changing this forces a new resource to be created.
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode,omitempty"`

	// The high availability mode for the MongoDB Cluster. Possibles values are Disabled and ZoneRedundantPreferred.
	HighAvailabilityMode *string `json:"highAvailabilityMode,omitempty" tf:"high_availability_mode,omitempty"`

	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures []*string `json:"previewFeatures,omitempty" tf:"preview_features,omitempty"`

	// The Public Network Access setting for the MongoDB Cluster. Possibles values are Disabled and Enabled. Defaults to Enabled.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/cosmosdb/v1beta1.MongoCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceLocation()
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// Reference to a MongoCluster in cosmosdb to populate sourceLocation.
	// +kubebuilder:validation:Optional
	SourceLocationRef *v1.NamespacedReference `json:"sourceLocationRef,omitempty" tf:"-"`

	// Selector for a MongoCluster in cosmosdb to populate sourceLocation.
	// +kubebuilder:validation:Optional
	SourceLocationSelector *v1.NamespacedSelector `json:"sourceLocationSelector,omitempty" tf:"-"`

	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/cosmosdb/v1beta1.MongoCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	SourceServerID *string `json:"sourceServerId,omitempty" tf:"source_server_id,omitempty"`

	// Reference to a MongoCluster in cosmosdb to populate sourceServerId.
	// +kubebuilder:validation:Optional
	SourceServerIDRef *v1.NamespacedReference `json:"sourceServerIdRef,omitempty" tf:"-"`

	// Selector for a MongoCluster in cosmosdb to populate sourceServerId.
	// +kubebuilder:validation:Optional
	SourceServerIDSelector *v1.NamespacedSelector `json:"sourceServerIdSelector,omitempty" tf:"-"`

	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb *float64 `json:"storageSizeInGb,omitempty" tf:"storage_size_in_gb,omitempty"`

	// A mapping of tags to assign to the MongoDB Cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The version for the MongoDB Cluster. Possibles values are 5.0, 6.0 and 7.0.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MongoClusterObservation struct {

	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername *string `json:"administratorUsername,omitempty" tf:"administrator_username,omitempty"`

	// The compute tier to assign to the MongoDB Cluster. Possible values are Free, M10, M20, M25, M30, M40, M50, M60, M80, and M200.
	ComputeTier *string `json:"computeTier,omitempty" tf:"compute_tier,omitempty"`

	// The creation mode for the MongoDB Cluster. Possibles values are Default and GeoReplica. Defaults to Default. Changing this forces a new resource to be created.
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode,omitempty"`

	// The high availability mode for the MongoDB Cluster. Possibles values are Disabled and ZoneRedundantPreferred.
	HighAvailabilityMode *string `json:"highAvailabilityMode,omitempty" tf:"high_availability_mode,omitempty"`

	// The ID of the MongoDB Cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures []*string `json:"previewFeatures,omitempty" tf:"preview_features,omitempty"`

	// The Public Network Access setting for the MongoDB Cluster. Possibles values are Disabled and Enabled. Defaults to Enabled.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerID *string `json:"sourceServerId,omitempty" tf:"source_server_id,omitempty"`

	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb *float64 `json:"storageSizeInGb,omitempty" tf:"storage_size_in_gb,omitempty"`

	// A mapping of tags to assign to the MongoDB Cluster.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The version for the MongoDB Cluster. Possibles values are 5.0, 6.0 and 7.0.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MongoClusterParameters struct {

	// The Password associated with the administrator_username for the MongoDB Cluster.
	// +kubebuilder:validation:Optional
	AdministratorPasswordSecretRef *v1.LocalSecretKeySelector `json:"administratorPasswordSecretRef,omitempty" tf:"-"`

	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	AdministratorUsername *string `json:"administratorUsername,omitempty" tf:"administrator_username,omitempty"`

	// The compute tier to assign to the MongoDB Cluster. Possible values are Free, M10, M20, M25, M30, M40, M50, M60, M80, and M200.
	// +kubebuilder:validation:Optional
	ComputeTier *string `json:"computeTier,omitempty" tf:"compute_tier,omitempty"`

	// The creation mode for the MongoDB Cluster. Possibles values are Default and GeoReplica. Defaults to Default. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	CreateMode *string `json:"createMode,omitempty" tf:"create_mode,omitempty"`

	// The high availability mode for the MongoDB Cluster. Possibles values are Disabled and ZoneRedundantPreferred.
	// +kubebuilder:validation:Optional
	HighAvailabilityMode *string `json:"highAvailabilityMode,omitempty" tf:"high_availability_mode,omitempty"`

	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	PreviewFeatures []*string `json:"previewFeatures,omitempty" tf:"preview_features,omitempty"`

	// The Public Network Access setting for the MongoDB Cluster. Possibles values are Disabled and Enabled. Defaults to Enabled.
	// +kubebuilder:validation:Optional
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.NamespacedReference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.NamespacedSelector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/cosmosdb/v1beta1.MongoCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceLocation()
	// +kubebuilder:validation:Optional
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// Reference to a MongoCluster in cosmosdb to populate sourceLocation.
	// +kubebuilder:validation:Optional
	SourceLocationRef *v1.NamespacedReference `json:"sourceLocationRef,omitempty" tf:"-"`

	// Selector for a MongoCluster in cosmosdb to populate sourceLocation.
	// +kubebuilder:validation:Optional
	SourceLocationSelector *v1.NamespacedSelector `json:"sourceLocationSelector,omitempty" tf:"-"`

	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/cosmosdb/v1beta1.MongoCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/cluster/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SourceServerID *string `json:"sourceServerId,omitempty" tf:"source_server_id,omitempty"`

	// Reference to a MongoCluster in cosmosdb to populate sourceServerId.
	// +kubebuilder:validation:Optional
	SourceServerIDRef *v1.NamespacedReference `json:"sourceServerIdRef,omitempty" tf:"-"`

	// Selector for a MongoCluster in cosmosdb to populate sourceServerId.
	// +kubebuilder:validation:Optional
	SourceServerIDSelector *v1.NamespacedSelector `json:"sourceServerIdSelector,omitempty" tf:"-"`

	// The size of the data disk space for the MongoDB Cluster.
	// +kubebuilder:validation:Optional
	StorageSizeInGb *float64 `json:"storageSizeInGb,omitempty" tf:"storage_size_in_gb,omitempty"`

	// A mapping of tags to assign to the MongoDB Cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The version for the MongoDB Cluster. Possibles values are 5.0, 6.0 and 7.0.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// MongoClusterSpec defines the desired state of MongoCluster
type MongoClusterSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            MongoClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MongoClusterInitParameters `json:"initProvider,omitempty"`
}

// MongoClusterStatus defines the observed state of MongoCluster.
type MongoClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MongoClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MongoCluster is the Schema for the MongoClusters API. Manages a MongoDB Cluster using vCore Architecture.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type MongoCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   MongoClusterSpec   `json:"spec"`
	Status MongoClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MongoClusterList contains a list of MongoClusters
type MongoClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongoCluster `json:"items"`
}

// Repository type metadata.
var (
	MongoCluster_Kind             = "MongoCluster"
	MongoCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MongoCluster_Kind}.String()
	MongoCluster_KindAPIVersion   = MongoCluster_Kind + "." + CRDGroupVersion.String()
	MongoCluster_GroupVersionKind = CRDGroupVersion.WithKind(MongoCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&MongoCluster{}, &MongoClusterList{})
}
