// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type DynamicRoutingEnrichmentInitParameters struct {

	// The enrichment key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The enrichment value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DynamicRoutingEnrichmentObservation struct {

	// The enrichment key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The enrichment value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DynamicRoutingEnrichmentParameters struct {

	// The enrichment key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The enrichment value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type EventGridNamespaceIdentityInitParameters struct {

	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Namespace.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/namespaced/rconfig.ExtractResourceID()
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// References to UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsRefs []v1.NamespacedReference `json:"identityIdsRefs,omitempty" tf:"-"`

	// Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsSelector *v1.NamespacedSelector `json:"identityIdsSelector,omitempty" tf:"-"`

	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Namespace. Possible values are SystemAssigned, UserAssigned.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventGridNamespaceIdentityObservation struct {

	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Namespace.
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The EventGrid Namespace ID.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The EventGrid Namespace ID.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Namespace. Possible values are SystemAssigned, UserAssigned.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventGridNamespaceIdentityParameters struct {

	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Namespace.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/namespaced/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// References to UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsRefs []v1.NamespacedReference `json:"identityIdsRefs,omitempty" tf:"-"`

	// Selector for a list of UserAssignedIdentity in managedidentity to populate identityIds.
	// +kubebuilder:validation:Optional
	IdentityIdsSelector *v1.NamespacedSelector `json:"identityIdsSelector,omitempty" tf:"-"`

	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Namespace. Possible values are SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type EventGridNamespaceInboundIPRuleInitParameters struct {

	// The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The IP mask (CIDR) to match on.
	IPMask *string `json:"ipMask,omitempty" tf:"ip_mask,omitempty"`
}

type EventGridNamespaceInboundIPRuleObservation struct {

	// The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The IP mask (CIDR) to match on.
	IPMask *string `json:"ipMask,omitempty" tf:"ip_mask,omitempty"`
}

type EventGridNamespaceInboundIPRuleParameters struct {

	// The action to take when the rule is matched. Possible values are Allow. Defaults to Allow.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The IP mask (CIDR) to match on.
	// +kubebuilder:validation:Optional
	IPMask *string `json:"ipMask" tf:"ip_mask,omitempty"`
}

type EventGridNamespaceInitParameters struct {

	// Specifies the Capacity / Throughput Units for an Eventgrid Namespace. Valid values can be between 1 and 40.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// An identity block as defined below.
	Identity *EventGridNamespaceIdentityInitParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// One or more inbound_ip_rule blocks as defined below.
	InboundIPRule []EventGridNamespaceInboundIPRuleInitParameters `json:"inboundIpRule,omitempty" tf:"inbound_ip_rule,omitempty"`

	// Specifies the supported Azure location where the resource should exist. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Whether or not public network access is allowed for this server. Defaults to Enabled.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// Defines which tier to use. The only possible value is Standard. Defaults to Standard.
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A topic_spaces_configuration block as defined below.
	TopicSpacesConfiguration []TopicSpacesConfigurationInitParameters `json:"topicSpacesConfiguration,omitempty" tf:"topic_spaces_configuration,omitempty"`
}

type EventGridNamespaceObservation struct {

	// Specifies the Capacity / Throughput Units for an Eventgrid Namespace. Valid values can be between 1 and 40.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The EventGrid Namespace ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	Identity *EventGridNamespaceIdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`

	// One or more inbound_ip_rule blocks as defined below.
	InboundIPRule []EventGridNamespaceInboundIPRuleObservation `json:"inboundIpRule,omitempty" tf:"inbound_ip_rule,omitempty"`

	// Specifies the supported Azure location where the resource should exist. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Whether or not public network access is allowed for this server. Defaults to Enabled.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// The name of the resource group in which the Event Grid Namespace should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Defines which tier to use. The only possible value is Standard. Defaults to Standard.
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A topic_spaces_configuration block as defined below.
	TopicSpacesConfiguration []TopicSpacesConfigurationObservation `json:"topicSpacesConfiguration,omitempty" tf:"topic_spaces_configuration,omitempty"`
}

type EventGridNamespaceParameters struct {

	// Specifies the Capacity / Throughput Units for an Eventgrid Namespace. Valid values can be between 1 and 40.
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity *EventGridNamespaceIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// One or more inbound_ip_rule blocks as defined below.
	// +kubebuilder:validation:Optional
	InboundIPRule []EventGridNamespaceInboundIPRuleParameters `json:"inboundIpRule,omitempty" tf:"inbound_ip_rule,omitempty"`

	// Specifies the supported Azure location where the resource should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Whether or not public network access is allowed for this server. Defaults to Enabled.
	// +kubebuilder:validation:Optional
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty" tf:"public_network_access,omitempty"`

	// The name of the resource group in which the Event Grid Namespace should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.NamespacedReference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.NamespacedSelector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// Defines which tier to use. The only possible value is Standard. Defaults to Standard.
	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A topic_spaces_configuration block as defined below.
	// +kubebuilder:validation:Optional
	TopicSpacesConfiguration []TopicSpacesConfigurationParameters `json:"topicSpacesConfiguration,omitempty" tf:"topic_spaces_configuration,omitempty"`
}

type StaticRoutingEnrichmentInitParameters struct {

	// The enrichment key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The enrichment value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StaticRoutingEnrichmentObservation struct {

	// The enrichment key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The enrichment value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StaticRoutingEnrichmentParameters struct {

	// The enrichment key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The enrichment value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TopicSpacesConfigurationInitParameters struct {

	// Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are ClientCertificateDns, ClientCertificateEmail, ClientCertificateIp, ClientCertificateSubject and ClientCertificateUri.
	AlternativeAuthenticationNameSource []*string `json:"alternativeAuthenticationNameSource,omitempty" tf:"alternative_authentication_name_source,omitempty"`

	// One or more dynamic_routing_enrichment blocks as defined below.
	DynamicRoutingEnrichment []DynamicRoutingEnrichmentInitParameters `json:"dynamicRoutingEnrichment,omitempty" tf:"dynamic_routing_enrichment,omitempty"`

	// Specifies the maximum number of client sessions per authentication name. Valid values can be between 1 and 100.
	MaximumClientSessionsPerAuthenticationName *float64 `json:"maximumClientSessionsPerAuthenticationName,omitempty" tf:"maximum_client_sessions_per_authentication_name,omitempty"`

	// Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between 1 and 8.
	MaximumSessionExpiryInHours *float64 `json:"maximumSessionExpiryInHours,omitempty" tf:"maximum_session_expiry_in_hours,omitempty"`

	// Specifies the Event Grid topic resource ID to route messages to.
	RouteTopicID *string `json:"routeTopicId,omitempty" tf:"route_topic_id,omitempty"`

	// One or more static_routing_enrichment blocks as defined below.
	StaticRoutingEnrichment []StaticRoutingEnrichmentInitParameters `json:"staticRoutingEnrichment,omitempty" tf:"static_routing_enrichment,omitempty"`
}

type TopicSpacesConfigurationObservation struct {

	// Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are ClientCertificateDns, ClientCertificateEmail, ClientCertificateIp, ClientCertificateSubject and ClientCertificateUri.
	AlternativeAuthenticationNameSource []*string `json:"alternativeAuthenticationNameSource,omitempty" tf:"alternative_authentication_name_source,omitempty"`

	// One or more dynamic_routing_enrichment blocks as defined below.
	DynamicRoutingEnrichment []DynamicRoutingEnrichmentObservation `json:"dynamicRoutingEnrichment,omitempty" tf:"dynamic_routing_enrichment,omitempty"`

	// Specifies the maximum number of client sessions per authentication name. Valid values can be between 1 and 100.
	MaximumClientSessionsPerAuthenticationName *float64 `json:"maximumClientSessionsPerAuthenticationName,omitempty" tf:"maximum_client_sessions_per_authentication_name,omitempty"`

	// Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between 1 and 8.
	MaximumSessionExpiryInHours *float64 `json:"maximumSessionExpiryInHours,omitempty" tf:"maximum_session_expiry_in_hours,omitempty"`

	// Specifies the Event Grid topic resource ID to route messages to.
	RouteTopicID *string `json:"routeTopicId,omitempty" tf:"route_topic_id,omitempty"`

	// One or more static_routing_enrichment blocks as defined below.
	StaticRoutingEnrichment []StaticRoutingEnrichmentObservation `json:"staticRoutingEnrichment,omitempty" tf:"static_routing_enrichment,omitempty"`
}

type TopicSpacesConfigurationParameters struct {

	// Specifies a list of alternative sources for the client authentication name from the client certificate. Possible values are ClientCertificateDns, ClientCertificateEmail, ClientCertificateIp, ClientCertificateSubject and ClientCertificateUri.
	// +kubebuilder:validation:Optional
	AlternativeAuthenticationNameSource []*string `json:"alternativeAuthenticationNameSource,omitempty" tf:"alternative_authentication_name_source,omitempty"`

	// One or more dynamic_routing_enrichment blocks as defined below.
	// +kubebuilder:validation:Optional
	DynamicRoutingEnrichment []DynamicRoutingEnrichmentParameters `json:"dynamicRoutingEnrichment,omitempty" tf:"dynamic_routing_enrichment,omitempty"`

	// Specifies the maximum number of client sessions per authentication name. Valid values can be between 1 and 100.
	// +kubebuilder:validation:Optional
	MaximumClientSessionsPerAuthenticationName *float64 `json:"maximumClientSessionsPerAuthenticationName,omitempty" tf:"maximum_client_sessions_per_authentication_name,omitempty"`

	// Specifies the maximum session expiry interval allowed for all MQTT clients connecting to the Event Grid namespace. Valid values can be between 1 and 8.
	// +kubebuilder:validation:Optional
	MaximumSessionExpiryInHours *float64 `json:"maximumSessionExpiryInHours,omitempty" tf:"maximum_session_expiry_in_hours,omitempty"`

	// Specifies the Event Grid topic resource ID to route messages to.
	// +kubebuilder:validation:Optional
	RouteTopicID *string `json:"routeTopicId,omitempty" tf:"route_topic_id,omitempty"`

	// One or more static_routing_enrichment blocks as defined below.
	// +kubebuilder:validation:Optional
	StaticRoutingEnrichment []StaticRoutingEnrichmentParameters `json:"staticRoutingEnrichment,omitempty" tf:"static_routing_enrichment,omitempty"`
}

// EventGridNamespaceSpec defines the desired state of EventGridNamespace
type EventGridNamespaceSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            EventGridNamespaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EventGridNamespaceInitParameters `json:"initProvider,omitempty"`
}

// EventGridNamespaceStatus defines the observed state of EventGridNamespace.
type EventGridNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventGridNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EventGridNamespace is the Schema for the EventGridNamespaces API. Manages an EventGrid Namespace
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type EventGridNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   EventGridNamespaceSpec   `json:"spec"`
	Status EventGridNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventGridNamespaceList contains a list of EventGridNamespaces
type EventGridNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventGridNamespace `json:"items"`
}

// Repository type metadata.
var (
	EventGridNamespace_Kind             = "EventGridNamespace"
	EventGridNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventGridNamespace_Kind}.String()
	EventGridNamespace_KindAPIVersion   = EventGridNamespace_Kind + "." + CRDGroupVersion.String()
	EventGridNamespace_GroupVersionKind = CRDGroupVersion.WithKind(EventGridNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&EventGridNamespace{}, &EventGridNamespaceList{})
}
