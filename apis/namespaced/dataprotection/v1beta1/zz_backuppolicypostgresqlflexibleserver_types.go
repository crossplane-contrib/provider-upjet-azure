// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleInitParameters struct {

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleInitParameters `json:"lifeCycle,omitempty" tf:"life_cycle,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleInitParameters struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	DataStoreType *string `json:"dataStoreType,omitempty" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleObservation struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	DataStoreType *string `json:"dataStoreType,omitempty" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleParameters struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	DataStoreType *string `json:"dataStoreType" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleObservation struct {

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleObservation `json:"lifeCycle,omitempty" tf:"life_cycle,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleParameters struct {

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleLifeCycleParameters `json:"lifeCycle" tf:"life_cycle,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerInitParameters struct {

	// Specifies a list of repeating time interval. It supports weekly back. It should follow ISO 8601 repeating time interval format. Changing this forces a new resource to be created.
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals,omitempty" tf:"backup_repeating_time_intervals,omitempty"`

	// A default_retention_rule block as defined below. Changing this forces a new resource to be created.
	DefaultRetentionRule *BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleInitParameters `json:"defaultRetentionRule,omitempty" tf:"default_retention_rule,omitempty"`

	// One or more retention_rule blocks as defined below. Changing this forces a new resource to be created.
	RetentionRule []BackupPolicyPostgreSQLFlexibleServerRetentionRuleInitParameters `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerObservation struct {

	// Specifies a list of repeating time interval. It supports weekly back. It should follow ISO 8601 repeating time interval format. Changing this forces a new resource to be created.
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals,omitempty" tf:"backup_repeating_time_intervals,omitempty"`

	// A default_retention_rule block as defined below. Changing this forces a new resource to be created.
	DefaultRetentionRule *BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleObservation `json:"defaultRetentionRule,omitempty" tf:"default_retention_rule,omitempty"`

	// The ID of the Backup Policy PostgreSQL Flexible Server.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One or more retention_rule blocks as defined below. Changing this forces a new resource to be created.
	RetentionRule []BackupPolicyPostgreSQLFlexibleServerRetentionRuleObservation `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The ID of the Backup Vault where the Backup Policy PostgreSQL Flexible Server should exist. Changing this forces a new resource to be created.
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerParameters struct {

	// Specifies a list of repeating time interval. It supports weekly back. It should follow ISO 8601 repeating time interval format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals,omitempty" tf:"backup_repeating_time_intervals,omitempty"`

	// A default_retention_rule block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	DefaultRetentionRule *BackupPolicyPostgreSQLFlexibleServerDefaultRetentionRuleParameters `json:"defaultRetentionRule,omitempty" tf:"default_retention_rule,omitempty"`

	// One or more retention_rule blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	RetentionRule []BackupPolicyPostgreSQLFlexibleServerRetentionRuleParameters `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The ID of the Backup Vault where the Backup Policy PostgreSQL Flexible Server should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/dataprotection/v1beta1.BackupVault
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/namespaced/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`

	// Reference to a BackupVault in dataprotection to populate vaultId.
	// +kubebuilder:validation:Optional
	VaultIDRef *v1.NamespacedReference `json:"vaultIdRef,omitempty" tf:"-"`

	// Selector for a BackupVault in dataprotection to populate vaultId.
	// +kubebuilder:validation:Optional
	VaultIDSelector *v1.NamespacedSelector `json:"vaultIdSelector,omitempty" tf:"-"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaInitParameters struct {

	// Possible values are AllBackup, FirstOfDay, FirstOfWeek, FirstOfMonth and FirstOfYear. These values mean the first successful backup of the day/week/month/year. Changing this forces a new resource to be created.
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`

	// Possible values are Monday, Tuesday, Thursday, Friday, Saturday and Sunday. Changing this forces a new resource to be created.
	// +listType=set
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// Possible values are January, February, March, April, May, June, July, August, September, October, November and December. Changing this forces a new resource to be created.
	// +listType=set
	MonthsOfYear []*string `json:"monthsOfYear,omitempty" tf:"months_of_year,omitempty"`

	// Specifies a list of backup times for backup in the RFC3339 format. Changing this forces a new resource to be created.
	// +listType=set
	ScheduledBackupTimes []*string `json:"scheduledBackupTimes,omitempty" tf:"scheduled_backup_times,omitempty"`

	// Possible values are First, Second, Third, Fourth and Last. Changing this forces a new resource to be created.
	// +listType=set
	WeeksOfMonth []*string `json:"weeksOfMonth,omitempty" tf:"weeks_of_month,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaObservation struct {

	// Possible values are AllBackup, FirstOfDay, FirstOfWeek, FirstOfMonth and FirstOfYear. These values mean the first successful backup of the day/week/month/year. Changing this forces a new resource to be created.
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`

	// Possible values are Monday, Tuesday, Thursday, Friday, Saturday and Sunday. Changing this forces a new resource to be created.
	// +listType=set
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// Possible values are January, February, March, April, May, June, July, August, September, October, November and December. Changing this forces a new resource to be created.
	// +listType=set
	MonthsOfYear []*string `json:"monthsOfYear,omitempty" tf:"months_of_year,omitempty"`

	// Specifies a list of backup times for backup in the RFC3339 format. Changing this forces a new resource to be created.
	// +listType=set
	ScheduledBackupTimes []*string `json:"scheduledBackupTimes,omitempty" tf:"scheduled_backup_times,omitempty"`

	// Possible values are First, Second, Third, Fourth and Last. Changing this forces a new resource to be created.
	// +listType=set
	WeeksOfMonth []*string `json:"weeksOfMonth,omitempty" tf:"weeks_of_month,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaParameters struct {

	// Possible values are AllBackup, FirstOfDay, FirstOfWeek, FirstOfMonth and FirstOfYear. These values mean the first successful backup of the day/week/month/year. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`

	// Possible values are Monday, Tuesday, Thursday, Friday, Saturday and Sunday. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	// +listType=set
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// Possible values are January, February, March, April, May, June, July, August, September, October, November and December. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	// +listType=set
	MonthsOfYear []*string `json:"monthsOfYear,omitempty" tf:"months_of_year,omitempty"`

	// Specifies a list of backup times for backup in the RFC3339 format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	// +listType=set
	ScheduledBackupTimes []*string `json:"scheduledBackupTimes,omitempty" tf:"scheduled_backup_times,omitempty"`

	// Possible values are First, Second, Third, Fourth and Last. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	// +listType=set
	WeeksOfMonth []*string `json:"weeksOfMonth,omitempty" tf:"weeks_of_month,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleInitParameters struct {

	// A criteria block as defined below. Changing this forces a new resource to be created.
	Criteria *BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaInitParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleInitParameters `json:"lifeCycle,omitempty" tf:"life_cycle,omitempty"`

	// Specifies the name of the retention rule. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the priority of the rule. The priority number must be unique for each rule. The lower the priority number, the higher the priority of the rule. Changing this forces a new resource to be created.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleInitParameters struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	DataStoreType *string `json:"dataStoreType,omitempty" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleObservation struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	DataStoreType *string `json:"dataStoreType,omitempty" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleParameters struct {

	// The type of data store. The only possible value is VaultStore. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	DataStoreType *string `json:"dataStoreType" tf:"data_store_type,omitempty"`

	// The retention duration up to which the backups are to be retained in the data stores. It should follow ISO 8601 duration format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration" tf:"duration,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleObservation struct {

	// A criteria block as defined below. Changing this forces a new resource to be created.
	Criteria *BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaObservation `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleObservation `json:"lifeCycle,omitempty" tf:"life_cycle,omitempty"`

	// Specifies the name of the retention rule. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the priority of the rule. The priority number must be unique for each rule. The lower the priority number, the higher the priority of the rule. Changing this forces a new resource to be created.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`
}

type BackupPolicyPostgreSQLFlexibleServerRetentionRuleParameters struct {

	// A criteria block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Criteria *BackupPolicyPostgreSQLFlexibleServerRetentionRuleCriteriaParameters `json:"criteria" tf:"criteria,omitempty"`

	// A life_cycle block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	LifeCycle []BackupPolicyPostgreSQLFlexibleServerRetentionRuleLifeCycleParameters `json:"lifeCycle" tf:"life_cycle,omitempty"`

	// Specifies the name of the retention rule. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the priority of the rule. The priority number must be unique for each rule. The lower the priority number, the higher the priority of the rule. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

// BackupPolicyPostgreSQLFlexibleServerSpec defines the desired state of BackupPolicyPostgreSQLFlexibleServer
type BackupPolicyPostgreSQLFlexibleServerSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            BackupPolicyPostgreSQLFlexibleServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupPolicyPostgreSQLFlexibleServerInitParameters `json:"initProvider,omitempty"`
}

// BackupPolicyPostgreSQLFlexibleServerStatus defines the observed state of BackupPolicyPostgreSQLFlexibleServer.
type BackupPolicyPostgreSQLFlexibleServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyPostgreSQLFlexibleServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BackupPolicyPostgreSQLFlexibleServer is the Schema for the BackupPolicyPostgreSQLFlexibleServers API. Manages a Backup Policy to back up PostgreSQL Flexible Server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type BackupPolicyPostgreSQLFlexibleServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backupRepeatingTimeIntervals) || (has(self.initProvider) && has(self.initProvider.backupRepeatingTimeIntervals))",message="spec.forProvider.backupRepeatingTimeIntervals is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultRetentionRule) || (has(self.initProvider) && has(self.initProvider.defaultRetentionRule))",message="spec.forProvider.defaultRetentionRule is a required parameter"
	Spec   BackupPolicyPostgreSQLFlexibleServerSpec   `json:"spec"`
	Status BackupPolicyPostgreSQLFlexibleServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyPostgreSQLFlexibleServerList contains a list of BackupPolicyPostgreSQLFlexibleServers
type BackupPolicyPostgreSQLFlexibleServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyPostgreSQLFlexibleServer `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyPostgreSQLFlexibleServer_Kind             = "BackupPolicyPostgreSQLFlexibleServer"
	BackupPolicyPostgreSQLFlexibleServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyPostgreSQLFlexibleServer_Kind}.String()
	BackupPolicyPostgreSQLFlexibleServer_KindAPIVersion   = BackupPolicyPostgreSQLFlexibleServer_Kind + "." + CRDGroupVersion.String()
	BackupPolicyPostgreSQLFlexibleServer_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyPostgreSQLFlexibleServer_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyPostgreSQLFlexibleServer{}, &BackupPolicyPostgreSQLFlexibleServerList{})
}
