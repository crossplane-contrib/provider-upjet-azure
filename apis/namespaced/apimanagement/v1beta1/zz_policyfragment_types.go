// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type PolicyFragmentInitParameters struct {

	// The description for the Policy Fragment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The format of the Policy Fragment. Possible values are xml or rawxml. Default is xml.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the Policy Fragment.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PolicyFragmentObservation struct {

	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	APIManagementID *string `json:"apiManagementId,omitempty" tf:"api_management_id,omitempty"`

	// The description for the Policy Fragment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The format of the Policy Fragment. Possible values are xml or rawxml. Default is xml.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The ID of the Api Management Policy Fragment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the Policy Fragment.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PolicyFragmentParameters struct {

	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/apimanagement/v1beta1.Management
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	APIManagementID *string `json:"apiManagementId,omitempty" tf:"api_management_id,omitempty"`

	// Reference to a Management in apimanagement to populate apiManagementId.
	// +kubebuilder:validation:Optional
	APIManagementIDRef *v1.NamespacedReference `json:"apiManagementIdRef,omitempty" tf:"-"`

	// Selector for a Management in apimanagement to populate apiManagementId.
	// +kubebuilder:validation:Optional
	APIManagementIDSelector *v1.NamespacedSelector `json:"apiManagementIdSelector,omitempty" tf:"-"`

	// The description for the Policy Fragment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The format of the Policy Fragment. Possible values are xml or rawxml. Default is xml.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the Policy Fragment.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// PolicyFragmentSpec defines the desired state of PolicyFragment
type PolicyFragmentSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            PolicyFragmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyFragmentInitParameters `json:"initProvider,omitempty"`
}

// PolicyFragmentStatus defines the observed state of PolicyFragment.
type PolicyFragmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyFragmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyFragment is the Schema for the PolicyFragments API. Manages an Api Management Policy Fragment.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type PolicyFragment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   PolicyFragmentSpec   `json:"spec"`
	Status PolicyFragmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyFragmentList contains a list of PolicyFragments
type PolicyFragmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyFragment `json:"items"`
}

// Repository type metadata.
var (
	PolicyFragment_Kind             = "PolicyFragment"
	PolicyFragment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyFragment_Kind}.String()
	PolicyFragment_KindAPIVersion   = PolicyFragment_Kind + "." + CRDGroupVersion.String()
	PolicyFragment_GroupVersionKind = CRDGroupVersion.WithKind(PolicyFragment_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyFragment{}, &PolicyFragmentList{})
}
