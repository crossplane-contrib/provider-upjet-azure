/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SystemTopicIdentityObservation struct {

	// The Principal ID associated with this Managed Service Identity.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The Tenant ID associated with this Managed Service Identity.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type SystemTopicIdentityParameters struct {

	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid System Topic.
	// +kubebuilder:validation:Optional
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// Specifies the type of Managed Service Identity that should be configured on this Event Grid System Topic. Possible values are SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SystemTopicObservation struct {

	// The ID of the Event Grid System Topic.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity []SystemTopicIdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`

	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceID *string `json:"metricArmResourceId,omitempty" tf:"metric_arm_resource_id,omitempty"`
}

type SystemTopicParameters struct {

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity []SystemTopicIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SourceArmResourceID *string `json:"sourceArmResourceId,omitempty" tf:"source_arm_resource_id,omitempty"`

	// Reference to a Account in storage to populate sourceArmResourceId.
	// +kubebuilder:validation:Optional
	SourceArmResourceIDRef *v1.Reference `json:"sourceArmResourceIdRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate sourceArmResourceId.
	// +kubebuilder:validation:Optional
	SourceArmResourceIDSelector *v1.Selector `json:"sourceArmResourceIdSelector,omitempty" tf:"-"`

	// A mapping of tags which should be assigned to the Event Grid System Topic.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: Microsoft.AppConfiguration.ConfigurationStores, Microsoft.Communication.CommunicationServices, Microsoft.ContainerRegistry.Registries, Microsoft.Devices.IoTHubs, Microsoft.EventGrid.Domains, Microsoft.EventGrid.Topics, Microsoft.Eventhub.Namespaces, Microsoft.KeyVault.vaults, Microsoft.MachineLearningServices.Workspaces, Microsoft.Maps.Accounts, Microsoft.Media.MediaServices, Microsoft.Resources.ResourceGroups, Microsoft.Resources.Subscriptions, Microsoft.ServiceBus.Namespaces, Microsoft.SignalRService.SignalR, Microsoft.Storage.StorageAccounts, Microsoft.Web.ServerFarms and Microsoft.Web.Sites. Changing this forces a new Event Grid System Topic to be created.
	// +kubebuilder:validation:Required
	TopicType *string `json:"topicType" tf:"topic_type,omitempty"`
}

// SystemTopicSpec defines the desired state of SystemTopic
type SystemTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SystemTopicParameters `json:"forProvider"`
}

// SystemTopicStatus defines the observed state of SystemTopic.
type SystemTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SystemTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SystemTopic is the Schema for the SystemTopics API. Manages an Event Grid System Topic
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SystemTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SystemTopicSpec   `json:"spec"`
	Status            SystemTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SystemTopicList contains a list of SystemTopics
type SystemTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SystemTopic `json:"items"`
}

// Repository type metadata.
var (
	SystemTopic_Kind             = "SystemTopic"
	SystemTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SystemTopic_Kind}.String()
	SystemTopic_KindAPIVersion   = SystemTopic_Kind + "." + CRDGroupVersion.String()
	SystemTopic_GroupVersionKind = CRDGroupVersion.WithKind(SystemTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&SystemTopic{}, &SystemTopicList{})
}
