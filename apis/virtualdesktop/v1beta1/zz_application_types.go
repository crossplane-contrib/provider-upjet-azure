/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInitParameters struct {

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The index of the icon you wish to use.
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

type ApplicationObservation struct {

	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupID *string `json:"applicationGroupId,omitempty" tf:"application_group_id,omitempty"`

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The ID of the Virtual Desktop Application.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The index of the icon you wish to use.
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

type ApplicationParameters struct {

	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/virtualdesktop/v1beta1.ApplicationGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ApplicationGroupID *string `json:"applicationGroupId,omitempty" tf:"application_group_id,omitempty"`

	// Reference to a ApplicationGroup in virtualdesktop to populate applicationGroupId.
	// +kubebuilder:validation:Optional
	ApplicationGroupIDRef *v1.Reference `json:"applicationGroupIdRef,omitempty" tf:"-"`

	// Selector for a ApplicationGroup in virtualdesktop to populate applicationGroupId.
	// +kubebuilder:validation:Optional
	ApplicationGroupIDSelector *v1.Selector `json:"applicationGroupIdSelector,omitempty" tf:"-"`

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	// +kubebuilder:validation:Optional
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The index of the icon you wish to use.
	// +kubebuilder:validation:Optional
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	// +kubebuilder:validation:Optional
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationInitParameters `json:"initProvider,omitempty"`
}

// ApplicationStatus defines the observed state of Application.
type ApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Application is the Schema for the Applications API. Manages a Virtual Desktop Application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commandLineArgumentPolicy) || has(self.initProvider.commandLineArgumentPolicy)",message="commandLineArgumentPolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || has(self.initProvider.path)",message="path is a required parameter"
	Spec   ApplicationSpec   `json:"spec"`
	Status ApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationList contains a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

// Repository type metadata.
var (
	Application_Kind             = "Application"
	Application_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Application_Kind}.String()
	Application_KindAPIVersion   = Application_Kind + "." + CRDGroupVersion.String()
	Application_GroupVersionKind = CRDGroupVersion.WithKind(Application_Kind)
)

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}
