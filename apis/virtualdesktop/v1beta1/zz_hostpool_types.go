/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostPoolInitParameters struct {

	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be found in this article.
	CustomRdpProperties *string `json:"customRdpProperties,omitempty" tf:"custom_rdp_properties,omitempty"`

	// A description for the Virtual Desktop Host Pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// BreadthFirst load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are BreadthFirst, DepthFirst and Persistent.
	// DepthFirst load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// Persistent should be used if the host pool type is Personal
	LoadBalancerType *string `json:"loadBalancerType,omitempty" tf:"load_balancer_type,omitempty"`

	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the type of your Virtual Desktop Host Pool is Pooled.
	MaximumSessionsAllowed *float64 `json:"maximumSessionsAllowed,omitempty" tf:"maximum_sessions_allowed,omitempty"`

	// Automatic assignment – The service will select an available host and assign it to an user. Possible values are Automatic and Direct. Direct Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	PersonalDesktopAssignmentType *string `json:"personalDesktopAssignmentType,omitempty" tf:"personal_desktop_assignment_type,omitempty"`

	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are None, Desktop or RailApplications. Default is None. Changing this forces a new resource to be created.
	// Preferred App Group type to display
	PreferredAppGroupType *string `json:"preferredAppGroupType,omitempty" tf:"preferred_app_group_type,omitempty"`

	// A scheduled_agent_updates block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates []ScheduledAgentUpdatesInitParameters `json:"scheduledAgentUpdates,omitempty" tf:"scheduled_agent_updates,omitempty"`

	// Enables or disables the Start VM on Connection Feature. Defaults to false.
	StartVMOnConnect *bool `json:"startVmOnConnect,omitempty" tf:"start_vm_on_connect,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of the Virtual Desktop Host Pool. Valid options are Personal or Pooled. Changing the type forces a new resource to be created.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Allows you to test service changes before they are deployed to production. Defaults to false.
	ValidateEnvironment *bool `json:"validateEnvironment,omitempty" tf:"validate_environment,omitempty"`
}

type HostPoolObservation struct {

	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be found in this article.
	CustomRdpProperties *string `json:"customRdpProperties,omitempty" tf:"custom_rdp_properties,omitempty"`

	// A description for the Virtual Desktop Host Pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The ID of the Virtual Desktop Host Pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// BreadthFirst load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are BreadthFirst, DepthFirst and Persistent.
	// DepthFirst load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// Persistent should be used if the host pool type is Personal
	LoadBalancerType *string `json:"loadBalancerType,omitempty" tf:"load_balancer_type,omitempty"`

	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the type of your Virtual Desktop Host Pool is Pooled.
	MaximumSessionsAllowed *float64 `json:"maximumSessionsAllowed,omitempty" tf:"maximum_sessions_allowed,omitempty"`

	// Automatic assignment – The service will select an available host and assign it to an user. Possible values are Automatic and Direct. Direct Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	PersonalDesktopAssignmentType *string `json:"personalDesktopAssignmentType,omitempty" tf:"personal_desktop_assignment_type,omitempty"`

	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are None, Desktop or RailApplications. Default is None. Changing this forces a new resource to be created.
	// Preferred App Group type to display
	PreferredAppGroupType *string `json:"preferredAppGroupType,omitempty" tf:"preferred_app_group_type,omitempty"`

	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// A scheduled_agent_updates block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates []ScheduledAgentUpdatesObservation `json:"scheduledAgentUpdates,omitempty" tf:"scheduled_agent_updates,omitempty"`

	// Enables or disables the Start VM on Connection Feature. Defaults to false.
	StartVMOnConnect *bool `json:"startVmOnConnect,omitempty" tf:"start_vm_on_connect,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of the Virtual Desktop Host Pool. Valid options are Personal or Pooled. Changing the type forces a new resource to be created.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Allows you to test service changes before they are deployed to production. Defaults to false.
	ValidateEnvironment *bool `json:"validateEnvironment,omitempty" tf:"validate_environment,omitempty"`
}

type HostPoolParameters struct {

	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be found in this article.
	// +kubebuilder:validation:Optional
	CustomRdpProperties *string `json:"customRdpProperties,omitempty" tf:"custom_rdp_properties,omitempty"`

	// A description for the Virtual Desktop Host Pool.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly name for the Virtual Desktop Host Pool.
	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// BreadthFirst load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are BreadthFirst, DepthFirst and Persistent.
	// DepthFirst load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// Persistent should be used if the host pool type is Personal
	// +kubebuilder:validation:Optional
	LoadBalancerType *string `json:"loadBalancerType,omitempty" tf:"load_balancer_type,omitempty"`

	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the type of your Virtual Desktop Host Pool is Pooled.
	// +kubebuilder:validation:Optional
	MaximumSessionsAllowed *float64 `json:"maximumSessionsAllowed,omitempty" tf:"maximum_sessions_allowed,omitempty"`

	// Automatic assignment – The service will select an available host and assign it to an user. Possible values are Automatic and Direct. Direct Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	PersonalDesktopAssignmentType *string `json:"personalDesktopAssignmentType,omitempty" tf:"personal_desktop_assignment_type,omitempty"`

	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are None, Desktop or RailApplications. Default is None. Changing this forces a new resource to be created.
	// Preferred App Group type to display
	// +kubebuilder:validation:Optional
	PreferredAppGroupType *string `json:"preferredAppGroupType,omitempty" tf:"preferred_app_group_type,omitempty"`

	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A scheduled_agent_updates block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	// +kubebuilder:validation:Optional
	ScheduledAgentUpdates []ScheduledAgentUpdatesParameters `json:"scheduledAgentUpdates,omitempty" tf:"scheduled_agent_updates,omitempty"`

	// Enables or disables the Start VM on Connection Feature. Defaults to false.
	// +kubebuilder:validation:Optional
	StartVMOnConnect *bool `json:"startVmOnConnect,omitempty" tf:"start_vm_on_connect,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of the Virtual Desktop Host Pool. Valid options are Personal or Pooled. Changing the type forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Allows you to test service changes before they are deployed to production. Defaults to false.
	// +kubebuilder:validation:Optional
	ValidateEnvironment *bool `json:"validateEnvironment,omitempty" tf:"validate_environment,omitempty"`
}

type ScheduleInitParameters struct {

	// The day of the week on which agent updates should be performed. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	DayOfWeek *string `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`
}

type ScheduleObservation struct {

	// The day of the week on which agent updates should be performed. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	DayOfWeek *string `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`
}

type ScheduleParameters struct {

	// The day of the week on which agent updates should be performed. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	// +kubebuilder:validation:Optional
	DayOfWeek *string `json:"dayOfWeek" tf:"day_of_week,omitempty"`

	// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
	// +kubebuilder:validation:Optional
	HourOfDay *float64 `json:"hourOfDay" tf:"hour_of_day,omitempty"`
}

type ScheduledAgentUpdatesInitParameters struct {

	// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two schedule blocks must be defined. Default is false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A schedule block as defined below. A maximum of two blocks can be added.
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Specifies the time zone in which the agent update schedule will apply, the possible values are defined here. If use_session_host_timezone is enabled then it will override this setting. Default is UTC
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides timezone. Default is false.
	UseSessionHostTimezone *bool `json:"useSessionHostTimezone,omitempty" tf:"use_session_host_timezone,omitempty"`
}

type ScheduledAgentUpdatesObservation struct {

	// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two schedule blocks must be defined. Default is false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A schedule block as defined below. A maximum of two blocks can be added.
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Specifies the time zone in which the agent update schedule will apply, the possible values are defined here. If use_session_host_timezone is enabled then it will override this setting. Default is UTC
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides timezone. Default is false.
	UseSessionHostTimezone *bool `json:"useSessionHostTimezone,omitempty" tf:"use_session_host_timezone,omitempty"`
}

type ScheduledAgentUpdatesParameters struct {

	// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two schedule blocks must be defined. Default is false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A schedule block as defined below. A maximum of two blocks can be added.
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Specifies the time zone in which the agent update schedule will apply, the possible values are defined here. If use_session_host_timezone is enabled then it will override this setting. Default is UTC
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides timezone. Default is false.
	// +kubebuilder:validation:Optional
	UseSessionHostTimezone *bool `json:"useSessionHostTimezone,omitempty" tf:"use_session_host_timezone,omitempty"`
}

// HostPoolSpec defines the desired state of HostPool
type HostPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostPoolParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HostPoolInitParameters `json:"initProvider,omitempty"`
}

// HostPoolStatus defines the observed state of HostPool.
type HostPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HostPool is the Schema for the HostPools API. Manages a Virtual Desktop Host Pool.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HostPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadBalancerType) || has(self.initProvider.loadBalancerType)",message="loadBalancerType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   HostPoolSpec   `json:"spec"`
	Status HostPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostPoolList contains a list of HostPools
type HostPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostPool `json:"items"`
}

// Repository type metadata.
var (
	HostPool_Kind             = "HostPool"
	HostPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostPool_Kind}.String()
	HostPool_KindAPIVersion   = HostPool_Kind + "." + CRDGroupVersion.String()
	HostPool_GroupVersionKind = CRDGroupVersion.WithKind(HostPool_Kind)
)

func init() {
	SchemeBuilder.Register(&HostPool{}, &HostPoolList{})
}
