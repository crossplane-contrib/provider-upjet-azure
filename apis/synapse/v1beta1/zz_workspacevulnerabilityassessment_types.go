/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecurringScansObservation struct {
}

type RecurringScansParameters struct {

	// Boolean flag which specifies if the schedule scan notification will be sent to the subscription administrators. Defaults to false.
	// +kubebuilder:validation:Optional
	EmailSubscriptionAdminsEnabled *bool `json:"emailSubscriptionAdminsEnabled,omitempty" tf:"email_subscription_admins_enabled,omitempty"`

	// Specifies an array of email addresses to which the scan notification is sent.
	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// Boolean flag which specifies if recurring scans is enabled or disabled. Defaults to false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type WorkspaceVulnerabilityAssessmentObservation struct {

	// The ID of the Synapse Workspace Vulnerability Assessment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WorkspaceVulnerabilityAssessmentParameters struct {

	// The recurring scans settings. The recurring_scans block supports fields documented below.
	// +kubebuilder:validation:Optional
	RecurringScans []RecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If storage_container_sas_key isn't specified, storage_account_access_key is required.
	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// A blob storage container path to hold the scan results (e.g. https://example.blob.core.windows.net/VaScans/).
	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// A shared access signature (SAS Key) that has write access to the blob container specified in storage_container_path parameter. If storage_account_access_key isn't specified, storage_container_sas_key is required.
	// +kubebuilder:validation:Optional
	StorageContainerSASKeySecretRef *v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`

	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.WorkspaceSecurityAlertPolicy
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WorkspaceSecurityAlertPolicyID *string `json:"workspaceSecurityAlertPolicyId,omitempty" tf:"workspace_security_alert_policy_id,omitempty"`

	// Reference to a WorkspaceSecurityAlertPolicy in synapse to populate workspaceSecurityAlertPolicyId.
	// +kubebuilder:validation:Optional
	WorkspaceSecurityAlertPolicyIDRef *v1.Reference `json:"workspaceSecurityAlertPolicyIdRef,omitempty" tf:"-"`

	// Selector for a WorkspaceSecurityAlertPolicy in synapse to populate workspaceSecurityAlertPolicyId.
	// +kubebuilder:validation:Optional
	WorkspaceSecurityAlertPolicyIDSelector *v1.Selector `json:"workspaceSecurityAlertPolicyIdSelector,omitempty" tf:"-"`
}

// WorkspaceVulnerabilityAssessmentSpec defines the desired state of WorkspaceVulnerabilityAssessment
type WorkspaceVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceVulnerabilityAssessmentParameters `json:"forProvider"`
}

// WorkspaceVulnerabilityAssessmentStatus defines the observed state of WorkspaceVulnerabilityAssessment.
type WorkspaceVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceVulnerabilityAssessment is the Schema for the WorkspaceVulnerabilityAssessments API. Manages the Vulnerability Assessment for a Synapse Workspace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WorkspaceVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkspaceVulnerabilityAssessmentSpec   `json:"spec"`
	Status            WorkspaceVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceVulnerabilityAssessmentList contains a list of WorkspaceVulnerabilityAssessments
type WorkspaceVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspaceVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceVulnerabilityAssessment_Kind             = "WorkspaceVulnerabilityAssessment"
	WorkspaceVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceVulnerabilityAssessment_Kind}.String()
	WorkspaceVulnerabilityAssessment_KindAPIVersion   = WorkspaceVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	WorkspaceVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(WorkspaceVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkspaceVulnerabilityAssessment{}, &WorkspaceVulnerabilityAssessmentList{})
}
