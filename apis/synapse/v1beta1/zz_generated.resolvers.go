// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *FirewallRule) ResolveReferences( // ResolveReferences of this FirewallRule.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzure.
func (mg *IntegrationRuntimeAzure) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeSelfHosted.
func (mg *IntegrationRuntimeSelfHosted) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedService.
func (mg *LinkedService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.IntegrationRuntime); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "IntegrationRuntimeAzure", "IntegrationRuntimeAzureList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.IntegrationRuntime[i3].Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.IntegrationRuntime[i3].NameRef,
				Selector:     mg.Spec.ForProvider.IntegrationRuntime[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.IntegrationRuntime[i3].Name")
		}
		mg.Spec.ForProvider.IntegrationRuntime[i3].Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.IntegrationRuntime[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.IntegrationRuntime); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "IntegrationRuntimeAzure", "IntegrationRuntimeAzureList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.IntegrationRuntime[i3].Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.IntegrationRuntime[i3].NameRef,
				Selector:     mg.Spec.InitProvider.IntegrationRuntime[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.IntegrationRuntime[i3].Name")
		}
		mg.Spec.InitProvider.IntegrationRuntime[i3].Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.IntegrationRuntime[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ManagedPrivateEndpoint.
func (mg *ManagedPrivateEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.TargetResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SynapseWorkspaceID")
	}
	mg.Spec.InitProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.TargetResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateLinkHub.
func (mg *PrivateLinkHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RoleAssignment.
func (mg *RoleAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SynapseWorkspaceID")
	}
	mg.Spec.InitProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLPool.
func (mg *SQLPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLPoolExtendedAuditingPolicy.
func (mg *SQLPoolExtendedAuditingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "SQLPool", "SQLPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SQLPoolID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SQLPoolIDRef,
			Selector:     mg.Spec.ForProvider.SQLPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLPoolID")
	}
	mg.Spec.ForProvider.SQLPoolID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.ForProvider.StorageEndpointRef,
			Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.InitProvider.StorageEndpointRef,
			Selector:     mg.Spec.InitProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageEndpoint")
	}
	mg.Spec.InitProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLPoolSecurityAlertPolicy.
func (mg *SQLPoolSecurityAlertPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "SQLPool", "SQLPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SQLPoolID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SQLPoolIDRef,
			Selector:     mg.Spec.ForProvider.SQLPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLPoolID")
	}
	mg.Spec.ForProvider.SQLPoolID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLPoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.ForProvider.StorageEndpointRef,
			Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.InitProvider.StorageEndpointRef,
			Selector:     mg.Spec.InitProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageEndpoint")
	}
	mg.Spec.InitProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLPoolWorkloadClassifier.
func (mg *SQLPoolWorkloadClassifier) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "SQLPoolWorkloadGroup", "SQLPoolWorkloadGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkloadGroupID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkloadGroupIDRef,
			Selector:     mg.Spec.ForProvider.WorkloadGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkloadGroupID")
	}
	mg.Spec.ForProvider.WorkloadGroupID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkloadGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLPoolWorkloadGroup.
func (mg *SQLPoolWorkloadGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "SQLPool", "SQLPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SQLPoolID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SQLPoolIDRef,
			Selector:     mg.Spec.ForProvider.SQLPoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLPoolID")
	}
	mg.Spec.ForProvider.SQLPoolID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SparkPool.
func (mg *SparkPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Workspace.
func (mg *Workspace) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ComputeSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ComputeSubnetIDRef,
			Selector:     mg.Spec.ForProvider.ComputeSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ComputeSubnetID")
	}
	mg.Spec.ForProvider.ComputeSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ComputeSubnetIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CustomerManagedKey); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessID, ""),
				Extract:      resource.ExtractParamPath("versionless_id", true),
				Reference:    mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessIDRef,
				Selector:     mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessID")
		}
		mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomerManagedKey[i3].KeyVersionlessIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ManagedResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ManagedResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ManagedResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedResourceGroupName")
	}
	mg.Spec.ForProvider.ManagedResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "DataLakeGen2FileSystem", "DataLakeGen2FileSystemList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageDataLakeGen2FileSystemID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.StorageDataLakeGen2FileSystemIDRef,
			Selector:     mg.Spec.ForProvider.StorageDataLakeGen2FileSystemIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageDataLakeGen2FileSystemID")
	}
	mg.Spec.ForProvider.StorageDataLakeGen2FileSystemID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageDataLakeGen2FileSystemIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ComputeSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ComputeSubnetIDRef,
			Selector:     mg.Spec.InitProvider.ComputeSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ComputeSubnetID")
	}
	mg.Spec.InitProvider.ComputeSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ComputeSubnetIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.CustomerManagedKey); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta1", "Key", "KeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessID, ""),
				Extract:      resource.ExtractParamPath("versionless_id", true),
				Reference:    mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessIDRef,
				Selector:     mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessID")
		}
		mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.CustomerManagedKey[i3].KeyVersionlessIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ManagedResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ManagedResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ManagedResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ManagedResourceGroupName")
	}
	mg.Spec.InitProvider.ManagedResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ManagedResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "DataLakeGen2FileSystem", "DataLakeGen2FileSystemList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageDataLakeGen2FileSystemID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.StorageDataLakeGen2FileSystemIDRef,
			Selector:     mg.Spec.InitProvider.StorageDataLakeGen2FileSystemIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageDataLakeGen2FileSystemID")
	}
	mg.Spec.InitProvider.StorageDataLakeGen2FileSystemID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageDataLakeGen2FileSystemIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceAADAdmin.
func (mg *WorkspaceAADAdmin) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceExtendedAuditingPolicy.
func (mg *WorkspaceExtendedAuditingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.ForProvider.StorageEndpointRef,
			Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.InitProvider.StorageEndpointRef,
			Selector:     mg.Spec.InitProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageEndpoint")
	}
	mg.Spec.InitProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceSQLAADAdmin.
func (mg *WorkspaceSQLAADAdmin) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SynapseWorkspaceID")
	}
	mg.Spec.InitProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceSecurityAlertPolicy.
func (mg *WorkspaceSecurityAlertPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.ForProvider.StorageEndpointRef,
			Selector:     mg.Spec.ForProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageEndpoint")
	}
	mg.Spec.ForProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageEndpointRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SynapseWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SynapseWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.SynapseWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SynapseWorkspaceID")
	}
	mg.Spec.ForProvider.SynapseWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SynapseWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageEndpoint, ""),
			Extract:      resource.ExtractParamPath("primary_blob_endpoint", true),
			Reference:    mg.Spec.InitProvider.StorageEndpointRef,
			Selector:     mg.Spec.InitProvider.StorageEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageEndpoint")
	}
	mg.Spec.InitProvider.StorageEndpoint = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceVulnerabilityAssessment.
func (mg *WorkspaceVulnerabilityAssessment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "WorkspaceSecurityAlertPolicy", "WorkspaceSecurityAlertPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyID")
	}
	mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceSecurityAlertPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("synapse.azure.upbound.io", "v1beta1", "WorkspaceSecurityAlertPolicy", "WorkspaceSecurityAlertPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyIDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyID")
	}
	mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkspaceSecurityAlertPolicyIDRef = rsp.ResolvedReference

	return nil
}
