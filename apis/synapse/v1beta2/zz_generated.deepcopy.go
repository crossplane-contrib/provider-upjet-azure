//go:build (synapse || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AADAdminInitParameters) DeepCopyInto(out *AADAdminInitParameters) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AADAdminInitParameters.
func (in *AADAdminInitParameters) DeepCopy() *AADAdminInitParameters {
	if in == nil {
		return nil
	}
	out := new(AADAdminInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AADAdminObservation) DeepCopyInto(out *AADAdminObservation) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AADAdminObservation.
func (in *AADAdminObservation) DeepCopy() *AADAdminObservation {
	if in == nil {
		return nil
	}
	out := new(AADAdminObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AADAdminParameters) DeepCopyInto(out *AADAdminParameters) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AADAdminParameters.
func (in *AADAdminParameters) DeepCopy() *AADAdminParameters {
	if in == nil {
		return nil
	}
	out := new(AADAdminParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoPauseInitParameters) DeepCopyInto(out *AutoPauseInitParameters) {
	*out = *in
	if in.DelayInMinutes != nil {
		in, out := &in.DelayInMinutes, &out.DelayInMinutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoPauseInitParameters.
func (in *AutoPauseInitParameters) DeepCopy() *AutoPauseInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoPauseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoPauseObservation) DeepCopyInto(out *AutoPauseObservation) {
	*out = *in
	if in.DelayInMinutes != nil {
		in, out := &in.DelayInMinutes, &out.DelayInMinutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoPauseObservation.
func (in *AutoPauseObservation) DeepCopy() *AutoPauseObservation {
	if in == nil {
		return nil
	}
	out := new(AutoPauseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoPauseParameters) DeepCopyInto(out *AutoPauseParameters) {
	*out = *in
	if in.DelayInMinutes != nil {
		in, out := &in.DelayInMinutes, &out.DelayInMinutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoPauseParameters.
func (in *AutoPauseParameters) DeepCopy() *AutoPauseParameters {
	if in == nil {
		return nil
	}
	out := new(AutoPauseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScaleInitParameters) DeepCopyInto(out *AutoScaleInitParameters) {
	*out = *in
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScaleInitParameters.
func (in *AutoScaleInitParameters) DeepCopy() *AutoScaleInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScaleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScaleObservation) DeepCopyInto(out *AutoScaleObservation) {
	*out = *in
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScaleObservation.
func (in *AutoScaleObservation) DeepCopy() *AutoScaleObservation {
	if in == nil {
		return nil
	}
	out := new(AutoScaleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScaleParameters) DeepCopyInto(out *AutoScaleParameters) {
	*out = *in
	if in.MaxNodeCount != nil {
		in, out := &in.MaxNodeCount, &out.MaxNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.MinNodeCount != nil {
		in, out := &in.MinNodeCount, &out.MinNodeCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScaleParameters.
func (in *AutoScaleParameters) DeepCopy() *AutoScaleParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScaleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsRepoInitParameters) DeepCopyInto(out *AzureDevopsRepoInitParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.ProjectName != nil {
		in, out := &in.ProjectName, &out.ProjectName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsRepoInitParameters.
func (in *AzureDevopsRepoInitParameters) DeepCopy() *AzureDevopsRepoInitParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsRepoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsRepoObservation) DeepCopyInto(out *AzureDevopsRepoObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.ProjectName != nil {
		in, out := &in.ProjectName, &out.ProjectName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsRepoObservation.
func (in *AzureDevopsRepoObservation) DeepCopy() *AzureDevopsRepoObservation {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsRepoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureDevopsRepoParameters) DeepCopyInto(out *AzureDevopsRepoParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.ProjectName != nil {
		in, out := &in.ProjectName, &out.ProjectName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureDevopsRepoParameters.
func (in *AzureDevopsRepoParameters) DeepCopy() *AzureDevopsRepoParameters {
	if in == nil {
		return nil
	}
	out := new(AzureDevopsRepoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerManagedKeyInitParameters) DeepCopyInto(out *CustomerManagedKeyInitParameters) {
	*out = *in
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyVersionlessID != nil {
		in, out := &in.KeyVersionlessID, &out.KeyVersionlessID
		*out = new(string)
		**out = **in
	}
	if in.KeyVersionlessIDRef != nil {
		in, out := &in.KeyVersionlessIDRef, &out.KeyVersionlessIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyVersionlessIDSelector != nil {
		in, out := &in.KeyVersionlessIDSelector, &out.KeyVersionlessIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerManagedKeyInitParameters.
func (in *CustomerManagedKeyInitParameters) DeepCopy() *CustomerManagedKeyInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomerManagedKeyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerManagedKeyObservation) DeepCopyInto(out *CustomerManagedKeyObservation) {
	*out = *in
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyVersionlessID != nil {
		in, out := &in.KeyVersionlessID, &out.KeyVersionlessID
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerManagedKeyObservation.
func (in *CustomerManagedKeyObservation) DeepCopy() *CustomerManagedKeyObservation {
	if in == nil {
		return nil
	}
	out := new(CustomerManagedKeyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomerManagedKeyParameters) DeepCopyInto(out *CustomerManagedKeyParameters) {
	*out = *in
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyVersionlessID != nil {
		in, out := &in.KeyVersionlessID, &out.KeyVersionlessID
		*out = new(string)
		**out = **in
	}
	if in.KeyVersionlessIDRef != nil {
		in, out := &in.KeyVersionlessIDRef, &out.KeyVersionlessIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyVersionlessIDSelector != nil {
		in, out := &in.KeyVersionlessIDSelector, &out.KeyVersionlessIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomerManagedKeyParameters.
func (in *CustomerManagedKeyParameters) DeepCopy() *CustomerManagedKeyParameters {
	if in == nil {
		return nil
	}
	out := new(CustomerManagedKeyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubRepoInitParameters) DeepCopyInto(out *GithubRepoInitParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubRepoInitParameters.
func (in *GithubRepoInitParameters) DeepCopy() *GithubRepoInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubRepoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubRepoObservation) DeepCopyInto(out *GithubRepoObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubRepoObservation.
func (in *GithubRepoObservation) DeepCopy() *GithubRepoObservation {
	if in == nil {
		return nil
	}
	out := new(GithubRepoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubRepoParameters) DeepCopyInto(out *GithubRepoParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RootFolder != nil {
		in, out := &in.RootFolder, &out.RootFolder
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubRepoParameters.
func (in *GithubRepoParameters) DeepCopy() *GithubRepoParameters {
	if in == nil {
		return nil
	}
	out := new(GithubRepoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityInitParameters) DeepCopyInto(out *IdentityInitParameters) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityInitParameters.
func (in *IdentityInitParameters) DeepCopy() *IdentityInitParameters {
	if in == nil {
		return nil
	}
	out := new(IdentityInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityObservation) DeepCopyInto(out *IdentityObservation) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrincipalID != nil {
		in, out := &in.PrincipalID, &out.PrincipalID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityObservation.
func (in *IdentityObservation) DeepCopy() *IdentityObservation {
	if in == nil {
		return nil
	}
	out := new(IdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityParameters) DeepCopyInto(out *IdentityParameters) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityParameters.
func (in *IdentityParameters) DeepCopy() *IdentityParameters {
	if in == nil {
		return nil
	}
	out := new(IdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntegrationRuntimeInitParameters) DeepCopyInto(out *IntegrationRuntimeInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntegrationRuntimeInitParameters.
func (in *IntegrationRuntimeInitParameters) DeepCopy() *IntegrationRuntimeInitParameters {
	if in == nil {
		return nil
	}
	out := new(IntegrationRuntimeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntegrationRuntimeObservation) DeepCopyInto(out *IntegrationRuntimeObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntegrationRuntimeObservation.
func (in *IntegrationRuntimeObservation) DeepCopy() *IntegrationRuntimeObservation {
	if in == nil {
		return nil
	}
	out := new(IntegrationRuntimeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IntegrationRuntimeParameters) DeepCopyInto(out *IntegrationRuntimeParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameRef != nil {
		in, out := &in.NameRef, &out.NameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NameSelector != nil {
		in, out := &in.NameSelector, &out.NameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IntegrationRuntimeParameters.
func (in *IntegrationRuntimeParameters) DeepCopy() *IntegrationRuntimeParameters {
	if in == nil {
		return nil
	}
	out := new(IntegrationRuntimeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryRequirementInitParameters) DeepCopyInto(out *LibraryRequirementInitParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryRequirementInitParameters.
func (in *LibraryRequirementInitParameters) DeepCopy() *LibraryRequirementInitParameters {
	if in == nil {
		return nil
	}
	out := new(LibraryRequirementInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryRequirementObservation) DeepCopyInto(out *LibraryRequirementObservation) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryRequirementObservation.
func (in *LibraryRequirementObservation) DeepCopy() *LibraryRequirementObservation {
	if in == nil {
		return nil
	}
	out := new(LibraryRequirementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LibraryRequirementParameters) DeepCopyInto(out *LibraryRequirementParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LibraryRequirementParameters.
func (in *LibraryRequirementParameters) DeepCopy() *LibraryRequirementParameters {
	if in == nil {
		return nil
	}
	out := new(LibraryRequirementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedService) DeepCopyInto(out *LinkedService) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedService.
func (in *LinkedService) DeepCopy() *LinkedService {
	if in == nil {
		return nil
	}
	out := new(LinkedService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LinkedService) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceInitParameters) DeepCopyInto(out *LinkedServiceInitParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.IntegrationRuntime != nil {
		in, out := &in.IntegrationRuntime, &out.IntegrationRuntime
		*out = new(IntegrationRuntimeInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypePropertiesJSON != nil {
		in, out := &in.TypePropertiesJSON, &out.TypePropertiesJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceInitParameters.
func (in *LinkedServiceInitParameters) DeepCopy() *LinkedServiceInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceList) DeepCopyInto(out *LinkedServiceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]LinkedService, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceList.
func (in *LinkedServiceList) DeepCopy() *LinkedServiceList {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LinkedServiceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceObservation) DeepCopyInto(out *LinkedServiceObservation) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IntegrationRuntime != nil {
		in, out := &in.IntegrationRuntime, &out.IntegrationRuntime
		*out = new(IntegrationRuntimeObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypePropertiesJSON != nil {
		in, out := &in.TypePropertiesJSON, &out.TypePropertiesJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceObservation.
func (in *LinkedServiceObservation) DeepCopy() *LinkedServiceObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceParameters) DeepCopyInto(out *LinkedServiceParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.IntegrationRuntime != nil {
		in, out := &in.IntegrationRuntime, &out.IntegrationRuntime
		*out = new(IntegrationRuntimeParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceIDRef != nil {
		in, out := &in.SynapseWorkspaceIDRef, &out.SynapseWorkspaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SynapseWorkspaceIDSelector != nil {
		in, out := &in.SynapseWorkspaceIDSelector, &out.SynapseWorkspaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TypePropertiesJSON != nil {
		in, out := &in.TypePropertiesJSON, &out.TypePropertiesJSON
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceParameters.
func (in *LinkedServiceParameters) DeepCopy() *LinkedServiceParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceSpec) DeepCopyInto(out *LinkedServiceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceSpec.
func (in *LinkedServiceSpec) DeepCopy() *LinkedServiceSpec {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedServiceStatus) DeepCopyInto(out *LinkedServiceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedServiceStatus.
func (in *LinkedServiceStatus) DeepCopy() *LinkedServiceStatus {
	if in == nil {
		return nil
	}
	out := new(LinkedServiceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecurringScansInitParameters) DeepCopyInto(out *RecurringScansInitParameters) {
	*out = *in
	if in.EmailSubscriptionAdminsEnabled != nil {
		in, out := &in.EmailSubscriptionAdminsEnabled, &out.EmailSubscriptionAdminsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Emails != nil {
		in, out := &in.Emails, &out.Emails
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecurringScansInitParameters.
func (in *RecurringScansInitParameters) DeepCopy() *RecurringScansInitParameters {
	if in == nil {
		return nil
	}
	out := new(RecurringScansInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecurringScansObservation) DeepCopyInto(out *RecurringScansObservation) {
	*out = *in
	if in.EmailSubscriptionAdminsEnabled != nil {
		in, out := &in.EmailSubscriptionAdminsEnabled, &out.EmailSubscriptionAdminsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Emails != nil {
		in, out := &in.Emails, &out.Emails
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecurringScansObservation.
func (in *RecurringScansObservation) DeepCopy() *RecurringScansObservation {
	if in == nil {
		return nil
	}
	out := new(RecurringScansObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecurringScansParameters) DeepCopyInto(out *RecurringScansParameters) {
	*out = *in
	if in.EmailSubscriptionAdminsEnabled != nil {
		in, out := &in.EmailSubscriptionAdminsEnabled, &out.EmailSubscriptionAdminsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Emails != nil {
		in, out := &in.Emails, &out.Emails
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecurringScansParameters.
func (in *RecurringScansParameters) DeepCopy() *RecurringScansParameters {
	if in == nil {
		return nil
	}
	out := new(RecurringScansParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreInitParameters) DeepCopyInto(out *RestoreInitParameters) {
	*out = *in
	if in.PointInTime != nil {
		in, out := &in.PointInTime, &out.PointInTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDatabaseID != nil {
		in, out := &in.SourceDatabaseID, &out.SourceDatabaseID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreInitParameters.
func (in *RestoreInitParameters) DeepCopy() *RestoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreObservation) DeepCopyInto(out *RestoreObservation) {
	*out = *in
	if in.PointInTime != nil {
		in, out := &in.PointInTime, &out.PointInTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDatabaseID != nil {
		in, out := &in.SourceDatabaseID, &out.SourceDatabaseID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreObservation.
func (in *RestoreObservation) DeepCopy() *RestoreObservation {
	if in == nil {
		return nil
	}
	out := new(RestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreParameters) DeepCopyInto(out *RestoreParameters) {
	*out = *in
	if in.PointInTime != nil {
		in, out := &in.PointInTime, &out.PointInTime
		*out = new(string)
		**out = **in
	}
	if in.SourceDatabaseID != nil {
		in, out := &in.SourceDatabaseID, &out.SourceDatabaseID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreParameters.
func (in *RestoreParameters) DeepCopy() *RestoreParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLAADAdminInitParameters) DeepCopyInto(out *SQLAADAdminInitParameters) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLAADAdminInitParameters.
func (in *SQLAADAdminInitParameters) DeepCopy() *SQLAADAdminInitParameters {
	if in == nil {
		return nil
	}
	out := new(SQLAADAdminInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLAADAdminObservation) DeepCopyInto(out *SQLAADAdminObservation) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLAADAdminObservation.
func (in *SQLAADAdminObservation) DeepCopy() *SQLAADAdminObservation {
	if in == nil {
		return nil
	}
	out := new(SQLAADAdminObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLAADAdminParameters) DeepCopyInto(out *SQLAADAdminParameters) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLAADAdminParameters.
func (in *SQLAADAdminParameters) DeepCopy() *SQLAADAdminParameters {
	if in == nil {
		return nil
	}
	out := new(SQLAADAdminParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPool) DeepCopyInto(out *SQLPool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPool.
func (in *SQLPool) DeepCopy() *SQLPool {
	if in == nil {
		return nil
	}
	out := new(SQLPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SQLPool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolInitParameters) DeepCopyInto(out *SQLPoolInitParameters) {
	*out = *in
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.CreateMode != nil {
		in, out := &in.CreateMode, &out.CreateMode
		*out = new(string)
		**out = **in
	}
	if in.DataEncrypted != nil {
		in, out := &in.DataEncrypted, &out.DataEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.GeoBackupPolicyEnabled != nil {
		in, out := &in.GeoBackupPolicyEnabled, &out.GeoBackupPolicyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RecoveryDatabaseID != nil {
		in, out := &in.RecoveryDatabaseID, &out.RecoveryDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = new(RestoreInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SkuName != nil {
		in, out := &in.SkuName, &out.SkuName
		*out = new(string)
		**out = **in
	}
	if in.StorageAccountType != nil {
		in, out := &in.StorageAccountType, &out.StorageAccountType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolInitParameters.
func (in *SQLPoolInitParameters) DeepCopy() *SQLPoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(SQLPoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolList) DeepCopyInto(out *SQLPoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SQLPool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolList.
func (in *SQLPoolList) DeepCopy() *SQLPoolList {
	if in == nil {
		return nil
	}
	out := new(SQLPoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SQLPoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolObservation) DeepCopyInto(out *SQLPoolObservation) {
	*out = *in
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.CreateMode != nil {
		in, out := &in.CreateMode, &out.CreateMode
		*out = new(string)
		**out = **in
	}
	if in.DataEncrypted != nil {
		in, out := &in.DataEncrypted, &out.DataEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.GeoBackupPolicyEnabled != nil {
		in, out := &in.GeoBackupPolicyEnabled, &out.GeoBackupPolicyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.RecoveryDatabaseID != nil {
		in, out := &in.RecoveryDatabaseID, &out.RecoveryDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = new(RestoreObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SkuName != nil {
		in, out := &in.SkuName, &out.SkuName
		*out = new(string)
		**out = **in
	}
	if in.StorageAccountType != nil {
		in, out := &in.StorageAccountType, &out.StorageAccountType
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolObservation.
func (in *SQLPoolObservation) DeepCopy() *SQLPoolObservation {
	if in == nil {
		return nil
	}
	out := new(SQLPoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolParameters) DeepCopyInto(out *SQLPoolParameters) {
	*out = *in
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.CreateMode != nil {
		in, out := &in.CreateMode, &out.CreateMode
		*out = new(string)
		**out = **in
	}
	if in.DataEncrypted != nil {
		in, out := &in.DataEncrypted, &out.DataEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.GeoBackupPolicyEnabled != nil {
		in, out := &in.GeoBackupPolicyEnabled, &out.GeoBackupPolicyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RecoveryDatabaseID != nil {
		in, out := &in.RecoveryDatabaseID, &out.RecoveryDatabaseID
		*out = new(string)
		**out = **in
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = new(RestoreParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SkuName != nil {
		in, out := &in.SkuName, &out.SkuName
		*out = new(string)
		**out = **in
	}
	if in.StorageAccountType != nil {
		in, out := &in.StorageAccountType, &out.StorageAccountType
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceIDRef != nil {
		in, out := &in.SynapseWorkspaceIDRef, &out.SynapseWorkspaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SynapseWorkspaceIDSelector != nil {
		in, out := &in.SynapseWorkspaceIDSelector, &out.SynapseWorkspaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolParameters.
func (in *SQLPoolParameters) DeepCopy() *SQLPoolParameters {
	if in == nil {
		return nil
	}
	out := new(SQLPoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolSpec) DeepCopyInto(out *SQLPoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolSpec.
func (in *SQLPoolSpec) DeepCopy() *SQLPoolSpec {
	if in == nil {
		return nil
	}
	out := new(SQLPoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SQLPoolStatus) DeepCopyInto(out *SQLPoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SQLPoolStatus.
func (in *SQLPoolStatus) DeepCopy() *SQLPoolStatus {
	if in == nil {
		return nil
	}
	out := new(SQLPoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkConfigInitParameters) DeepCopyInto(out *SparkConfigInitParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkConfigInitParameters.
func (in *SparkConfigInitParameters) DeepCopy() *SparkConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(SparkConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkConfigObservation) DeepCopyInto(out *SparkConfigObservation) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkConfigObservation.
func (in *SparkConfigObservation) DeepCopy() *SparkConfigObservation {
	if in == nil {
		return nil
	}
	out := new(SparkConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkConfigParameters) DeepCopyInto(out *SparkConfigParameters) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkConfigParameters.
func (in *SparkConfigParameters) DeepCopy() *SparkConfigParameters {
	if in == nil {
		return nil
	}
	out := new(SparkConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPool) DeepCopyInto(out *SparkPool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPool.
func (in *SparkPool) DeepCopy() *SparkPool {
	if in == nil {
		return nil
	}
	out := new(SparkPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SparkPool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolInitParameters) DeepCopyInto(out *SparkPoolInitParameters) {
	*out = *in
	if in.AutoPause != nil {
		in, out := &in.AutoPause, &out.AutoPause
		*out = new(AutoPauseInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoScale != nil {
		in, out := &in.AutoScale, &out.AutoScale
		*out = new(AutoScaleInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheSize != nil {
		in, out := &in.CacheSize, &out.CacheSize
		*out = new(float64)
		**out = **in
	}
	if in.ComputeIsolationEnabled != nil {
		in, out := &in.ComputeIsolationEnabled, &out.ComputeIsolationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DynamicExecutorAllocationEnabled != nil {
		in, out := &in.DynamicExecutorAllocationEnabled, &out.DynamicExecutorAllocationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LibraryRequirement != nil {
		in, out := &in.LibraryRequirement, &out.LibraryRequirement
		*out = new(LibraryRequirementInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxExecutors != nil {
		in, out := &in.MaxExecutors, &out.MaxExecutors
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutors != nil {
		in, out := &in.MinExecutors, &out.MinExecutors
		*out = new(float64)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeSize != nil {
		in, out := &in.NodeSize, &out.NodeSize
		*out = new(string)
		**out = **in
	}
	if in.NodeSizeFamily != nil {
		in, out := &in.NodeSizeFamily, &out.NodeSizeFamily
		*out = new(string)
		**out = **in
	}
	if in.SessionLevelPackagesEnabled != nil {
		in, out := &in.SessionLevelPackagesEnabled, &out.SessionLevelPackagesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkConfig != nil {
		in, out := &in.SparkConfig, &out.SparkConfig
		*out = new(SparkConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkEventsFolder != nil {
		in, out := &in.SparkEventsFolder, &out.SparkEventsFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkLogFolder != nil {
		in, out := &in.SparkLogFolder, &out.SparkLogFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkVersion != nil {
		in, out := &in.SparkVersion, &out.SparkVersion
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolInitParameters.
func (in *SparkPoolInitParameters) DeepCopy() *SparkPoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(SparkPoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolList) DeepCopyInto(out *SparkPoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SparkPool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolList.
func (in *SparkPoolList) DeepCopy() *SparkPoolList {
	if in == nil {
		return nil
	}
	out := new(SparkPoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SparkPoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolObservation) DeepCopyInto(out *SparkPoolObservation) {
	*out = *in
	if in.AutoPause != nil {
		in, out := &in.AutoPause, &out.AutoPause
		*out = new(AutoPauseObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoScale != nil {
		in, out := &in.AutoScale, &out.AutoScale
		*out = new(AutoScaleObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheSize != nil {
		in, out := &in.CacheSize, &out.CacheSize
		*out = new(float64)
		**out = **in
	}
	if in.ComputeIsolationEnabled != nil {
		in, out := &in.ComputeIsolationEnabled, &out.ComputeIsolationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DynamicExecutorAllocationEnabled != nil {
		in, out := &in.DynamicExecutorAllocationEnabled, &out.DynamicExecutorAllocationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LibraryRequirement != nil {
		in, out := &in.LibraryRequirement, &out.LibraryRequirement
		*out = new(LibraryRequirementObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxExecutors != nil {
		in, out := &in.MaxExecutors, &out.MaxExecutors
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutors != nil {
		in, out := &in.MinExecutors, &out.MinExecutors
		*out = new(float64)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeSize != nil {
		in, out := &in.NodeSize, &out.NodeSize
		*out = new(string)
		**out = **in
	}
	if in.NodeSizeFamily != nil {
		in, out := &in.NodeSizeFamily, &out.NodeSizeFamily
		*out = new(string)
		**out = **in
	}
	if in.SessionLevelPackagesEnabled != nil {
		in, out := &in.SessionLevelPackagesEnabled, &out.SessionLevelPackagesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkConfig != nil {
		in, out := &in.SparkConfig, &out.SparkConfig
		*out = new(SparkConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkEventsFolder != nil {
		in, out := &in.SparkEventsFolder, &out.SparkEventsFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkLogFolder != nil {
		in, out := &in.SparkLogFolder, &out.SparkLogFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkVersion != nil {
		in, out := &in.SparkVersion, &out.SparkVersion
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolObservation.
func (in *SparkPoolObservation) DeepCopy() *SparkPoolObservation {
	if in == nil {
		return nil
	}
	out := new(SparkPoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolParameters) DeepCopyInto(out *SparkPoolParameters) {
	*out = *in
	if in.AutoPause != nil {
		in, out := &in.AutoPause, &out.AutoPause
		*out = new(AutoPauseParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AutoScale != nil {
		in, out := &in.AutoScale, &out.AutoScale
		*out = new(AutoScaleParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheSize != nil {
		in, out := &in.CacheSize, &out.CacheSize
		*out = new(float64)
		**out = **in
	}
	if in.ComputeIsolationEnabled != nil {
		in, out := &in.ComputeIsolationEnabled, &out.ComputeIsolationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DynamicExecutorAllocationEnabled != nil {
		in, out := &in.DynamicExecutorAllocationEnabled, &out.DynamicExecutorAllocationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LibraryRequirement != nil {
		in, out := &in.LibraryRequirement, &out.LibraryRequirement
		*out = new(LibraryRequirementParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxExecutors != nil {
		in, out := &in.MaxExecutors, &out.MaxExecutors
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutors != nil {
		in, out := &in.MinExecutors, &out.MinExecutors
		*out = new(float64)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeSize != nil {
		in, out := &in.NodeSize, &out.NodeSize
		*out = new(string)
		**out = **in
	}
	if in.NodeSizeFamily != nil {
		in, out := &in.NodeSizeFamily, &out.NodeSizeFamily
		*out = new(string)
		**out = **in
	}
	if in.SessionLevelPackagesEnabled != nil {
		in, out := &in.SessionLevelPackagesEnabled, &out.SessionLevelPackagesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkConfig != nil {
		in, out := &in.SparkConfig, &out.SparkConfig
		*out = new(SparkConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkEventsFolder != nil {
		in, out := &in.SparkEventsFolder, &out.SparkEventsFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkLogFolder != nil {
		in, out := &in.SparkLogFolder, &out.SparkLogFolder
		*out = new(string)
		**out = **in
	}
	if in.SparkVersion != nil {
		in, out := &in.SparkVersion, &out.SparkVersion
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceID != nil {
		in, out := &in.SynapseWorkspaceID, &out.SynapseWorkspaceID
		*out = new(string)
		**out = **in
	}
	if in.SynapseWorkspaceIDRef != nil {
		in, out := &in.SynapseWorkspaceIDRef, &out.SynapseWorkspaceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SynapseWorkspaceIDSelector != nil {
		in, out := &in.SynapseWorkspaceIDSelector, &out.SynapseWorkspaceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolParameters.
func (in *SparkPoolParameters) DeepCopy() *SparkPoolParameters {
	if in == nil {
		return nil
	}
	out := new(SparkPoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolSpec) DeepCopyInto(out *SparkPoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolSpec.
func (in *SparkPoolSpec) DeepCopy() *SparkPoolSpec {
	if in == nil {
		return nil
	}
	out := new(SparkPoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkPoolStatus) DeepCopyInto(out *SparkPoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkPoolStatus.
func (in *SparkPoolStatus) DeepCopy() *SparkPoolStatus {
	if in == nil {
		return nil
	}
	out := new(SparkPoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Workspace) DeepCopyInto(out *Workspace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Workspace.
func (in *Workspace) DeepCopy() *Workspace {
	if in == nil {
		return nil
	}
	out := new(Workspace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Workspace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceInitParameters) DeepCopyInto(out *WorkspaceInitParameters) {
	*out = *in
	if in.AADAdmin != nil {
		in, out := &in.AADAdmin, &out.AADAdmin
		*out = new(AADAdminInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureDevopsRepo != nil {
		in, out := &in.AzureDevopsRepo, &out.AzureDevopsRepo
		*out = new(AzureDevopsRepoInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureadAuthenticationOnly != nil {
		in, out := &in.AzureadAuthenticationOnly, &out.AzureadAuthenticationOnly
		*out = new(bool)
		**out = **in
	}
	if in.ComputeSubnetID != nil {
		in, out := &in.ComputeSubnetID, &out.ComputeSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ComputeSubnetIDRef != nil {
		in, out := &in.ComputeSubnetIDRef, &out.ComputeSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ComputeSubnetIDSelector != nil {
		in, out := &in.ComputeSubnetIDSelector, &out.ComputeSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CustomerManagedKey != nil {
		in, out := &in.CustomerManagedKey, &out.CustomerManagedKey
		*out = new(CustomerManagedKeyInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataExfiltrationProtectionEnabled != nil {
		in, out := &in.DataExfiltrationProtectionEnabled, &out.DataExfiltrationProtectionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GithubRepo != nil {
		in, out := &in.GithubRepo, &out.GithubRepo
		*out = new(GithubRepoInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkingAllowedForAADTenantIds != nil {
		in, out := &in.LinkingAllowedForAADTenantIds, &out.LinkingAllowedForAADTenantIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupName != nil {
		in, out := &in.ManagedResourceGroupName, &out.ManagedResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupNameRef != nil {
		in, out := &in.ManagedResourceGroupNameRef, &out.ManagedResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ManagedResourceGroupNameSelector != nil {
		in, out := &in.ManagedResourceGroupNameSelector, &out.ManagedResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ManagedVirtualNetworkEnabled != nil {
		in, out := &in.ManagedVirtualNetworkEnabled, &out.ManagedVirtualNetworkEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PublicNetworkAccessEnabled != nil {
		in, out := &in.PublicNetworkAccessEnabled, &out.PublicNetworkAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PurviewID != nil {
		in, out := &in.PurviewID, &out.PurviewID
		*out = new(string)
		**out = **in
	}
	if in.SQLAADAdmin != nil {
		in, out := &in.SQLAADAdmin, &out.SQLAADAdmin
		*out = new(SQLAADAdminInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLAdministratorLogin != nil {
		in, out := &in.SQLAdministratorLogin, &out.SQLAdministratorLogin
		*out = new(string)
		**out = **in
	}
	if in.SQLAdministratorLoginPasswordSecretRef != nil {
		in, out := &in.SQLAdministratorLoginPasswordSecretRef, &out.SQLAdministratorLoginPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SQLIdentityControlEnabled != nil {
		in, out := &in.SQLIdentityControlEnabled, &out.SQLIdentityControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StorageDataLakeGen2FileSystemID != nil {
		in, out := &in.StorageDataLakeGen2FileSystemID, &out.StorageDataLakeGen2FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.StorageDataLakeGen2FileSystemIDRef != nil {
		in, out := &in.StorageDataLakeGen2FileSystemIDRef, &out.StorageDataLakeGen2FileSystemIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageDataLakeGen2FileSystemIDSelector != nil {
		in, out := &in.StorageDataLakeGen2FileSystemIDSelector, &out.StorageDataLakeGen2FileSystemIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceInitParameters.
func (in *WorkspaceInitParameters) DeepCopy() *WorkspaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkspaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceList) DeepCopyInto(out *WorkspaceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Workspace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceList.
func (in *WorkspaceList) DeepCopy() *WorkspaceList {
	if in == nil {
		return nil
	}
	out := new(WorkspaceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceObservation) DeepCopyInto(out *WorkspaceObservation) {
	*out = *in
	if in.AADAdmin != nil {
		in, out := &in.AADAdmin, &out.AADAdmin
		*out = new(AADAdminObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureDevopsRepo != nil {
		in, out := &in.AzureDevopsRepo, &out.AzureDevopsRepo
		*out = new(AzureDevopsRepoObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureadAuthenticationOnly != nil {
		in, out := &in.AzureadAuthenticationOnly, &out.AzureadAuthenticationOnly
		*out = new(bool)
		**out = **in
	}
	if in.ComputeSubnetID != nil {
		in, out := &in.ComputeSubnetID, &out.ComputeSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ConnectivityEndpoints != nil {
		in, out := &in.ConnectivityEndpoints, &out.ConnectivityEndpoints
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomerManagedKey != nil {
		in, out := &in.CustomerManagedKey, &out.CustomerManagedKey
		*out = new(CustomerManagedKeyObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.DataExfiltrationProtectionEnabled != nil {
		in, out := &in.DataExfiltrationProtectionEnabled, &out.DataExfiltrationProtectionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GithubRepo != nil {
		in, out := &in.GithubRepo, &out.GithubRepo
		*out = new(GithubRepoObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkingAllowedForAADTenantIds != nil {
		in, out := &in.LinkingAllowedForAADTenantIds, &out.LinkingAllowedForAADTenantIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupName != nil {
		in, out := &in.ManagedResourceGroupName, &out.ManagedResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ManagedVirtualNetworkEnabled != nil {
		in, out := &in.ManagedVirtualNetworkEnabled, &out.ManagedVirtualNetworkEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PublicNetworkAccessEnabled != nil {
		in, out := &in.PublicNetworkAccessEnabled, &out.PublicNetworkAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PurviewID != nil {
		in, out := &in.PurviewID, &out.PurviewID
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.SQLAADAdmin != nil {
		in, out := &in.SQLAADAdmin, &out.SQLAADAdmin
		*out = new(SQLAADAdminObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLAdministratorLogin != nil {
		in, out := &in.SQLAdministratorLogin, &out.SQLAdministratorLogin
		*out = new(string)
		**out = **in
	}
	if in.SQLIdentityControlEnabled != nil {
		in, out := &in.SQLIdentityControlEnabled, &out.SQLIdentityControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StorageDataLakeGen2FileSystemID != nil {
		in, out := &in.StorageDataLakeGen2FileSystemID, &out.StorageDataLakeGen2FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceObservation.
func (in *WorkspaceObservation) DeepCopy() *WorkspaceObservation {
	if in == nil {
		return nil
	}
	out := new(WorkspaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceParameters) DeepCopyInto(out *WorkspaceParameters) {
	*out = *in
	if in.AADAdmin != nil {
		in, out := &in.AADAdmin, &out.AADAdmin
		*out = new(AADAdminParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureDevopsRepo != nil {
		in, out := &in.AzureDevopsRepo, &out.AzureDevopsRepo
		*out = new(AzureDevopsRepoParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureadAuthenticationOnly != nil {
		in, out := &in.AzureadAuthenticationOnly, &out.AzureadAuthenticationOnly
		*out = new(bool)
		**out = **in
	}
	if in.ComputeSubnetID != nil {
		in, out := &in.ComputeSubnetID, &out.ComputeSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ComputeSubnetIDRef != nil {
		in, out := &in.ComputeSubnetIDRef, &out.ComputeSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ComputeSubnetIDSelector != nil {
		in, out := &in.ComputeSubnetIDSelector, &out.ComputeSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CustomerManagedKey != nil {
		in, out := &in.CustomerManagedKey, &out.CustomerManagedKey
		*out = new(CustomerManagedKeyParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataExfiltrationProtectionEnabled != nil {
		in, out := &in.DataExfiltrationProtectionEnabled, &out.DataExfiltrationProtectionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GithubRepo != nil {
		in, out := &in.GithubRepo, &out.GithubRepo
		*out = new(GithubRepoParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkingAllowedForAADTenantIds != nil {
		in, out := &in.LinkingAllowedForAADTenantIds, &out.LinkingAllowedForAADTenantIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupName != nil {
		in, out := &in.ManagedResourceGroupName, &out.ManagedResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ManagedResourceGroupNameRef != nil {
		in, out := &in.ManagedResourceGroupNameRef, &out.ManagedResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ManagedResourceGroupNameSelector != nil {
		in, out := &in.ManagedResourceGroupNameSelector, &out.ManagedResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ManagedVirtualNetworkEnabled != nil {
		in, out := &in.ManagedVirtualNetworkEnabled, &out.ManagedVirtualNetworkEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PublicNetworkAccessEnabled != nil {
		in, out := &in.PublicNetworkAccessEnabled, &out.PublicNetworkAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PurviewID != nil {
		in, out := &in.PurviewID, &out.PurviewID
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupNameRef != nil {
		in, out := &in.ResourceGroupNameRef, &out.ResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupNameSelector != nil {
		in, out := &in.ResourceGroupNameSelector, &out.ResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLAADAdmin != nil {
		in, out := &in.SQLAADAdmin, &out.SQLAADAdmin
		*out = new(SQLAADAdminParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLAdministratorLogin != nil {
		in, out := &in.SQLAdministratorLogin, &out.SQLAdministratorLogin
		*out = new(string)
		**out = **in
	}
	if in.SQLAdministratorLoginPasswordSecretRef != nil {
		in, out := &in.SQLAdministratorLoginPasswordSecretRef, &out.SQLAdministratorLoginPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SQLIdentityControlEnabled != nil {
		in, out := &in.SQLIdentityControlEnabled, &out.SQLIdentityControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StorageDataLakeGen2FileSystemID != nil {
		in, out := &in.StorageDataLakeGen2FileSystemID, &out.StorageDataLakeGen2FileSystemID
		*out = new(string)
		**out = **in
	}
	if in.StorageDataLakeGen2FileSystemIDRef != nil {
		in, out := &in.StorageDataLakeGen2FileSystemIDRef, &out.StorageDataLakeGen2FileSystemIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageDataLakeGen2FileSystemIDSelector != nil {
		in, out := &in.StorageDataLakeGen2FileSystemIDSelector, &out.StorageDataLakeGen2FileSystemIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceParameters.
func (in *WorkspaceParameters) DeepCopy() *WorkspaceParameters {
	if in == nil {
		return nil
	}
	out := new(WorkspaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceSpec) DeepCopyInto(out *WorkspaceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceSpec.
func (in *WorkspaceSpec) DeepCopy() *WorkspaceSpec {
	if in == nil {
		return nil
	}
	out := new(WorkspaceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceStatus) DeepCopyInto(out *WorkspaceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceStatus.
func (in *WorkspaceStatus) DeepCopy() *WorkspaceStatus {
	if in == nil {
		return nil
	}
	out := new(WorkspaceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessment) DeepCopyInto(out *WorkspaceVulnerabilityAssessment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessment.
func (in *WorkspaceVulnerabilityAssessment) DeepCopy() *WorkspaceVulnerabilityAssessment {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceVulnerabilityAssessment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentInitParameters) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentInitParameters) {
	*out = *in
	if in.RecurringScans != nil {
		in, out := &in.RecurringScans, &out.RecurringScans
		*out = new(RecurringScansInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageAccountAccessKeySecretRef != nil {
		in, out := &in.StorageAccountAccessKeySecretRef, &out.StorageAccountAccessKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.StorageContainerPath != nil {
		in, out := &in.StorageContainerPath, &out.StorageContainerPath
		*out = new(string)
		**out = **in
	}
	if in.StorageContainerSASKeySecretRef != nil {
		in, out := &in.StorageContainerSASKeySecretRef, &out.StorageContainerSASKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.WorkspaceSecurityAlertPolicyID != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyID, &out.WorkspaceSecurityAlertPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkspaceSecurityAlertPolicyIDRef != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyIDRef, &out.WorkspaceSecurityAlertPolicyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkspaceSecurityAlertPolicyIDSelector != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyIDSelector, &out.WorkspaceSecurityAlertPolicyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentInitParameters.
func (in *WorkspaceVulnerabilityAssessmentInitParameters) DeepCopy() *WorkspaceVulnerabilityAssessmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentList) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]WorkspaceVulnerabilityAssessment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentList.
func (in *WorkspaceVulnerabilityAssessmentList) DeepCopy() *WorkspaceVulnerabilityAssessmentList {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkspaceVulnerabilityAssessmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentObservation) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.RecurringScans != nil {
		in, out := &in.RecurringScans, &out.RecurringScans
		*out = new(RecurringScansObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageContainerPath != nil {
		in, out := &in.StorageContainerPath, &out.StorageContainerPath
		*out = new(string)
		**out = **in
	}
	if in.WorkspaceSecurityAlertPolicyID != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyID, &out.WorkspaceSecurityAlertPolicyID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentObservation.
func (in *WorkspaceVulnerabilityAssessmentObservation) DeepCopy() *WorkspaceVulnerabilityAssessmentObservation {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentParameters) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentParameters) {
	*out = *in
	if in.RecurringScans != nil {
		in, out := &in.RecurringScans, &out.RecurringScans
		*out = new(RecurringScansParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageAccountAccessKeySecretRef != nil {
		in, out := &in.StorageAccountAccessKeySecretRef, &out.StorageAccountAccessKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.StorageContainerPath != nil {
		in, out := &in.StorageContainerPath, &out.StorageContainerPath
		*out = new(string)
		**out = **in
	}
	if in.StorageContainerSASKeySecretRef != nil {
		in, out := &in.StorageContainerSASKeySecretRef, &out.StorageContainerSASKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.WorkspaceSecurityAlertPolicyID != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyID, &out.WorkspaceSecurityAlertPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkspaceSecurityAlertPolicyIDRef != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyIDRef, &out.WorkspaceSecurityAlertPolicyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkspaceSecurityAlertPolicyIDSelector != nil {
		in, out := &in.WorkspaceSecurityAlertPolicyIDSelector, &out.WorkspaceSecurityAlertPolicyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentParameters.
func (in *WorkspaceVulnerabilityAssessmentParameters) DeepCopy() *WorkspaceVulnerabilityAssessmentParameters {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentSpec) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentSpec.
func (in *WorkspaceVulnerabilityAssessmentSpec) DeepCopy() *WorkspaceVulnerabilityAssessmentSpec {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkspaceVulnerabilityAssessmentStatus) DeepCopyInto(out *WorkspaceVulnerabilityAssessmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkspaceVulnerabilityAssessmentStatus.
func (in *WorkspaceVulnerabilityAssessmentStatus) DeepCopy() *WorkspaceVulnerabilityAssessmentStatus {
	if in == nil {
		return nil
	}
	out := new(WorkspaceVulnerabilityAssessmentStatus)
	in.DeepCopyInto(out)
	return out
}
