/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppActionCustomObservation struct {

	// The ID of the Action within the Logic App Workflow.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppActionCustomParameters struct {

	// Specifies the JSON Blob defining the Body of this Custom Action.
	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/logic/v1beta1.AppWorkflow
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	LogicAppID *string `json:"logicAppId,omitempty" tf:"logic_app_id,omitempty"`

	// Reference to a AppWorkflow in logic to populate logicAppId.
	// +kubebuilder:validation:Optional
	LogicAppIDRef *v1.Reference `json:"logicAppIdRef,omitempty" tf:"-"`

	// Selector for a AppWorkflow in logic to populate logicAppId.
	// +kubebuilder:validation:Optional
	LogicAppIDSelector *v1.Selector `json:"logicAppIdSelector,omitempty" tf:"-"`
}

// AppActionCustomSpec defines the desired state of AppActionCustom
type AppActionCustomSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppActionCustomParameters `json:"forProvider"`
}

// AppActionCustomStatus defines the observed state of AppActionCustom.
type AppActionCustomStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppActionCustomObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppActionCustom is the Schema for the AppActionCustoms API. Manages a Custom Action within a Logic App Workflow
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppActionCustom struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppActionCustomSpec   `json:"spec"`
	Status            AppActionCustomStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppActionCustomList contains a list of AppActionCustoms
type AppActionCustomList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppActionCustom `json:"items"`
}

// Repository type metadata.
var (
	AppActionCustom_Kind             = "AppActionCustom"
	AppActionCustom_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppActionCustom_Kind}.String()
	AppActionCustom_KindAPIVersion   = AppActionCustom_Kind + "." + CRDGroupVersion.String()
	AppActionCustom_GroupVersionKind = CRDGroupVersion.WithKind(AppActionCustom_Kind)
)

func init() {
	SchemeBuilder.Register(&AppActionCustom{}, &AppActionCustomList{})
}
