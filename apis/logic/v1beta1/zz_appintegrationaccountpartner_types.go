/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppIntegrationAccountPartnerObservation struct {

	// The ID of the Logic App Integration Account Partner.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppIntegrationAccountPartnerParameters struct {

	// A business_identity block as documented below.
	// +kubebuilder:validation:Required
	BusinessIdentity []BusinessIdentityParameters `json:"businessIdentity" tf:"business_identity,omitempty"`

	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/logic/v1beta1.AppIntegrationAccount
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	IntegrationAccountName *string `json:"integrationAccountName,omitempty" tf:"integration_account_name,omitempty"`

	// Reference to a AppIntegrationAccount in logic to populate integrationAccountName.
	// +kubebuilder:validation:Optional
	IntegrationAccountNameRef *v1.Reference `json:"integrationAccountNameRef,omitempty" tf:"-"`

	// Selector for a AppIntegrationAccount in logic to populate integrationAccountName.
	// +kubebuilder:validation:Optional
	IntegrationAccountNameSelector *v1.Selector `json:"integrationAccountNameSelector,omitempty" tf:"-"`

	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

type BusinessIdentityObservation struct {
}

type BusinessIdentityParameters struct {

	// The authenticating body that provides unique business identities to organizations.
	// +kubebuilder:validation:Required
	Qualifier *string `json:"qualifier" tf:"qualifier,omitempty"`

	// The value that identifies the documents that your logic apps receive.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AppIntegrationAccountPartnerSpec defines the desired state of AppIntegrationAccountPartner
type AppIntegrationAccountPartnerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppIntegrationAccountPartnerParameters `json:"forProvider"`
}

// AppIntegrationAccountPartnerStatus defines the observed state of AppIntegrationAccountPartner.
type AppIntegrationAccountPartnerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppIntegrationAccountPartnerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppIntegrationAccountPartner is the Schema for the AppIntegrationAccountPartners API. Manages a Logic App Integration Account Partner.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppIntegrationAccountPartner struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppIntegrationAccountPartnerSpec   `json:"spec"`
	Status            AppIntegrationAccountPartnerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppIntegrationAccountPartnerList contains a list of AppIntegrationAccountPartners
type AppIntegrationAccountPartnerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppIntegrationAccountPartner `json:"items"`
}

// Repository type metadata.
var (
	AppIntegrationAccountPartner_Kind             = "AppIntegrationAccountPartner"
	AppIntegrationAccountPartner_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppIntegrationAccountPartner_Kind}.String()
	AppIntegrationAccountPartner_KindAPIVersion   = AppIntegrationAccountPartner_Kind + "." + CRDGroupVersion.String()
	AppIntegrationAccountPartner_GroupVersionKind = CRDGroupVersion.WithKind(AppIntegrationAccountPartner_Kind)
)

func init() {
	SchemeBuilder.Register(&AppIntegrationAccountPartner{}, &AppIntegrationAccountPartnerList{})
}
