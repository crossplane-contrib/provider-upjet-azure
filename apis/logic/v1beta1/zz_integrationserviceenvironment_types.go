// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IntegrationServiceEnvironmentInitParameters struct {

	// The type of access endpoint to use for the Integration Service Environment. Possible Values are Internal and External. Changing this forces a new Integration Service Environment to be created.
	AccessEndpointType *string `json:"accessEndpointType,omitempty" tf:"access_endpoint_type,omitempty"`

	// The Azure Region where the Integration Service Environment should exist. Changing this forces a new Integration Service Environment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The SKU name and capacity of the Integration Service Environment. Possible values are Developer_0, Premium_0, Premium_1, Premium_2, Premium_3, Premium_4, Premium_5, Premium_6, Premium_7, Premium_8, Premium_9 and Premium_10.
	SkuName *string `json:"skuName,omitempty" tf:"sku_name,omitempty"`

	// A mapping of tags which should be assigned to the Integration Service Environment.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IntegrationServiceEnvironmentObservation struct {

	// The type of access endpoint to use for the Integration Service Environment. Possible Values are Internal and External. Changing this forces a new Integration Service Environment to be created.
	AccessEndpointType *string `json:"accessEndpointType,omitempty" tf:"access_endpoint_type,omitempty"`

	// The list of access endpoint IP addresses of connector.
	ConnectorEndpointIPAddresses []*string `json:"connectorEndpointIpAddresses,omitempty" tf:"connector_endpoint_ip_addresses,omitempty"`

	// The list of outgoing IP addresses of connector.
	ConnectorOutboundIPAddresses []*string `json:"connectorOutboundIpAddresses,omitempty" tf:"connector_outbound_ip_addresses,omitempty"`

	// The ID of the Integration Service Environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Azure Region where the Integration Service Environment should exist. Changing this forces a new Integration Service Environment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the Resource Group where the Integration Service Environment should exist. Changing this forces a new Integration Service Environment to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The SKU name and capacity of the Integration Service Environment. Possible values are Developer_0, Premium_0, Premium_1, Premium_2, Premium_3, Premium_4, Premium_5, Premium_6, Premium_7, Premium_8, Premium_9 and Premium_10.
	SkuName *string `json:"skuName,omitempty" tf:"sku_name,omitempty"`

	// A mapping of tags which should be assigned to the Integration Service Environment.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of virtual network subnet ids to be used by Integration Service Environment. Exactly four distinct ids to /27 subnets must be provided. Changing this forces a new Integration Service Environment to be created.
	VirtualNetworkSubnetIds []*string `json:"virtualNetworkSubnetIds,omitempty" tf:"virtual_network_subnet_ids,omitempty"`

	// The list of access endpoint IP addresses of workflow.
	WorkflowEndpointIPAddresses []*string `json:"workflowEndpointIpAddresses,omitempty" tf:"workflow_endpoint_ip_addresses,omitempty"`

	// The list of outgoing IP addresses of workflow.
	WorkflowOutboundIPAddresses []*string `json:"workflowOutboundIpAddresses,omitempty" tf:"workflow_outbound_ip_addresses,omitempty"`
}

type IntegrationServiceEnvironmentParameters struct {

	// The type of access endpoint to use for the Integration Service Environment. Possible Values are Internal and External. Changing this forces a new Integration Service Environment to be created.
	// +kubebuilder:validation:Optional
	AccessEndpointType *string `json:"accessEndpointType,omitempty" tf:"access_endpoint_type,omitempty"`

	// The Azure Region where the Integration Service Environment should exist. Changing this forces a new Integration Service Environment to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the Resource Group where the Integration Service Environment should exist. Changing this forces a new Integration Service Environment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The SKU name and capacity of the Integration Service Environment. Possible values are Developer_0, Premium_0, Premium_1, Premium_2, Premium_3, Premium_4, Premium_5, Premium_6, Premium_7, Premium_8, Premium_9 and Premium_10.
	// +kubebuilder:validation:Optional
	SkuName *string `json:"skuName,omitempty" tf:"sku_name,omitempty"`

	// A mapping of tags which should be assigned to the Integration Service Environment.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of virtual network subnet ids to be used by Integration Service Environment. Exactly four distinct ids to /27 subnets must be provided. Changing this forces a new Integration Service Environment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id",true)
	// +kubebuilder:validation:Optional
	VirtualNetworkSubnetIds []*string `json:"virtualNetworkSubnetIds,omitempty" tf:"virtual_network_subnet_ids,omitempty"`

	// References to Subnet in network to populate virtualNetworkSubnetIds.
	// +kubebuilder:validation:Optional
	VirtualNetworkSubnetIdsRefs []v1.Reference `json:"virtualNetworkSubnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in network to populate virtualNetworkSubnetIds.
	// +kubebuilder:validation:Optional
	VirtualNetworkSubnetIdsSelector *v1.Selector `json:"virtualNetworkSubnetIdsSelector,omitempty" tf:"-"`
}

// IntegrationServiceEnvironmentSpec defines the desired state of IntegrationServiceEnvironment
type IntegrationServiceEnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IntegrationServiceEnvironmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IntegrationServiceEnvironmentInitParameters `json:"initProvider,omitempty"`
}

// IntegrationServiceEnvironmentStatus defines the observed state of IntegrationServiceEnvironment.
type IntegrationServiceEnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IntegrationServiceEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationServiceEnvironment is the Schema for the IntegrationServiceEnvironments API. Manages private and isolated Logic App instances within an Azure virtual network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IntegrationServiceEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessEndpointType) || (has(self.initProvider) && has(self.initProvider.accessEndpointType))",message="spec.forProvider.accessEndpointType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   IntegrationServiceEnvironmentSpec   `json:"spec"`
	Status IntegrationServiceEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationServiceEnvironmentList contains a list of IntegrationServiceEnvironments
type IntegrationServiceEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationServiceEnvironment `json:"items"`
}

// Repository type metadata.
var (
	IntegrationServiceEnvironment_Kind             = "IntegrationServiceEnvironment"
	IntegrationServiceEnvironment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IntegrationServiceEnvironment_Kind}.String()
	IntegrationServiceEnvironment_KindAPIVersion   = IntegrationServiceEnvironment_Kind + "." + CRDGroupVersion.String()
	IntegrationServiceEnvironment_GroupVersionKind = CRDGroupVersion.WithKind(IntegrationServiceEnvironment_Kind)
)

func init() {
	SchemeBuilder.Register(&IntegrationServiceEnvironment{}, &IntegrationServiceEnvironmentList{})
}
