// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AccessConnector) ResolveReferences( // ResolveReferences of this AccessConnector.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Workspace.
func (mg *Workspace) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CustomParameters); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetNameRef,
				Selector:     mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetName")
		}
		mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomParameters[i3].PrivateSubnetNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CustomParameters); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetNameRef,
				Selector:     mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetName")
		}
		mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomParameters[i3].PublicSubnetNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ManagedResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ManagedResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ManagedResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagedResourceGroupName")
	}
	mg.Spec.ForProvider.ManagedResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagedResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.CustomParameters); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetNameRef,
				Selector:     mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetName")
		}
		mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.CustomParameters[i3].PrivateSubnetNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CustomParameters); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetNameRef,
				Selector:     mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetName")
		}
		mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.CustomParameters[i3].PublicSubnetNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ManagedResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ManagedResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ManagedResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ManagedResourceGroupName")
	}
	mg.Spec.InitProvider.ManagedResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ManagedResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceCustomerManagedKey.
func (mg *WorkspaceCustomerManagedKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultKeyID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.KeyVaultKeyIDRef,
			Selector:     mg.Spec.ForProvider.KeyVaultKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultKeyID")
	}
	mg.Spec.ForProvider.KeyVaultKeyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkspaceID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceID")
	}
	mg.Spec.ForProvider.WorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultKeyID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.KeyVaultKeyIDRef,
			Selector:     mg.Spec.InitProvider.KeyVaultKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultKeyID")
	}
	mg.Spec.InitProvider.KeyVaultKeyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyVaultKeyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceRootDbfsCustomerManagedKey.
func (mg *WorkspaceRootDbfsCustomerManagedKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultKeyID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.KeyVaultKeyIDRef,
			Selector:     mg.Spec.ForProvider.KeyVaultKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultKeyID")
	}
	mg.Spec.ForProvider.KeyVaultKeyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultKeyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceID")
	}
	mg.Spec.ForProvider.WorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Key", "KeyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultKeyID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.KeyVaultKeyIDRef,
			Selector:     mg.Spec.InitProvider.KeyVaultKeyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultKeyID")
	}
	mg.Spec.InitProvider.KeyVaultKeyID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyVaultKeyIDRef = rsp.ResolvedReference

	return nil
}
