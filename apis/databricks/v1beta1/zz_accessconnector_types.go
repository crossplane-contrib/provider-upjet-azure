/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessConnectorObservation struct {

	// The ID of the Databricks Access Connector in the Azure management plane.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Required
	Identity []IdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`
}

type AccessConnectorParameters struct {

	// An identity block as defined below.
	// +kubebuilder:validation:Required
	Identity []IdentityParameters `json:"identity" tf:"identity,omitempty"`

	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IdentityObservation struct {

	// The object id of an existing principal. If not specified, a new system-assigned managed identity is created.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The tenant id in which the principal resides.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type IdentityParameters struct {

	// The type of identity to use for this Access Connector. SystemAssigned is the only possible value.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// AccessConnectorSpec defines the desired state of AccessConnector
type AccessConnectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessConnectorParameters `json:"forProvider"`
}

// AccessConnectorStatus defines the observed state of AccessConnector.
type AccessConnectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessConnectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessConnector is the Schema for the AccessConnectors API. Manages a Databricks Access Connector
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AccessConnector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessConnectorSpec   `json:"spec"`
	Status            AccessConnectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessConnectorList contains a list of AccessConnectors
type AccessConnectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessConnector `json:"items"`
}

// Repository type metadata.
var (
	AccessConnector_Kind             = "AccessConnector"
	AccessConnector_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessConnector_Kind}.String()
	AccessConnector_KindAPIVersion   = AccessConnector_Kind + "." + CRDGroupVersion.String()
	AccessConnector_GroupVersionKind = CRDGroupVersion.WithKind(AccessConnector_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessConnector{}, &AccessConnectorList{})
}
