// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	rconfig "github.com/upbound/provider-azure/apis/cluster/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *BackupInstanceBlobStorage) ResolveReferences( // ResolveReferences of this BackupInstanceBlobStorage.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyBlobStorage", "BackupPolicyBlobStorageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicyID")
	}
	mg.Spec.ForProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.StorageAccountIDRef,
			Selector:     mg.Spec.ForProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountID")
	}
	mg.Spec.ForProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyBlobStorage", "BackupPolicyBlobStorageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicyID")
	}
	mg.Spec.InitProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageAccountID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.StorageAccountIDRef,
			Selector:     mg.Spec.InitProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountID")
	}
	mg.Spec.InitProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupInstanceDisk.
func (mg *BackupInstanceDisk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupPolicyDisk", "BackupPolicyDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicyID")
	}
	mg.Spec.ForProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "ManagedDisk", "ManagedDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DiskID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DiskIDRef,
			Selector:     mg.Spec.ForProvider.DiskIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DiskID")
	}
	mg.Spec.ForProvider.DiskID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnapshotResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SnapshotResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.SnapshotResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnapshotResourceGroupName")
	}
	mg.Spec.ForProvider.SnapshotResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnapshotResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupPolicyDisk", "BackupPolicyDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicyID")
	}
	mg.Spec.InitProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "ManagedDisk", "ManagedDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DiskID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DiskIDRef,
			Selector:     mg.Spec.InitProvider.DiskIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DiskID")
	}
	mg.Spec.InitProvider.DiskID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnapshotResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SnapshotResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.SnapshotResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SnapshotResourceGroupName")
	}
	mg.Spec.InitProvider.SnapshotResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnapshotResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupInstanceKubernetesCluster.
func (mg *BackupInstanceKubernetesCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyKubernetesCluster", "BackupPolicyKubernetesClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicyID")
	}
	mg.Spec.ForProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerservice.azure.upbound.io", "v1beta2", "KubernetesCluster", "KubernetesClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KubernetesClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.KubernetesClusterIDRef,
			Selector:     mg.Spec.ForProvider.KubernetesClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KubernetesClusterID")
	}
	mg.Spec.ForProvider.KubernetesClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KubernetesClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnapshotResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SnapshotResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.SnapshotResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnapshotResourceGroupName")
	}
	mg.Spec.ForProvider.SnapshotResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnapshotResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyKubernetesCluster", "BackupPolicyKubernetesClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicyID")
	}
	mg.Spec.InitProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerservice.azure.upbound.io", "v1beta2", "KubernetesCluster", "KubernetesClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KubernetesClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.KubernetesClusterIDRef,
			Selector:     mg.Spec.InitProvider.KubernetesClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KubernetesClusterID")
	}
	mg.Spec.InitProvider.KubernetesClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KubernetesClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnapshotResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SnapshotResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.SnapshotResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SnapshotResourceGroupName")
	}
	mg.Spec.InitProvider.SnapshotResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnapshotResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupInstancePostgreSQL.
func (mg *BackupInstancePostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupPolicyPostgreSQL", "BackupPolicyPostgreSQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicyID")
	}
	mg.Spec.ForProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta1", "Secret", "SecretList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretID),
			Extract:      resource.ExtractParamPath("versionless_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretIDRef,
			Selector:     mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretID")
	}
	mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseCredentialKeyVaultSecretIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbforpostgresql.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DatabaseIDRef,
			Selector:     mg.Spec.ForProvider.DatabaseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseID")
	}
	mg.Spec.ForProvider.DatabaseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupPolicyPostgreSQL", "BackupPolicyPostgreSQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicyID")
	}
	mg.Spec.InitProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta1", "Secret", "SecretList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretID),
			Extract:      resource.ExtractParamPath("versionless_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretIDRef,
			Selector:     mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretID")
	}
	mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatabaseCredentialKeyVaultSecretIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbforpostgresql.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatabaseID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DatabaseIDRef,
			Selector:     mg.Spec.InitProvider.DatabaseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatabaseID")
	}
	mg.Spec.InitProvider.DatabaseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatabaseIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupInstancePostgreSQLFlexibleServer.
func (mg *BackupInstancePostgreSQLFlexibleServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyPostgreSQLFlexibleServer", "BackupPolicyPostgreSQLFlexibleServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicyID")
	}
	mg.Spec.ForProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbforpostgresql.azure.upbound.io", "v1beta2", "FlexibleServer", "FlexibleServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ServerIDRef,
			Selector:     mg.Spec.ForProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServerID")
	}
	mg.Spec.ForProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupPolicyPostgreSQLFlexibleServer", "BackupPolicyPostgreSQLFlexibleServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicyID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BackupPolicyIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicyID")
	}
	mg.Spec.InitProvider.BackupPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackupPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbforpostgresql.azure.upbound.io", "v1beta2", "FlexibleServer", "FlexibleServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServerID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ServerIDRef,
			Selector:     mg.Spec.InitProvider.ServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServerID")
	}
	mg.Spec.InitProvider.ServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupPolicyBlobStorage.
func (mg *BackupPolicyBlobStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      rconfig.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupPolicyDisk.
func (mg *BackupPolicyDisk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      rconfig.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupPolicyKubernetesCluster.
func (mg *BackupPolicyKubernetesCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultNameRef,
			Selector:     mg.Spec.ForProvider.VaultNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultName")
	}
	mg.Spec.ForProvider.VaultName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupPolicyPostgreSQL.
func (mg *BackupPolicyPostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta1", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultNameRef,
			Selector:     mg.Spec.ForProvider.VaultNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultName")
	}
	mg.Spec.ForProvider.VaultName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupPolicyPostgreSQLFlexibleServer.
func (mg *BackupPolicyPostgreSQLFlexibleServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dataprotection.azure.upbound.io", "v1beta2", "BackupVault", "BackupVaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VaultID),
			Extract:      rconfig.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VaultIDRef,
			Selector:     mg.Spec.ForProvider.VaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VaultID")
	}
	mg.Spec.ForProvider.VaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VaultIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackupVault.
func (mg *BackupVault) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ResourceGuard.
func (mg *ResourceGuard) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
