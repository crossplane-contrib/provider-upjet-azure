// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type PartnerAuthorizationInitParameters struct {

	// Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: "2025-02-04T00:00:00Z".
	AuthorizationExpirationTimeInUtc *string `json:"authorizationExpirationTimeInUtc,omitempty" tf:"authorization_expiration_time_in_utc,omitempty"`

	// The partner name.
	PartnerName *string `json:"partnerName,omitempty" tf:"partner_name,omitempty"`

	// The immutable id of the corresponding partner registration.
	PartnerRegistrationID *string `json:"partnerRegistrationId,omitempty" tf:"partner_registration_id,omitempty"`
}

type PartnerAuthorizationObservation struct {

	// Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: "2025-02-04T00:00:00Z".
	AuthorizationExpirationTimeInUtc *string `json:"authorizationExpirationTimeInUtc,omitempty" tf:"authorization_expiration_time_in_utc,omitempty"`

	// The partner name.
	PartnerName *string `json:"partnerName,omitempty" tf:"partner_name,omitempty"`

	// The immutable id of the corresponding partner registration.
	PartnerRegistrationID *string `json:"partnerRegistrationId,omitempty" tf:"partner_registration_id,omitempty"`
}

type PartnerAuthorizationParameters struct {

	// Expiration time of the partner authorization. Value should be in RFC 3339 format in UTC time zone, for example: "2025-02-04T00:00:00Z".
	// +kubebuilder:validation:Optional
	AuthorizationExpirationTimeInUtc *string `json:"authorizationExpirationTimeInUtc,omitempty" tf:"authorization_expiration_time_in_utc,omitempty"`

	// The partner name.
	// +kubebuilder:validation:Optional
	PartnerName *string `json:"partnerName" tf:"partner_name,omitempty"`

	// The immutable id of the corresponding partner registration.
	// +kubebuilder:validation:Optional
	PartnerRegistrationID *string `json:"partnerRegistrationId" tf:"partner_registration_id,omitempty"`
}

type PartnerConfigurationInitParameters struct {

	// Time used to validate the authorization expiration time for each authorized partner. Defaults to 7.
	DefaultMaximumExpirationTimeInDays *float64 `json:"defaultMaximumExpirationTimeInDays,omitempty" tf:"default_maximum_expiration_time_in_days,omitempty"`

	// One or more partner_authorization blocks as defined below.
	PartnerAuthorization []PartnerAuthorizationInitParameters `json:"partnerAuthorization,omitempty" tf:"partner_authorization,omitempty"`

	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PartnerConfigurationObservation struct {

	// Time used to validate the authorization expiration time for each authorized partner. Defaults to 7.
	DefaultMaximumExpirationTimeInDays *float64 `json:"defaultMaximumExpirationTimeInDays,omitempty" tf:"default_maximum_expiration_time_in_days,omitempty"`

	// The ID of the Event Grid Partner Configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One or more partner_authorization blocks as defined below.
	PartnerAuthorization []PartnerAuthorizationObservation `json:"partnerAuthorization,omitempty" tf:"partner_authorization,omitempty"`

	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PartnerConfigurationParameters struct {

	// Time used to validate the authorization expiration time for each authorized partner. Defaults to 7.
	// +kubebuilder:validation:Optional
	DefaultMaximumExpirationTimeInDays *float64 `json:"defaultMaximumExpirationTimeInDays,omitempty" tf:"default_maximum_expiration_time_in_days,omitempty"`

	// One or more partner_authorization blocks as defined below.
	// +kubebuilder:validation:Optional
	PartnerAuthorization []PartnerAuthorizationParameters `json:"partnerAuthorization,omitempty" tf:"partner_authorization,omitempty"`

	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PartnerConfigurationSpec defines the desired state of PartnerConfiguration
type PartnerConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PartnerConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PartnerConfigurationInitParameters `json:"initProvider,omitempty"`
}

// PartnerConfigurationStatus defines the observed state of PartnerConfiguration.
type PartnerConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PartnerConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PartnerConfiguration is the Schema for the PartnerConfigurations API. Manages an Event Grid Partner Configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PartnerConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PartnerConfigurationSpec   `json:"spec"`
	Status            PartnerConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PartnerConfigurationList contains a list of PartnerConfigurations
type PartnerConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PartnerConfiguration `json:"items"`
}

// Repository type metadata.
var (
	PartnerConfiguration_Kind             = "PartnerConfiguration"
	PartnerConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PartnerConfiguration_Kind}.String()
	PartnerConfiguration_KindAPIVersion   = PartnerConfiguration_Kind + "." + CRDGroupVersion.String()
	PartnerConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(PartnerConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&PartnerConfiguration{}, &PartnerConfigurationList{})
}
