/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceDisasterRecoveryConfigObservation struct {

	// The Service Bus Namespace Disaster Recovery Config ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NamespaceDisasterRecoveryConfigParameters struct {

	// The Shared access policies used to access the connection string for the alias.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.NamespaceAuthorizationRule
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	AliasAuthorizationRuleID *string `json:"aliasAuthorizationRuleId,omitempty" tf:"alias_authorization_rule_id,omitempty"`

	// Reference to a NamespaceAuthorizationRule in servicebus to populate aliasAuthorizationRuleId.
	// +kubebuilder:validation:Optional
	AliasAuthorizationRuleIDRef *v1.Reference `json:"aliasAuthorizationRuleIdRef,omitempty" tf:"-"`

	// Selector for a NamespaceAuthorizationRule in servicebus to populate aliasAuthorizationRuleId.
	// +kubebuilder:validation:Optional
	AliasAuthorizationRuleIDSelector *v1.Selector `json:"aliasAuthorizationRuleIdSelector,omitempty" tf:"-"`

	// The ID of the Service Bus Namespace to replicate to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.ServiceBusNamespace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PartnerNamespaceID *string `json:"partnerNamespaceId,omitempty" tf:"partner_namespace_id,omitempty"`

	// Reference to a ServiceBusNamespace in servicebus to populate partnerNamespaceId.
	// +kubebuilder:validation:Optional
	PartnerNamespaceIDRef *v1.Reference `json:"partnerNamespaceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceBusNamespace in servicebus to populate partnerNamespaceId.
	// +kubebuilder:validation:Optional
	PartnerNamespaceIDSelector *v1.Selector `json:"partnerNamespaceIdSelector,omitempty" tf:"-"`

	// The ID of the primary Service Bus Namespace to replicate. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.ServiceBusNamespace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PrimaryNamespaceID *string `json:"primaryNamespaceId,omitempty" tf:"primary_namespace_id,omitempty"`

	// Reference to a ServiceBusNamespace in servicebus to populate primaryNamespaceId.
	// +kubebuilder:validation:Optional
	PrimaryNamespaceIDRef *v1.Reference `json:"primaryNamespaceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceBusNamespace in servicebus to populate primaryNamespaceId.
	// +kubebuilder:validation:Optional
	PrimaryNamespaceIDSelector *v1.Selector `json:"primaryNamespaceIdSelector,omitempty" tf:"-"`
}

// NamespaceDisasterRecoveryConfigSpec defines the desired state of NamespaceDisasterRecoveryConfig
type NamespaceDisasterRecoveryConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceDisasterRecoveryConfigParameters `json:"forProvider"`
}

// NamespaceDisasterRecoveryConfigStatus defines the observed state of NamespaceDisasterRecoveryConfig.
type NamespaceDisasterRecoveryConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceDisasterRecoveryConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceDisasterRecoveryConfig is the Schema for the NamespaceDisasterRecoveryConfigs API. Manages a Disaster Recovery Config for a Service Bus Namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NamespaceDisasterRecoveryConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceDisasterRecoveryConfigSpec   `json:"spec"`
	Status            NamespaceDisasterRecoveryConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceDisasterRecoveryConfigList contains a list of NamespaceDisasterRecoveryConfigs
type NamespaceDisasterRecoveryConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceDisasterRecoveryConfig `json:"items"`
}

// Repository type metadata.
var (
	NamespaceDisasterRecoveryConfig_Kind             = "NamespaceDisasterRecoveryConfig"
	NamespaceDisasterRecoveryConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceDisasterRecoveryConfig_Kind}.String()
	NamespaceDisasterRecoveryConfig_KindAPIVersion   = NamespaceDisasterRecoveryConfig_Kind + "." + CRDGroupVersion.String()
	NamespaceDisasterRecoveryConfig_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceDisasterRecoveryConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceDisasterRecoveryConfig{}, &NamespaceDisasterRecoveryConfigList{})
}
