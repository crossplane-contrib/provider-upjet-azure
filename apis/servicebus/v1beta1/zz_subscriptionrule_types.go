/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CorrelationFilterObservation struct {
}

type CorrelationFilterParameters struct {

	// Content type of the message.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Identifier of the correlation.
	// +kubebuilder:validation:Optional
	CorrelationID *string `json:"correlationId,omitempty" tf:"correlation_id,omitempty"`

	// Application specific label.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Identifier of the message.
	// +kubebuilder:validation:Optional
	MessageID *string `json:"messageId,omitempty" tf:"message_id,omitempty"`

	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// Address of the queue to reply to.
	// +kubebuilder:validation:Optional
	ReplyTo *string `json:"replyTo,omitempty" tf:"reply_to,omitempty"`

	// Session identifier to reply to.
	// +kubebuilder:validation:Optional
	ReplyToSessionID *string `json:"replyToSessionId,omitempty" tf:"reply_to_session_id,omitempty"`

	// Session identifier.
	// +kubebuilder:validation:Optional
	SessionID *string `json:"sessionId,omitempty" tf:"session_id,omitempty"`

	// Address to send to.
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type SubscriptionRuleObservation struct {

	// The ServiceBus Subscription Rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SQLFilterCompatibilityLevel *float64 `json:"sqlFilterCompatibilityLevel,omitempty" tf:"sql_filter_compatibility_level,omitempty"`
}

type SubscriptionRuleParameters struct {

	// Represents set of actions written in SQL language-based syntax that is performed against a BrokeredMessage.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A correlation_filter block as documented below to be evaluated against a BrokeredMessage. Required when filter_type is set to CorrelationFilter.
	// +kubebuilder:validation:Optional
	CorrelationFilter []CorrelationFilterParameters `json:"correlationFilter,omitempty" tf:"correlation_filter,omitempty"`

	// Type of filter to be applied to a BrokeredMessage. Possible values are SqlFilter and CorrelationFilter.
	// +kubebuilder:validation:Required
	FilterType *string `json:"filterType" tf:"filter_type,omitempty"`

	// Represents a filter written in SQL language-based syntax that to be evaluated against a BrokeredMessage. Required when filter_type is set to SqlFilter.
	// +kubebuilder:validation:Optional
	SQLFilter *string `json:"sqlFilter,omitempty" tf:"sql_filter,omitempty"`

	// The ID of the ServiceBus Subscription in which this Rule should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.Subscription
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Reference to a Subscription in servicebus to populate subscriptionId.
	// +kubebuilder:validation:Optional
	SubscriptionIDRef *v1.Reference `json:"subscriptionIdRef,omitempty" tf:"-"`

	// Selector for a Subscription in servicebus to populate subscriptionId.
	// +kubebuilder:validation:Optional
	SubscriptionIDSelector *v1.Selector `json:"subscriptionIdSelector,omitempty" tf:"-"`
}

// SubscriptionRuleSpec defines the desired state of SubscriptionRule
type SubscriptionRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionRuleParameters `json:"forProvider"`
}

// SubscriptionRuleStatus defines the observed state of SubscriptionRule.
type SubscriptionRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionRule is the Schema for the SubscriptionRules API. Manages a ServiceBus Subscription Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SubscriptionRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubscriptionRuleSpec   `json:"spec"`
	Status            SubscriptionRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionRuleList contains a list of SubscriptionRules
type SubscriptionRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionRule `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionRule_Kind             = "SubscriptionRule"
	SubscriptionRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionRule_Kind}.String()
	SubscriptionRule_KindAPIVersion   = SubscriptionRule_Kind + "." + CRDGroupVersion.String()
	SubscriptionRule_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionRule{}, &SubscriptionRuleList{})
}
