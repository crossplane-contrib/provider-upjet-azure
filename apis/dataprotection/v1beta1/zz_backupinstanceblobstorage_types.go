/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupInstanceBlobStorageObservation struct {

	// The ID of the Backup Instance Blob Storage.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupInstanceBlobStorageParameters struct {

	// The ID of the Backup Policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/dataprotection/v1beta1.BackupPolicyBlobStorage
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// Reference to a BackupPolicyBlobStorage in dataprotection to populate backupPolicyId.
	// +kubebuilder:validation:Optional
	BackupPolicyIDRef *v1.Reference `json:"backupPolicyIdRef,omitempty" tf:"-"`

	// Selector for a BackupPolicyBlobStorage in dataprotection to populate backupPolicyId.
	// +kubebuilder:validation:Optional
	BackupPolicyIDSelector *v1.Selector `json:"backupPolicyIdSelector,omitempty" tf:"-"`

	// The location of the source Storage Account. Changing this forces a new Backup Instance Blob Storage to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the source Storage Account. Changing this forces a new Backup Instance Blob Storage to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`

	// Reference to a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDRef *v1.Reference `json:"storageAccountIdRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDSelector *v1.Selector `json:"storageAccountIdSelector,omitempty" tf:"-"`

	// The ID of the Backup Vault within which the Backup Instance Blob Storage should exist. Changing this forces a new Backup Instance Blob Storage to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/dataprotection/v1beta1.BackupVault
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`

	// Reference to a BackupVault in dataprotection to populate vaultId.
	// +kubebuilder:validation:Optional
	VaultIDRef *v1.Reference `json:"vaultIdRef,omitempty" tf:"-"`

	// Selector for a BackupVault in dataprotection to populate vaultId.
	// +kubebuilder:validation:Optional
	VaultIDSelector *v1.Selector `json:"vaultIdSelector,omitempty" tf:"-"`
}

// BackupInstanceBlobStorageSpec defines the desired state of BackupInstanceBlobStorage
type BackupInstanceBlobStorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupInstanceBlobStorageParameters `json:"forProvider"`
}

// BackupInstanceBlobStorageStatus defines the observed state of BackupInstanceBlobStorage.
type BackupInstanceBlobStorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupInstanceBlobStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupInstanceBlobStorage is the Schema for the BackupInstanceBlobStorages API. Manages a Backup Instance Blob Storage.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BackupInstanceBlobStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupInstanceBlobStorageSpec   `json:"spec"`
	Status            BackupInstanceBlobStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupInstanceBlobStorageList contains a list of BackupInstanceBlobStorages
type BackupInstanceBlobStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupInstanceBlobStorage `json:"items"`
}

// Repository type metadata.
var (
	BackupInstanceBlobStorage_Kind             = "BackupInstanceBlobStorage"
	BackupInstanceBlobStorage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupInstanceBlobStorage_Kind}.String()
	BackupInstanceBlobStorage_KindAPIVersion   = BackupInstanceBlobStorage_Kind + "." + CRDGroupVersion.String()
	BackupInstanceBlobStorage_GroupVersionKind = CRDGroupVersion.WithKind(BackupInstanceBlobStorage_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupInstanceBlobStorage{}, &BackupInstanceBlobStorageList{})
}
