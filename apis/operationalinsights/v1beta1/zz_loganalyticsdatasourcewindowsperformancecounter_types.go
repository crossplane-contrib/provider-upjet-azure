// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogAnalyticsDataSourceWindowsPerformanceCounterInitParameters struct {

	// The friendly name of the performance counter.
	CounterName *string `json:"counterName,omitempty" tf:"counter_name,omitempty"`

	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a * will apply to all instances.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type LogAnalyticsDataSourceWindowsPerformanceCounterObservation struct {

	// The friendly name of the performance counter.
	CounterName *string `json:"counterName,omitempty" tf:"counter_name,omitempty"`

	// The ID of the Log Analytics Windows Performance Counter DataSource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a * will apply to all instances.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName *string `json:"workspaceName,omitempty" tf:"workspace_name,omitempty"`
}

type LogAnalyticsDataSourceWindowsPerformanceCounterParameters struct {

	// The friendly name of the performance counter.
	// +kubebuilder:validation:Optional
	CounterName *string `json:"counterName,omitempty" tf:"counter_name,omitempty"`

	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a * will apply to all instances.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	// +kubebuilder:validation:Optional
	IntervalSeconds *float64 `json:"intervalSeconds,omitempty" tf:"interval_seconds,omitempty"`

	// The object name of the Log Analytics Windows Performance Counter DataSource.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +kubebuilder:validation:Optional
	WorkspaceName *string `json:"workspaceName,omitempty" tf:"workspace_name,omitempty"`

	// Reference to a Workspace in operationalinsights to populate workspaceName.
	// +kubebuilder:validation:Optional
	WorkspaceNameRef *v1.Reference `json:"workspaceNameRef,omitempty" tf:"-"`

	// Selector for a Workspace in operationalinsights to populate workspaceName.
	// +kubebuilder:validation:Optional
	WorkspaceNameSelector *v1.Selector `json:"workspaceNameSelector,omitempty" tf:"-"`
}

// LogAnalyticsDataSourceWindowsPerformanceCounterSpec defines the desired state of LogAnalyticsDataSourceWindowsPerformanceCounter
type LogAnalyticsDataSourceWindowsPerformanceCounterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogAnalyticsDataSourceWindowsPerformanceCounterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogAnalyticsDataSourceWindowsPerformanceCounterInitParameters `json:"initProvider,omitempty"`
}

// LogAnalyticsDataSourceWindowsPerformanceCounterStatus defines the observed state of LogAnalyticsDataSourceWindowsPerformanceCounter.
type LogAnalyticsDataSourceWindowsPerformanceCounterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogAnalyticsDataSourceWindowsPerformanceCounterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsDataSourceWindowsPerformanceCounter is the Schema for the LogAnalyticsDataSourceWindowsPerformanceCounters API. Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogAnalyticsDataSourceWindowsPerformanceCounter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.counterName) || (has(self.initProvider) && has(self.initProvider.counterName))",message="spec.forProvider.counterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceName) || (has(self.initProvider) && has(self.initProvider.instanceName))",message="spec.forProvider.instanceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.intervalSeconds) || (has(self.initProvider) && has(self.initProvider.intervalSeconds))",message="spec.forProvider.intervalSeconds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectName) || (has(self.initProvider) && has(self.initProvider.objectName))",message="spec.forProvider.objectName is a required parameter"
	Spec   LogAnalyticsDataSourceWindowsPerformanceCounterSpec   `json:"spec"`
	Status LogAnalyticsDataSourceWindowsPerformanceCounterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnalyticsDataSourceWindowsPerformanceCounterList contains a list of LogAnalyticsDataSourceWindowsPerformanceCounters
type LogAnalyticsDataSourceWindowsPerformanceCounterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnalyticsDataSourceWindowsPerformanceCounter `json:"items"`
}

// Repository type metadata.
var (
	LogAnalyticsDataSourceWindowsPerformanceCounter_Kind             = "LogAnalyticsDataSourceWindowsPerformanceCounter"
	LogAnalyticsDataSourceWindowsPerformanceCounter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogAnalyticsDataSourceWindowsPerformanceCounter_Kind}.String()
	LogAnalyticsDataSourceWindowsPerformanceCounter_KindAPIVersion   = LogAnalyticsDataSourceWindowsPerformanceCounter_Kind + "." + CRDGroupVersion.String()
	LogAnalyticsDataSourceWindowsPerformanceCounter_GroupVersionKind = CRDGroupVersion.WithKind(LogAnalyticsDataSourceWindowsPerformanceCounter_Kind)
)

func init() {
	SchemeBuilder.Register(&LogAnalyticsDataSourceWindowsPerformanceCounter{}, &LogAnalyticsDataSourceWindowsPerformanceCounterList{})
}
