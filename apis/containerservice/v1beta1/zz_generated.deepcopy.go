//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AciConnectorLinuxObservation) DeepCopyInto(out *AciConnectorLinuxObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AciConnectorLinuxObservation.
func (in *AciConnectorLinuxObservation) DeepCopy() *AciConnectorLinuxObservation {
	if in == nil {
		return nil
	}
	out := new(AciConnectorLinuxObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AciConnectorLinuxParameters) DeepCopyInto(out *AciConnectorLinuxParameters) {
	*out = *in
	if in.SubnetName != nil {
		in, out := &in.SubnetName, &out.SubnetName
		*out = new(string)
		**out = **in
	}
	if in.SubnetNameRef != nil {
		in, out := &in.SubnetNameRef, &out.SubnetNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetNameSelector != nil {
		in, out := &in.SubnetNameSelector, &out.SubnetNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AciConnectorLinuxParameters.
func (in *AciConnectorLinuxParameters) DeepCopy() *AciConnectorLinuxParameters {
	if in == nil {
		return nil
	}
	out := new(AciConnectorLinuxParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllowedObservation) DeepCopyInto(out *AllowedObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllowedObservation.
func (in *AllowedObservation) DeepCopy() *AllowedObservation {
	if in == nil {
		return nil
	}
	out := new(AllowedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllowedParameters) DeepCopyInto(out *AllowedParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllowedParameters.
func (in *AllowedParameters) DeepCopy() *AllowedParameters {
	if in == nil {
		return nil
	}
	out := new(AllowedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalerProfileObservation) DeepCopyInto(out *AutoScalerProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalerProfileObservation.
func (in *AutoScalerProfileObservation) DeepCopy() *AutoScalerProfileObservation {
	if in == nil {
		return nil
	}
	out := new(AutoScalerProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoScalerProfileParameters) DeepCopyInto(out *AutoScalerProfileParameters) {
	*out = *in
	if in.BalanceSimilarNodeGroups != nil {
		in, out := &in.BalanceSimilarNodeGroups, &out.BalanceSimilarNodeGroups
		*out = new(bool)
		**out = **in
	}
	if in.EmptyBulkDeleteMax != nil {
		in, out := &in.EmptyBulkDeleteMax, &out.EmptyBulkDeleteMax
		*out = new(string)
		**out = **in
	}
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.MaxGracefulTerminationSec != nil {
		in, out := &in.MaxGracefulTerminationSec, &out.MaxGracefulTerminationSec
		*out = new(string)
		**out = **in
	}
	if in.MaxNodeProvisioningTime != nil {
		in, out := &in.MaxNodeProvisioningTime, &out.MaxNodeProvisioningTime
		*out = new(string)
		**out = **in
	}
	if in.MaxUnreadyNodes != nil {
		in, out := &in.MaxUnreadyNodes, &out.MaxUnreadyNodes
		*out = new(float64)
		**out = **in
	}
	if in.MaxUnreadyPercentage != nil {
		in, out := &in.MaxUnreadyPercentage, &out.MaxUnreadyPercentage
		*out = new(float64)
		**out = **in
	}
	if in.NewPodScaleUpDelay != nil {
		in, out := &in.NewPodScaleUpDelay, &out.NewPodScaleUpDelay
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownDelayAfterAdd != nil {
		in, out := &in.ScaleDownDelayAfterAdd, &out.ScaleDownDelayAfterAdd
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownDelayAfterDelete != nil {
		in, out := &in.ScaleDownDelayAfterDelete, &out.ScaleDownDelayAfterDelete
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownDelayAfterFailure != nil {
		in, out := &in.ScaleDownDelayAfterFailure, &out.ScaleDownDelayAfterFailure
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownUnneeded != nil {
		in, out := &in.ScaleDownUnneeded, &out.ScaleDownUnneeded
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownUnready != nil {
		in, out := &in.ScaleDownUnready, &out.ScaleDownUnready
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownUtilizationThreshold != nil {
		in, out := &in.ScaleDownUtilizationThreshold, &out.ScaleDownUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoScalerProfileParameters.
func (in *AutoScalerProfileParameters) DeepCopy() *AutoScalerProfileParameters {
	if in == nil {
		return nil
	}
	out := new(AutoScalerProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureActiveDirectoryRoleBasedAccessControlObservation) DeepCopyInto(out *AzureActiveDirectoryRoleBasedAccessControlObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureActiveDirectoryRoleBasedAccessControlObservation.
func (in *AzureActiveDirectoryRoleBasedAccessControlObservation) DeepCopy() *AzureActiveDirectoryRoleBasedAccessControlObservation {
	if in == nil {
		return nil
	}
	out := new(AzureActiveDirectoryRoleBasedAccessControlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureActiveDirectoryRoleBasedAccessControlParameters) DeepCopyInto(out *AzureActiveDirectoryRoleBasedAccessControlParameters) {
	*out = *in
	if in.AdminGroupObjectIds != nil {
		in, out := &in.AdminGroupObjectIds, &out.AdminGroupObjectIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AzureRbacEnabled != nil {
		in, out := &in.AzureRbacEnabled, &out.AzureRbacEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClientAppID != nil {
		in, out := &in.ClientAppID, &out.ClientAppID
		*out = new(string)
		**out = **in
	}
	if in.Managed != nil {
		in, out := &in.Managed, &out.Managed
		*out = new(bool)
		**out = **in
	}
	if in.ServerAppID != nil {
		in, out := &in.ServerAppID, &out.ServerAppID
		*out = new(string)
		**out = **in
	}
	if in.ServerAppSecretSecretRef != nil {
		in, out := &in.ServerAppSecretSecretRef, &out.ServerAppSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureActiveDirectoryRoleBasedAccessControlParameters.
func (in *AzureActiveDirectoryRoleBasedAccessControlParameters) DeepCopy() *AzureActiveDirectoryRoleBasedAccessControlParameters {
	if in == nil {
		return nil
	}
	out := new(AzureActiveDirectoryRoleBasedAccessControlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultNodePoolObservation) DeepCopyInto(out *DefaultNodePoolObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultNodePoolObservation.
func (in *DefaultNodePoolObservation) DeepCopy() *DefaultNodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(DefaultNodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultNodePoolParameters) DeepCopyInto(out *DefaultNodePoolParameters) {
	*out = *in
	if in.CapacityReservationGroupID != nil {
		in, out := &in.CapacityReservationGroupID, &out.CapacityReservationGroupID
		*out = new(string)
		**out = **in
	}
	if in.CustomCATrustEnabled != nil {
		in, out := &in.CustomCATrustEnabled, &out.CustomCATrustEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableAutoScaling != nil {
		in, out := &in.EnableAutoScaling, &out.EnableAutoScaling
		*out = new(bool)
		**out = **in
	}
	if in.EnableHostEncryption != nil {
		in, out := &in.EnableHostEncryption, &out.EnableHostEncryption
		*out = new(bool)
		**out = **in
	}
	if in.EnableNodePublicIP != nil {
		in, out := &in.EnableNodePublicIP, &out.EnableNodePublicIP
		*out = new(bool)
		**out = **in
	}
	if in.FipsEnabled != nil {
		in, out := &in.FipsEnabled, &out.FipsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HostGroupID != nil {
		in, out := &in.HostGroupID, &out.HostGroupID
		*out = new(string)
		**out = **in
	}
	if in.KubeletConfig != nil {
		in, out := &in.KubeletConfig, &out.KubeletConfig
		*out = make([]KubeletConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KubeletDiskType != nil {
		in, out := &in.KubeletDiskType, &out.KubeletDiskType
		*out = new(string)
		**out = **in
	}
	if in.LinuxOsConfig != nil {
		in, out := &in.LinuxOsConfig, &out.LinuxOsConfig
		*out = make([]LinuxOsConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.MessageOfTheDay != nil {
		in, out := &in.MessageOfTheDay, &out.MessageOfTheDay
		*out = new(string)
		**out = **in
	}
	if in.MinCount != nil {
		in, out := &in.MinCount, &out.MinCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeLabels != nil {
		in, out := &in.NodeLabels, &out.NodeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NodePublicIPPrefixID != nil {
		in, out := &in.NodePublicIPPrefixID, &out.NodePublicIPPrefixID
		*out = new(string)
		**out = **in
	}
	if in.NodeTaints != nil {
		in, out := &in.NodeTaints, &out.NodeTaints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OnlyCriticalAddonsEnabled != nil {
		in, out := &in.OnlyCriticalAddonsEnabled, &out.OnlyCriticalAddonsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OrchestratorVersion != nil {
		in, out := &in.OrchestratorVersion, &out.OrchestratorVersion
		*out = new(string)
		**out = **in
	}
	if in.OsDiskSizeGb != nil {
		in, out := &in.OsDiskSizeGb, &out.OsDiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.OsDiskType != nil {
		in, out := &in.OsDiskType, &out.OsDiskType
		*out = new(string)
		**out = **in
	}
	if in.OsSku != nil {
		in, out := &in.OsSku, &out.OsSku
		*out = new(string)
		**out = **in
	}
	if in.PodSubnetID != nil {
		in, out := &in.PodSubnetID, &out.PodSubnetID
		*out = new(string)
		**out = **in
	}
	if in.PodSubnetIDRef != nil {
		in, out := &in.PodSubnetIDRef, &out.PodSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PodSubnetIDSelector != nil {
		in, out := &in.PodSubnetIDSelector, &out.PodSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ProximityPlacementGroupID != nil {
		in, out := &in.ProximityPlacementGroupID, &out.ProximityPlacementGroupID
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownMode != nil {
		in, out := &in.ScaleDownMode, &out.ScaleDownMode
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UltraSsdEnabled != nil {
		in, out := &in.UltraSsdEnabled, &out.UltraSsdEnabled
		*out = new(bool)
		**out = **in
	}
	if in.UpgradeSettings != nil {
		in, out := &in.UpgradeSettings, &out.UpgradeSettings
		*out = make([]UpgradeSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VMSize != nil {
		in, out := &in.VMSize, &out.VMSize
		*out = new(string)
		**out = **in
	}
	if in.VnetSubnetID != nil {
		in, out := &in.VnetSubnetID, &out.VnetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.VnetSubnetIDRef != nil {
		in, out := &in.VnetSubnetIDRef, &out.VnetSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VnetSubnetIDSelector != nil {
		in, out := &in.VnetSubnetIDSelector, &out.VnetSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkloadRuntime != nil {
		in, out := &in.WorkloadRuntime, &out.WorkloadRuntime
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultNodePoolParameters.
func (in *DefaultNodePoolParameters) DeepCopy() *DefaultNodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(DefaultNodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GmsaObservation) DeepCopyInto(out *GmsaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GmsaObservation.
func (in *GmsaObservation) DeepCopy() *GmsaObservation {
	if in == nil {
		return nil
	}
	out := new(GmsaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GmsaParameters) DeepCopyInto(out *GmsaParameters) {
	*out = *in
	if in.DNSServer != nil {
		in, out := &in.DNSServer, &out.DNSServer
		*out = new(string)
		**out = **in
	}
	if in.RootDomain != nil {
		in, out := &in.RootDomain, &out.RootDomain
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GmsaParameters.
func (in *GmsaParameters) DeepCopy() *GmsaParameters {
	if in == nil {
		return nil
	}
	out := new(GmsaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPProxyConfigObservation) DeepCopyInto(out *HTTPProxyConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPProxyConfigObservation.
func (in *HTTPProxyConfigObservation) DeepCopy() *HTTPProxyConfigObservation {
	if in == nil {
		return nil
	}
	out := new(HTTPProxyConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPProxyConfigParameters) DeepCopyInto(out *HTTPProxyConfigParameters) {
	*out = *in
	if in.HTTPProxy != nil {
		in, out := &in.HTTPProxy, &out.HTTPProxy
		*out = new(string)
		**out = **in
	}
	if in.HTTPSProxy != nil {
		in, out := &in.HTTPSProxy, &out.HTTPSProxy
		*out = new(string)
		**out = **in
	}
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TrustedCASecretRef != nil {
		in, out := &in.TrustedCASecretRef, &out.TrustedCASecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPProxyConfigParameters.
func (in *HTTPProxyConfigParameters) DeepCopy() *HTTPProxyConfigParameters {
	if in == nil {
		return nil
	}
	out := new(HTTPProxyConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityObservation) DeepCopyInto(out *IdentityObservation) {
	*out = *in
	if in.PrincipalID != nil {
		in, out := &in.PrincipalID, &out.PrincipalID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityObservation.
func (in *IdentityObservation) DeepCopy() *IdentityObservation {
	if in == nil {
		return nil
	}
	out := new(IdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityParameters) DeepCopyInto(out *IdentityParameters) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityParameters.
func (in *IdentityParameters) DeepCopy() *IdentityParameters {
	if in == nil {
		return nil
	}
	out := new(IdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IngressApplicationGatewayIdentityObservation) DeepCopyInto(out *IngressApplicationGatewayIdentityObservation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IngressApplicationGatewayIdentityObservation.
func (in *IngressApplicationGatewayIdentityObservation) DeepCopy() *IngressApplicationGatewayIdentityObservation {
	if in == nil {
		return nil
	}
	out := new(IngressApplicationGatewayIdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IngressApplicationGatewayIdentityParameters) DeepCopyInto(out *IngressApplicationGatewayIdentityParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IngressApplicationGatewayIdentityParameters.
func (in *IngressApplicationGatewayIdentityParameters) DeepCopy() *IngressApplicationGatewayIdentityParameters {
	if in == nil {
		return nil
	}
	out := new(IngressApplicationGatewayIdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IngressApplicationGatewayObservation) DeepCopyInto(out *IngressApplicationGatewayObservation) {
	*out = *in
	if in.EffectiveGatewayID != nil {
		in, out := &in.EffectiveGatewayID, &out.EffectiveGatewayID
		*out = new(string)
		**out = **in
	}
	if in.IngressApplicationGatewayIdentity != nil {
		in, out := &in.IngressApplicationGatewayIdentity, &out.IngressApplicationGatewayIdentity
		*out = make([]IngressApplicationGatewayIdentityObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IngressApplicationGatewayObservation.
func (in *IngressApplicationGatewayObservation) DeepCopy() *IngressApplicationGatewayObservation {
	if in == nil {
		return nil
	}
	out := new(IngressApplicationGatewayObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IngressApplicationGatewayParameters) DeepCopyInto(out *IngressApplicationGatewayParameters) {
	*out = *in
	if in.GatewayID != nil {
		in, out := &in.GatewayID, &out.GatewayID
		*out = new(string)
		**out = **in
	}
	if in.GatewayName != nil {
		in, out := &in.GatewayName, &out.GatewayName
		*out = new(string)
		**out = **in
	}
	if in.SubnetCidr != nil {
		in, out := &in.SubnetCidr, &out.SubnetCidr
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IngressApplicationGatewayParameters.
func (in *IngressApplicationGatewayParameters) DeepCopy() *IngressApplicationGatewayParameters {
	if in == nil {
		return nil
	}
	out := new(IngressApplicationGatewayParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeyVaultSecretsProviderObservation) DeepCopyInto(out *KeyVaultSecretsProviderObservation) {
	*out = *in
	if in.SecretIdentity != nil {
		in, out := &in.SecretIdentity, &out.SecretIdentity
		*out = make([]SecretIdentityObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeyVaultSecretsProviderObservation.
func (in *KeyVaultSecretsProviderObservation) DeepCopy() *KeyVaultSecretsProviderObservation {
	if in == nil {
		return nil
	}
	out := new(KeyVaultSecretsProviderObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeyVaultSecretsProviderParameters) DeepCopyInto(out *KeyVaultSecretsProviderParameters) {
	*out = *in
	if in.SecretRotationEnabled != nil {
		in, out := &in.SecretRotationEnabled, &out.SecretRotationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecretRotationInterval != nil {
		in, out := &in.SecretRotationInterval, &out.SecretRotationInterval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeyVaultSecretsProviderParameters.
func (in *KeyVaultSecretsProviderParameters) DeepCopy() *KeyVaultSecretsProviderParameters {
	if in == nil {
		return nil
	}
	out := new(KeyVaultSecretsProviderParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeAdminConfigObservation) DeepCopyInto(out *KubeAdminConfigObservation) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeAdminConfigObservation.
func (in *KubeAdminConfigObservation) DeepCopy() *KubeAdminConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubeAdminConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeAdminConfigParameters) DeepCopyInto(out *KubeAdminConfigParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeAdminConfigParameters.
func (in *KubeAdminConfigParameters) DeepCopy() *KubeAdminConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubeAdminConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeConfigObservation) DeepCopyInto(out *KubeConfigObservation) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeConfigObservation.
func (in *KubeConfigObservation) DeepCopy() *KubeConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubeConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeConfigParameters) DeepCopyInto(out *KubeConfigParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeConfigParameters.
func (in *KubeConfigParameters) DeepCopy() *KubeConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubeConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletConfigObservation) DeepCopyInto(out *KubeletConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletConfigObservation.
func (in *KubeletConfigObservation) DeepCopy() *KubeletConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubeletConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletConfigParameters) DeepCopyInto(out *KubeletConfigParameters) {
	*out = *in
	if in.AllowedUnsafeSysctls != nil {
		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CPUCfsQuotaEnabled != nil {
		in, out := &in.CPUCfsQuotaEnabled, &out.CPUCfsQuotaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUCfsQuotaPeriod != nil {
		in, out := &in.CPUCfsQuotaPeriod, &out.CPUCfsQuotaPeriod
		*out = new(string)
		**out = **in
	}
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxLine != nil {
		in, out := &in.ContainerLogMaxLine, &out.ContainerLogMaxLine
		*out = new(float64)
		**out = **in
	}
	if in.ContainerLogMaxSizeMb != nil {
		in, out := &in.ContainerLogMaxSizeMb, &out.ContainerLogMaxSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.ImageGcHighThreshold != nil {
		in, out := &in.ImageGcHighThreshold, &out.ImageGcHighThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ImageGcLowThreshold != nil {
		in, out := &in.ImageGcLowThreshold, &out.ImageGcLowThreshold
		*out = new(float64)
		**out = **in
	}
	if in.PodMaxPid != nil {
		in, out := &in.PodMaxPid, &out.PodMaxPid
		*out = new(float64)
		**out = **in
	}
	if in.TopologyManagerPolicy != nil {
		in, out := &in.TopologyManagerPolicy, &out.TopologyManagerPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletConfigParameters.
func (in *KubeletConfigParameters) DeepCopy() *KubeletConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubeletConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletIdentityObservation) DeepCopyInto(out *KubeletIdentityObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletIdentityObservation.
func (in *KubeletIdentityObservation) DeepCopy() *KubeletIdentityObservation {
	if in == nil {
		return nil
	}
	out := new(KubeletIdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletIdentityParameters) DeepCopyInto(out *KubeletIdentityParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletIdentityParameters.
func (in *KubeletIdentityParameters) DeepCopy() *KubeletIdentityParameters {
	if in == nil {
		return nil
	}
	out := new(KubeletIdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesCluster) DeepCopyInto(out *KubernetesCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesCluster.
func (in *KubernetesCluster) DeepCopy() *KubernetesCluster {
	if in == nil {
		return nil
	}
	out := new(KubernetesCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterList) DeepCopyInto(out *KubernetesClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterList.
func (in *KubernetesClusterList) DeepCopy() *KubernetesClusterList {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePool) DeepCopyInto(out *KubernetesClusterNodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePool.
func (in *KubernetesClusterNodePool) DeepCopy() *KubernetesClusterNodePool {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesClusterNodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolKubeletConfigObservation) DeepCopyInto(out *KubernetesClusterNodePoolKubeletConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolKubeletConfigObservation.
func (in *KubernetesClusterNodePoolKubeletConfigObservation) DeepCopy() *KubernetesClusterNodePoolKubeletConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolKubeletConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolKubeletConfigParameters) DeepCopyInto(out *KubernetesClusterNodePoolKubeletConfigParameters) {
	*out = *in
	if in.AllowedUnsafeSysctls != nil {
		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CPUCfsQuotaEnabled != nil {
		in, out := &in.CPUCfsQuotaEnabled, &out.CPUCfsQuotaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUCfsQuotaPeriod != nil {
		in, out := &in.CPUCfsQuotaPeriod, &out.CPUCfsQuotaPeriod
		*out = new(string)
		**out = **in
	}
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxLine != nil {
		in, out := &in.ContainerLogMaxLine, &out.ContainerLogMaxLine
		*out = new(float64)
		**out = **in
	}
	if in.ContainerLogMaxSizeMb != nil {
		in, out := &in.ContainerLogMaxSizeMb, &out.ContainerLogMaxSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.ImageGcHighThreshold != nil {
		in, out := &in.ImageGcHighThreshold, &out.ImageGcHighThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ImageGcLowThreshold != nil {
		in, out := &in.ImageGcLowThreshold, &out.ImageGcLowThreshold
		*out = new(float64)
		**out = **in
	}
	if in.PodMaxPid != nil {
		in, out := &in.PodMaxPid, &out.PodMaxPid
		*out = new(float64)
		**out = **in
	}
	if in.TopologyManagerPolicy != nil {
		in, out := &in.TopologyManagerPolicy, &out.TopologyManagerPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolKubeletConfigParameters.
func (in *KubernetesClusterNodePoolKubeletConfigParameters) DeepCopy() *KubernetesClusterNodePoolKubeletConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolKubeletConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolLinuxOsConfigObservation) DeepCopyInto(out *KubernetesClusterNodePoolLinuxOsConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolLinuxOsConfigObservation.
func (in *KubernetesClusterNodePoolLinuxOsConfigObservation) DeepCopy() *KubernetesClusterNodePoolLinuxOsConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolLinuxOsConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolLinuxOsConfigParameters) DeepCopyInto(out *KubernetesClusterNodePoolLinuxOsConfigParameters) {
	*out = *in
	if in.SwapFileSizeMb != nil {
		in, out := &in.SwapFileSizeMb, &out.SwapFileSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.SysctlConfig != nil {
		in, out := &in.SysctlConfig, &out.SysctlConfig
		*out = make([]LinuxOsConfigSysctlConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TransparentHugePageDefrag != nil {
		in, out := &in.TransparentHugePageDefrag, &out.TransparentHugePageDefrag
		*out = new(string)
		**out = **in
	}
	if in.TransparentHugePageEnabled != nil {
		in, out := &in.TransparentHugePageEnabled, &out.TransparentHugePageEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolLinuxOsConfigParameters.
func (in *KubernetesClusterNodePoolLinuxOsConfigParameters) DeepCopy() *KubernetesClusterNodePoolLinuxOsConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolLinuxOsConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolList) DeepCopyInto(out *KubernetesClusterNodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesClusterNodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolList.
func (in *KubernetesClusterNodePoolList) DeepCopy() *KubernetesClusterNodePoolList {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesClusterNodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolObservation) DeepCopyInto(out *KubernetesClusterNodePoolObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolObservation.
func (in *KubernetesClusterNodePoolObservation) DeepCopy() *KubernetesClusterNodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolParameters) DeepCopyInto(out *KubernetesClusterNodePoolParameters) {
	*out = *in
	if in.CapacityReservationGroupID != nil {
		in, out := &in.CapacityReservationGroupID, &out.CapacityReservationGroupID
		*out = new(string)
		**out = **in
	}
	if in.CustomCATrustEnabled != nil {
		in, out := &in.CustomCATrustEnabled, &out.CustomCATrustEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableAutoScaling != nil {
		in, out := &in.EnableAutoScaling, &out.EnableAutoScaling
		*out = new(bool)
		**out = **in
	}
	if in.EnableHostEncryption != nil {
		in, out := &in.EnableHostEncryption, &out.EnableHostEncryption
		*out = new(bool)
		**out = **in
	}
	if in.EnableNodePublicIP != nil {
		in, out := &in.EnableNodePublicIP, &out.EnableNodePublicIP
		*out = new(bool)
		**out = **in
	}
	if in.EvictionPolicy != nil {
		in, out := &in.EvictionPolicy, &out.EvictionPolicy
		*out = new(string)
		**out = **in
	}
	if in.FipsEnabled != nil {
		in, out := &in.FipsEnabled, &out.FipsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HostGroupID != nil {
		in, out := &in.HostGroupID, &out.HostGroupID
		*out = new(string)
		**out = **in
	}
	if in.KubeletConfig != nil {
		in, out := &in.KubeletConfig, &out.KubeletConfig
		*out = make([]KubernetesClusterNodePoolKubeletConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KubeletDiskType != nil {
		in, out := &in.KubeletDiskType, &out.KubeletDiskType
		*out = new(string)
		**out = **in
	}
	if in.KubernetesClusterID != nil {
		in, out := &in.KubernetesClusterID, &out.KubernetesClusterID
		*out = new(string)
		**out = **in
	}
	if in.KubernetesClusterIDRef != nil {
		in, out := &in.KubernetesClusterIDRef, &out.KubernetesClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KubernetesClusterIDSelector != nil {
		in, out := &in.KubernetesClusterIDSelector, &out.KubernetesClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.LinuxOsConfig != nil {
		in, out := &in.LinuxOsConfig, &out.LinuxOsConfig
		*out = make([]KubernetesClusterNodePoolLinuxOsConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(float64)
		**out = **in
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(float64)
		**out = **in
	}
	if in.MessageOfTheDay != nil {
		in, out := &in.MessageOfTheDay, &out.MessageOfTheDay
		*out = new(string)
		**out = **in
	}
	if in.MinCount != nil {
		in, out := &in.MinCount, &out.MinCount
		*out = new(float64)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeLabels != nil {
		in, out := &in.NodeLabels, &out.NodeLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NodePublicIPPrefixID != nil {
		in, out := &in.NodePublicIPPrefixID, &out.NodePublicIPPrefixID
		*out = new(string)
		**out = **in
	}
	if in.NodeTaints != nil {
		in, out := &in.NodeTaints, &out.NodeTaints
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrchestratorVersion != nil {
		in, out := &in.OrchestratorVersion, &out.OrchestratorVersion
		*out = new(string)
		**out = **in
	}
	if in.OsDiskSizeGb != nil {
		in, out := &in.OsDiskSizeGb, &out.OsDiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.OsDiskType != nil {
		in, out := &in.OsDiskType, &out.OsDiskType
		*out = new(string)
		**out = **in
	}
	if in.OsSku != nil {
		in, out := &in.OsSku, &out.OsSku
		*out = new(string)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PodSubnetID != nil {
		in, out := &in.PodSubnetID, &out.PodSubnetID
		*out = new(string)
		**out = **in
	}
	if in.PodSubnetIDRef != nil {
		in, out := &in.PodSubnetIDRef, &out.PodSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PodSubnetIDSelector != nil {
		in, out := &in.PodSubnetIDSelector, &out.PodSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(string)
		**out = **in
	}
	if in.ProximityPlacementGroupID != nil {
		in, out := &in.ProximityPlacementGroupID, &out.ProximityPlacementGroupID
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownMode != nil {
		in, out := &in.ScaleDownMode, &out.ScaleDownMode
		*out = new(string)
		**out = **in
	}
	if in.SpotMaxPrice != nil {
		in, out := &in.SpotMaxPrice, &out.SpotMaxPrice
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UltraSsdEnabled != nil {
		in, out := &in.UltraSsdEnabled, &out.UltraSsdEnabled
		*out = new(bool)
		**out = **in
	}
	if in.UpgradeSettings != nil {
		in, out := &in.UpgradeSettings, &out.UpgradeSettings
		*out = make([]KubernetesClusterNodePoolUpgradeSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VMSize != nil {
		in, out := &in.VMSize, &out.VMSize
		*out = new(string)
		**out = **in
	}
	if in.VnetSubnetID != nil {
		in, out := &in.VnetSubnetID, &out.VnetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.VnetSubnetIDRef != nil {
		in, out := &in.VnetSubnetIDRef, &out.VnetSubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VnetSubnetIDSelector != nil {
		in, out := &in.VnetSubnetIDSelector, &out.VnetSubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WindowsProfile != nil {
		in, out := &in.WindowsProfile, &out.WindowsProfile
		*out = make([]KubernetesClusterNodePoolWindowsProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkloadRuntime != nil {
		in, out := &in.WorkloadRuntime, &out.WorkloadRuntime
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolParameters.
func (in *KubernetesClusterNodePoolParameters) DeepCopy() *KubernetesClusterNodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolSpec) DeepCopyInto(out *KubernetesClusterNodePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolSpec.
func (in *KubernetesClusterNodePoolSpec) DeepCopy() *KubernetesClusterNodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolStatus) DeepCopyInto(out *KubernetesClusterNodePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolStatus.
func (in *KubernetesClusterNodePoolStatus) DeepCopy() *KubernetesClusterNodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolUpgradeSettingsObservation) DeepCopyInto(out *KubernetesClusterNodePoolUpgradeSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolUpgradeSettingsObservation.
func (in *KubernetesClusterNodePoolUpgradeSettingsObservation) DeepCopy() *KubernetesClusterNodePoolUpgradeSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolUpgradeSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolUpgradeSettingsParameters) DeepCopyInto(out *KubernetesClusterNodePoolUpgradeSettingsParameters) {
	*out = *in
	if in.MaxSurge != nil {
		in, out := &in.MaxSurge, &out.MaxSurge
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolUpgradeSettingsParameters.
func (in *KubernetesClusterNodePoolUpgradeSettingsParameters) DeepCopy() *KubernetesClusterNodePoolUpgradeSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolUpgradeSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolWindowsProfileObservation) DeepCopyInto(out *KubernetesClusterNodePoolWindowsProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolWindowsProfileObservation.
func (in *KubernetesClusterNodePoolWindowsProfileObservation) DeepCopy() *KubernetesClusterNodePoolWindowsProfileObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolWindowsProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterNodePoolWindowsProfileParameters) DeepCopyInto(out *KubernetesClusterNodePoolWindowsProfileParameters) {
	*out = *in
	if in.OutboundNATEnabled != nil {
		in, out := &in.OutboundNATEnabled, &out.OutboundNATEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterNodePoolWindowsProfileParameters.
func (in *KubernetesClusterNodePoolWindowsProfileParameters) DeepCopy() *KubernetesClusterNodePoolWindowsProfileParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterNodePoolWindowsProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterObservation) DeepCopyInto(out *KubernetesClusterObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.HTTPApplicationRoutingZoneName != nil {
		in, out := &in.HTTPApplicationRoutingZoneName, &out.HTTPApplicationRoutingZoneName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = make([]IdentityObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IngressApplicationGateway != nil {
		in, out := &in.IngressApplicationGateway, &out.IngressApplicationGateway
		*out = make([]IngressApplicationGatewayObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeyVaultSecretsProvider != nil {
		in, out := &in.KeyVaultSecretsProvider, &out.KeyVaultSecretsProvider
		*out = make([]KeyVaultSecretsProviderObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkProfile != nil {
		in, out := &in.NetworkProfile, &out.NetworkProfile
		*out = make([]NetworkProfileObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OidcIssuerURL != nil {
		in, out := &in.OidcIssuerURL, &out.OidcIssuerURL
		*out = new(string)
		**out = **in
	}
	if in.OmsAgent != nil {
		in, out := &in.OmsAgent, &out.OmsAgent
		*out = make([]OmsAgentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PortalFqdn != nil {
		in, out := &in.PortalFqdn, &out.PortalFqdn
		*out = new(string)
		**out = **in
	}
	if in.PrivateFqdn != nil {
		in, out := &in.PrivateFqdn, &out.PrivateFqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterObservation.
func (in *KubernetesClusterObservation) DeepCopy() *KubernetesClusterObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterParameters) DeepCopyInto(out *KubernetesClusterParameters) {
	*out = *in
	if in.APIServerAuthorizedIPRanges != nil {
		in, out := &in.APIServerAuthorizedIPRanges, &out.APIServerAuthorizedIPRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AciConnectorLinux != nil {
		in, out := &in.AciConnectorLinux, &out.AciConnectorLinux
		*out = make([]AciConnectorLinuxParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoScalerProfile != nil {
		in, out := &in.AutoScalerProfile, &out.AutoScalerProfile
		*out = make([]AutoScalerProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutomaticChannelUpgrade != nil {
		in, out := &in.AutomaticChannelUpgrade, &out.AutomaticChannelUpgrade
		*out = new(string)
		**out = **in
	}
	if in.AzureActiveDirectoryRoleBasedAccessControl != nil {
		in, out := &in.AzureActiveDirectoryRoleBasedAccessControl, &out.AzureActiveDirectoryRoleBasedAccessControl
		*out = make([]AzureActiveDirectoryRoleBasedAccessControlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AzurePolicyEnabled != nil {
		in, out := &in.AzurePolicyEnabled, &out.AzurePolicyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DNSPrefix != nil {
		in, out := &in.DNSPrefix, &out.DNSPrefix
		*out = new(string)
		**out = **in
	}
	if in.DNSPrefixPrivateCluster != nil {
		in, out := &in.DNSPrefixPrivateCluster, &out.DNSPrefixPrivateCluster
		*out = new(string)
		**out = **in
	}
	if in.DefaultNodePool != nil {
		in, out := &in.DefaultNodePool, &out.DefaultNodePool
		*out = make([]DefaultNodePoolParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DiskEncryptionSetID != nil {
		in, out := &in.DiskEncryptionSetID, &out.DiskEncryptionSetID
		*out = new(string)
		**out = **in
	}
	if in.EdgeZone != nil {
		in, out := &in.EdgeZone, &out.EdgeZone
		*out = new(string)
		**out = **in
	}
	if in.EnablePodSecurityPolicy != nil {
		in, out := &in.EnablePodSecurityPolicy, &out.EnablePodSecurityPolicy
		*out = new(bool)
		**out = **in
	}
	if in.HTTPApplicationRoutingEnabled != nil {
		in, out := &in.HTTPApplicationRoutingEnabled, &out.HTTPApplicationRoutingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HTTPProxyConfig != nil {
		in, out := &in.HTTPProxyConfig, &out.HTTPProxyConfig
		*out = make([]HTTPProxyConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = make([]IdentityParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ImageCleanerEnabled != nil {
		in, out := &in.ImageCleanerEnabled, &out.ImageCleanerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ImageCleanerIntervalHours != nil {
		in, out := &in.ImageCleanerIntervalHours, &out.ImageCleanerIntervalHours
		*out = new(float64)
		**out = **in
	}
	if in.IngressApplicationGateway != nil {
		in, out := &in.IngressApplicationGateway, &out.IngressApplicationGateway
		*out = make([]IngressApplicationGatewayParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeyVaultSecretsProvider != nil {
		in, out := &in.KeyVaultSecretsProvider, &out.KeyVaultSecretsProvider
		*out = make([]KeyVaultSecretsProviderParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KubeletIdentity != nil {
		in, out := &in.KubeletIdentity, &out.KubeletIdentity
		*out = make([]KubeletIdentityParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KubernetesVersion != nil {
		in, out := &in.KubernetesVersion, &out.KubernetesVersion
		*out = new(string)
		**out = **in
	}
	if in.LinuxProfile != nil {
		in, out := &in.LinuxProfile, &out.LinuxProfile
		*out = make([]LinuxProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LocalAccountDisabled != nil {
		in, out := &in.LocalAccountDisabled, &out.LocalAccountDisabled
		*out = new(bool)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MicrosoftDefender != nil {
		in, out := &in.MicrosoftDefender, &out.MicrosoftDefender
		*out = make([]MicrosoftDefenderParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MonitorMetrics != nil {
		in, out := &in.MonitorMetrics, &out.MonitorMetrics
		*out = make([]MonitorMetricsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkProfile != nil {
		in, out := &in.NetworkProfile, &out.NetworkProfile
		*out = make([]NetworkProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeResourceGroup != nil {
		in, out := &in.NodeResourceGroup, &out.NodeResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.OidcIssuerEnabled != nil {
		in, out := &in.OidcIssuerEnabled, &out.OidcIssuerEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OmsAgent != nil {
		in, out := &in.OmsAgent, &out.OmsAgent
		*out = make([]OmsAgentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpenServiceMeshEnabled != nil {
		in, out := &in.OpenServiceMeshEnabled, &out.OpenServiceMeshEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PrivateClusterEnabled != nil {
		in, out := &in.PrivateClusterEnabled, &out.PrivateClusterEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PrivateClusterPublicFqdnEnabled != nil {
		in, out := &in.PrivateClusterPublicFqdnEnabled, &out.PrivateClusterPublicFqdnEnabled
		*out = new(bool)
		**out = **in
	}
	if in.PrivateDNSZoneID != nil {
		in, out := &in.PrivateDNSZoneID, &out.PrivateDNSZoneID
		*out = new(string)
		**out = **in
	}
	if in.PrivateDNSZoneIDRef != nil {
		in, out := &in.PrivateDNSZoneIDRef, &out.PrivateDNSZoneIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PrivateDNSZoneIDSelector != nil {
		in, out := &in.PrivateDNSZoneIDSelector, &out.PrivateDNSZoneIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PublicNetworkAccessEnabled != nil {
		in, out := &in.PublicNetworkAccessEnabled, &out.PublicNetworkAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupNameRef != nil {
		in, out := &in.ResourceGroupNameRef, &out.ResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupNameSelector != nil {
		in, out := &in.ResourceGroupNameSelector, &out.ResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleBasedAccessControlEnabled != nil {
		in, out := &in.RoleBasedAccessControlEnabled, &out.RoleBasedAccessControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RunCommandEnabled != nil {
		in, out := &in.RunCommandEnabled, &out.RunCommandEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ServicePrincipal != nil {
		in, out := &in.ServicePrincipal, &out.ServicePrincipal
		*out = make([]ServicePrincipalParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SkuTier != nil {
		in, out := &in.SkuTier, &out.SkuTier
		*out = new(string)
		**out = **in
	}
	if in.StorageProfile != nil {
		in, out := &in.StorageProfile, &out.StorageProfile
		*out = make([]StorageProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.WebAppRouting != nil {
		in, out := &in.WebAppRouting, &out.WebAppRouting
		*out = make([]WebAppRoutingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsProfile != nil {
		in, out := &in.WindowsProfile, &out.WindowsProfile
		*out = make([]WindowsProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkloadAutoscalerProfile != nil {
		in, out := &in.WorkloadAutoscalerProfile, &out.WorkloadAutoscalerProfile
		*out = make([]WorkloadAutoscalerProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkloadIdentityEnabled != nil {
		in, out := &in.WorkloadIdentityEnabled, &out.WorkloadIdentityEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterParameters.
func (in *KubernetesClusterParameters) DeepCopy() *KubernetesClusterParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterSpec) DeepCopyInto(out *KubernetesClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterSpec.
func (in *KubernetesClusterSpec) DeepCopy() *KubernetesClusterSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesClusterStatus) DeepCopyInto(out *KubernetesClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesClusterStatus.
func (in *KubernetesClusterStatus) DeepCopy() *KubernetesClusterStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOsConfigObservation) DeepCopyInto(out *LinuxOsConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOsConfigObservation.
func (in *LinuxOsConfigObservation) DeepCopy() *LinuxOsConfigObservation {
	if in == nil {
		return nil
	}
	out := new(LinuxOsConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOsConfigParameters) DeepCopyInto(out *LinuxOsConfigParameters) {
	*out = *in
	if in.SwapFileSizeMb != nil {
		in, out := &in.SwapFileSizeMb, &out.SwapFileSizeMb
		*out = new(float64)
		**out = **in
	}
	if in.SysctlConfig != nil {
		in, out := &in.SysctlConfig, &out.SysctlConfig
		*out = make([]SysctlConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TransparentHugePageDefrag != nil {
		in, out := &in.TransparentHugePageDefrag, &out.TransparentHugePageDefrag
		*out = new(string)
		**out = **in
	}
	if in.TransparentHugePageEnabled != nil {
		in, out := &in.TransparentHugePageEnabled, &out.TransparentHugePageEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOsConfigParameters.
func (in *LinuxOsConfigParameters) DeepCopy() *LinuxOsConfigParameters {
	if in == nil {
		return nil
	}
	out := new(LinuxOsConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOsConfigSysctlConfigObservation) DeepCopyInto(out *LinuxOsConfigSysctlConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOsConfigSysctlConfigObservation.
func (in *LinuxOsConfigSysctlConfigObservation) DeepCopy() *LinuxOsConfigSysctlConfigObservation {
	if in == nil {
		return nil
	}
	out := new(LinuxOsConfigSysctlConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOsConfigSysctlConfigParameters) DeepCopyInto(out *LinuxOsConfigSysctlConfigParameters) {
	*out = *in
	if in.FsAioMaxNr != nil {
		in, out := &in.FsAioMaxNr, &out.FsAioMaxNr
		*out = new(float64)
		**out = **in
	}
	if in.FsFileMax != nil {
		in, out := &in.FsFileMax, &out.FsFileMax
		*out = new(float64)
		**out = **in
	}
	if in.FsInotifyMaxUserWatches != nil {
		in, out := &in.FsInotifyMaxUserWatches, &out.FsInotifyMaxUserWatches
		*out = new(float64)
		**out = **in
	}
	if in.FsNrOpen != nil {
		in, out := &in.FsNrOpen, &out.FsNrOpen
		*out = new(float64)
		**out = **in
	}
	if in.KernelThreadsMax != nil {
		in, out := &in.KernelThreadsMax, &out.KernelThreadsMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreNetdevMaxBacklog != nil {
		in, out := &in.NetCoreNetdevMaxBacklog, &out.NetCoreNetdevMaxBacklog
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreOptmemMax != nil {
		in, out := &in.NetCoreOptmemMax, &out.NetCoreOptmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreRmemDefault != nil {
		in, out := &in.NetCoreRmemDefault, &out.NetCoreRmemDefault
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreRmemMax != nil {
		in, out := &in.NetCoreRmemMax, &out.NetCoreRmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreSomaxconn != nil {
		in, out := &in.NetCoreSomaxconn, &out.NetCoreSomaxconn
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreWmemDefault != nil {
		in, out := &in.NetCoreWmemDefault, &out.NetCoreWmemDefault
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreWmemMax != nil {
		in, out := &in.NetCoreWmemMax, &out.NetCoreWmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4IPLocalPortRangeMax != nil {
		in, out := &in.NetIPv4IPLocalPortRangeMax, &out.NetIPv4IPLocalPortRangeMax
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4IPLocalPortRangeMin != nil {
		in, out := &in.NetIPv4IPLocalPortRangeMin, &out.NetIPv4IPLocalPortRangeMin
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh1 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh1, &out.NetIPv4NeighDefaultGcThresh1
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh2 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh2, &out.NetIPv4NeighDefaultGcThresh2
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh3 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh3, &out.NetIPv4NeighDefaultGcThresh3
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPFinTimeout != nil {
		in, out := &in.NetIPv4TCPFinTimeout, &out.NetIPv4TCPFinTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveIntvl != nil {
		in, out := &in.NetIPv4TCPKeepaliveIntvl, &out.NetIPv4TCPKeepaliveIntvl
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveProbes != nil {
		in, out := &in.NetIPv4TCPKeepaliveProbes, &out.NetIPv4TCPKeepaliveProbes
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveTime != nil {
		in, out := &in.NetIPv4TCPKeepaliveTime, &out.NetIPv4TCPKeepaliveTime
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPMaxSynBacklog != nil {
		in, out := &in.NetIPv4TCPMaxSynBacklog, &out.NetIPv4TCPMaxSynBacklog
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPMaxTwBuckets != nil {
		in, out := &in.NetIPv4TCPMaxTwBuckets, &out.NetIPv4TCPMaxTwBuckets
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPTwReuse != nil {
		in, out := &in.NetIPv4TCPTwReuse, &out.NetIPv4TCPTwReuse
		*out = new(bool)
		**out = **in
	}
	if in.NetNetfilterNfConntrackBuckets != nil {
		in, out := &in.NetNetfilterNfConntrackBuckets, &out.NetNetfilterNfConntrackBuckets
		*out = new(float64)
		**out = **in
	}
	if in.NetNetfilterNfConntrackMax != nil {
		in, out := &in.NetNetfilterNfConntrackMax, &out.NetNetfilterNfConntrackMax
		*out = new(float64)
		**out = **in
	}
	if in.VMMaxMapCount != nil {
		in, out := &in.VMMaxMapCount, &out.VMMaxMapCount
		*out = new(float64)
		**out = **in
	}
	if in.VMSwappiness != nil {
		in, out := &in.VMSwappiness, &out.VMSwappiness
		*out = new(float64)
		**out = **in
	}
	if in.VMVfsCachePressure != nil {
		in, out := &in.VMVfsCachePressure, &out.VMVfsCachePressure
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOsConfigSysctlConfigParameters.
func (in *LinuxOsConfigSysctlConfigParameters) DeepCopy() *LinuxOsConfigSysctlConfigParameters {
	if in == nil {
		return nil
	}
	out := new(LinuxOsConfigSysctlConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxProfileObservation) DeepCopyInto(out *LinuxProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxProfileObservation.
func (in *LinuxProfileObservation) DeepCopy() *LinuxProfileObservation {
	if in == nil {
		return nil
	}
	out := new(LinuxProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxProfileParameters) DeepCopyInto(out *LinuxProfileParameters) {
	*out = *in
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.SSHKey != nil {
		in, out := &in.SSHKey, &out.SSHKey
		*out = make([]SSHKeyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxProfileParameters.
func (in *LinuxProfileParameters) DeepCopy() *LinuxProfileParameters {
	if in == nil {
		return nil
	}
	out := new(LinuxProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadBalancerProfileObservation) DeepCopyInto(out *LoadBalancerProfileObservation) {
	*out = *in
	if in.EffectiveOutboundIps != nil {
		in, out := &in.EffectiveOutboundIps, &out.EffectiveOutboundIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadBalancerProfileObservation.
func (in *LoadBalancerProfileObservation) DeepCopy() *LoadBalancerProfileObservation {
	if in == nil {
		return nil
	}
	out := new(LoadBalancerProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadBalancerProfileParameters) DeepCopyInto(out *LoadBalancerProfileParameters) {
	*out = *in
	if in.IdleTimeoutInMinutes != nil {
		in, out := &in.IdleTimeoutInMinutes, &out.IdleTimeoutInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.ManagedOutboundIPCount != nil {
		in, out := &in.ManagedOutboundIPCount, &out.ManagedOutboundIPCount
		*out = new(float64)
		**out = **in
	}
	if in.ManagedOutboundIPv6Count != nil {
		in, out := &in.ManagedOutboundIPv6Count, &out.ManagedOutboundIPv6Count
		*out = new(float64)
		**out = **in
	}
	if in.OutboundIPAddressIds != nil {
		in, out := &in.OutboundIPAddressIds, &out.OutboundIPAddressIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OutboundIPPrefixIds != nil {
		in, out := &in.OutboundIPPrefixIds, &out.OutboundIPPrefixIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OutboundPortsAllocated != nil {
		in, out := &in.OutboundPortsAllocated, &out.OutboundPortsAllocated
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadBalancerProfileParameters.
func (in *LoadBalancerProfileParameters) DeepCopy() *LoadBalancerProfileParameters {
	if in == nil {
		return nil
	}
	out := new(LoadBalancerProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowObservation) DeepCopyInto(out *MaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowObservation.
func (in *MaintenanceWindowObservation) DeepCopy() *MaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowParameters) DeepCopyInto(out *MaintenanceWindowParameters) {
	*out = *in
	if in.Allowed != nil {
		in, out := &in.Allowed, &out.Allowed
		*out = make([]AllowedParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NotAllowed != nil {
		in, out := &in.NotAllowed, &out.NotAllowed
		*out = make([]NotAllowedParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowParameters.
func (in *MaintenanceWindowParameters) DeepCopy() *MaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftDefenderObservation) DeepCopyInto(out *MicrosoftDefenderObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftDefenderObservation.
func (in *MicrosoftDefenderObservation) DeepCopy() *MicrosoftDefenderObservation {
	if in == nil {
		return nil
	}
	out := new(MicrosoftDefenderObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MicrosoftDefenderParameters) DeepCopyInto(out *MicrosoftDefenderParameters) {
	*out = *in
	if in.LogAnalyticsWorkspaceID != nil {
		in, out := &in.LogAnalyticsWorkspaceID, &out.LogAnalyticsWorkspaceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MicrosoftDefenderParameters.
func (in *MicrosoftDefenderParameters) DeepCopy() *MicrosoftDefenderParameters {
	if in == nil {
		return nil
	}
	out := new(MicrosoftDefenderParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorMetricsObservation) DeepCopyInto(out *MonitorMetricsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorMetricsObservation.
func (in *MonitorMetricsObservation) DeepCopy() *MonitorMetricsObservation {
	if in == nil {
		return nil
	}
	out := new(MonitorMetricsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitorMetricsParameters) DeepCopyInto(out *MonitorMetricsParameters) {
	*out = *in
	if in.AnnotationsAllowed != nil {
		in, out := &in.AnnotationsAllowed, &out.AnnotationsAllowed
		*out = new(string)
		**out = **in
	}
	if in.LabelsAllowed != nil {
		in, out := &in.LabelsAllowed, &out.LabelsAllowed
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitorMetricsParameters.
func (in *MonitorMetricsParameters) DeepCopy() *MonitorMetricsParameters {
	if in == nil {
		return nil
	}
	out := new(MonitorMetricsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NATGatewayProfileObservation) DeepCopyInto(out *NATGatewayProfileObservation) {
	*out = *in
	if in.EffectiveOutboundIps != nil {
		in, out := &in.EffectiveOutboundIps, &out.EffectiveOutboundIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NATGatewayProfileObservation.
func (in *NATGatewayProfileObservation) DeepCopy() *NATGatewayProfileObservation {
	if in == nil {
		return nil
	}
	out := new(NATGatewayProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NATGatewayProfileParameters) DeepCopyInto(out *NATGatewayProfileParameters) {
	*out = *in
	if in.IdleTimeoutInMinutes != nil {
		in, out := &in.IdleTimeoutInMinutes, &out.IdleTimeoutInMinutes
		*out = new(float64)
		**out = **in
	}
	if in.ManagedOutboundIPCount != nil {
		in, out := &in.ManagedOutboundIPCount, &out.ManagedOutboundIPCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NATGatewayProfileParameters.
func (in *NATGatewayProfileParameters) DeepCopy() *NATGatewayProfileParameters {
	if in == nil {
		return nil
	}
	out := new(NATGatewayProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkProfileObservation) DeepCopyInto(out *NetworkProfileObservation) {
	*out = *in
	if in.LoadBalancerProfile != nil {
		in, out := &in.LoadBalancerProfile, &out.LoadBalancerProfile
		*out = make([]LoadBalancerProfileObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NATGatewayProfile != nil {
		in, out := &in.NATGatewayProfile, &out.NATGatewayProfile
		*out = make([]NATGatewayProfileObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkProfileObservation.
func (in *NetworkProfileObservation) DeepCopy() *NetworkProfileObservation {
	if in == nil {
		return nil
	}
	out := new(NetworkProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkProfileParameters) DeepCopyInto(out *NetworkProfileParameters) {
	*out = *in
	if in.DNSServiceIP != nil {
		in, out := &in.DNSServiceIP, &out.DNSServiceIP
		*out = new(string)
		**out = **in
	}
	if in.DockerBridgeCidr != nil {
		in, out := &in.DockerBridgeCidr, &out.DockerBridgeCidr
		*out = new(string)
		**out = **in
	}
	if in.EbpfDataPlane != nil {
		in, out := &in.EbpfDataPlane, &out.EbpfDataPlane
		*out = new(string)
		**out = **in
	}
	if in.IPVersions != nil {
		in, out := &in.IPVersions, &out.IPVersions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LoadBalancerProfile != nil {
		in, out := &in.LoadBalancerProfile, &out.LoadBalancerProfile
		*out = make([]LoadBalancerProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoadBalancerSku != nil {
		in, out := &in.LoadBalancerSku, &out.LoadBalancerSku
		*out = new(string)
		**out = **in
	}
	if in.NATGatewayProfile != nil {
		in, out := &in.NATGatewayProfile, &out.NATGatewayProfile
		*out = make([]NATGatewayProfileParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkMode != nil {
		in, out := &in.NetworkMode, &out.NetworkMode
		*out = new(string)
		**out = **in
	}
	if in.NetworkPlugin != nil {
		in, out := &in.NetworkPlugin, &out.NetworkPlugin
		*out = new(string)
		**out = **in
	}
	if in.NetworkPluginMode != nil {
		in, out := &in.NetworkPluginMode, &out.NetworkPluginMode
		*out = new(string)
		**out = **in
	}
	if in.NetworkPolicy != nil {
		in, out := &in.NetworkPolicy, &out.NetworkPolicy
		*out = new(string)
		**out = **in
	}
	if in.OutboundType != nil {
		in, out := &in.OutboundType, &out.OutboundType
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodCidrs != nil {
		in, out := &in.PodCidrs, &out.PodCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidrs != nil {
		in, out := &in.ServiceCidrs, &out.ServiceCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkProfileParameters.
func (in *NetworkProfileParameters) DeepCopy() *NetworkProfileParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotAllowedObservation) DeepCopyInto(out *NotAllowedObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotAllowedObservation.
func (in *NotAllowedObservation) DeepCopy() *NotAllowedObservation {
	if in == nil {
		return nil
	}
	out := new(NotAllowedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotAllowedParameters) DeepCopyInto(out *NotAllowedParameters) {
	*out = *in
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(string)
		**out = **in
	}
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotAllowedParameters.
func (in *NotAllowedParameters) DeepCopy() *NotAllowedParameters {
	if in == nil {
		return nil
	}
	out := new(NotAllowedParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OmsAgentIdentityObservation) DeepCopyInto(out *OmsAgentIdentityObservation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OmsAgentIdentityObservation.
func (in *OmsAgentIdentityObservation) DeepCopy() *OmsAgentIdentityObservation {
	if in == nil {
		return nil
	}
	out := new(OmsAgentIdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OmsAgentIdentityParameters) DeepCopyInto(out *OmsAgentIdentityParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OmsAgentIdentityParameters.
func (in *OmsAgentIdentityParameters) DeepCopy() *OmsAgentIdentityParameters {
	if in == nil {
		return nil
	}
	out := new(OmsAgentIdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OmsAgentObservation) DeepCopyInto(out *OmsAgentObservation) {
	*out = *in
	if in.OmsAgentIdentity != nil {
		in, out := &in.OmsAgentIdentity, &out.OmsAgentIdentity
		*out = make([]OmsAgentIdentityObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OmsAgentObservation.
func (in *OmsAgentObservation) DeepCopy() *OmsAgentObservation {
	if in == nil {
		return nil
	}
	out := new(OmsAgentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OmsAgentParameters) DeepCopyInto(out *OmsAgentParameters) {
	*out = *in
	if in.LogAnalyticsWorkspaceID != nil {
		in, out := &in.LogAnalyticsWorkspaceID, &out.LogAnalyticsWorkspaceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OmsAgentParameters.
func (in *OmsAgentParameters) DeepCopy() *OmsAgentParameters {
	if in == nil {
		return nil
	}
	out := new(OmsAgentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SSHKeyObservation) DeepCopyInto(out *SSHKeyObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SSHKeyObservation.
func (in *SSHKeyObservation) DeepCopy() *SSHKeyObservation {
	if in == nil {
		return nil
	}
	out := new(SSHKeyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SSHKeyParameters) DeepCopyInto(out *SSHKeyParameters) {
	*out = *in
	if in.KeyData != nil {
		in, out := &in.KeyData, &out.KeyData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SSHKeyParameters.
func (in *SSHKeyParameters) DeepCopy() *SSHKeyParameters {
	if in == nil {
		return nil
	}
	out := new(SSHKeyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretIdentityObservation) DeepCopyInto(out *SecretIdentityObservation) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.UserAssignedIdentityID != nil {
		in, out := &in.UserAssignedIdentityID, &out.UserAssignedIdentityID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretIdentityObservation.
func (in *SecretIdentityObservation) DeepCopy() *SecretIdentityObservation {
	if in == nil {
		return nil
	}
	out := new(SecretIdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretIdentityParameters) DeepCopyInto(out *SecretIdentityParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretIdentityParameters.
func (in *SecretIdentityParameters) DeepCopy() *SecretIdentityParameters {
	if in == nil {
		return nil
	}
	out := new(SecretIdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicePrincipalObservation) DeepCopyInto(out *ServicePrincipalObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicePrincipalObservation.
func (in *ServicePrincipalObservation) DeepCopy() *ServicePrincipalObservation {
	if in == nil {
		return nil
	}
	out := new(ServicePrincipalObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicePrincipalParameters) DeepCopyInto(out *ServicePrincipalParameters) {
	*out = *in
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicePrincipalParameters.
func (in *ServicePrincipalParameters) DeepCopy() *ServicePrincipalParameters {
	if in == nil {
		return nil
	}
	out := new(ServicePrincipalParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageProfileObservation) DeepCopyInto(out *StorageProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageProfileObservation.
func (in *StorageProfileObservation) DeepCopy() *StorageProfileObservation {
	if in == nil {
		return nil
	}
	out := new(StorageProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageProfileParameters) DeepCopyInto(out *StorageProfileParameters) {
	*out = *in
	if in.BlobDriverEnabled != nil {
		in, out := &in.BlobDriverEnabled, &out.BlobDriverEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DiskDriverEnabled != nil {
		in, out := &in.DiskDriverEnabled, &out.DiskDriverEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DiskDriverVersion != nil {
		in, out := &in.DiskDriverVersion, &out.DiskDriverVersion
		*out = new(string)
		**out = **in
	}
	if in.FileDriverEnabled != nil {
		in, out := &in.FileDriverEnabled, &out.FileDriverEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotControllerEnabled != nil {
		in, out := &in.SnapshotControllerEnabled, &out.SnapshotControllerEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageProfileParameters.
func (in *StorageProfileParameters) DeepCopy() *StorageProfileParameters {
	if in == nil {
		return nil
	}
	out := new(StorageProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SysctlConfigObservation) DeepCopyInto(out *SysctlConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SysctlConfigObservation.
func (in *SysctlConfigObservation) DeepCopy() *SysctlConfigObservation {
	if in == nil {
		return nil
	}
	out := new(SysctlConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SysctlConfigParameters) DeepCopyInto(out *SysctlConfigParameters) {
	*out = *in
	if in.FsAioMaxNr != nil {
		in, out := &in.FsAioMaxNr, &out.FsAioMaxNr
		*out = new(float64)
		**out = **in
	}
	if in.FsFileMax != nil {
		in, out := &in.FsFileMax, &out.FsFileMax
		*out = new(float64)
		**out = **in
	}
	if in.FsInotifyMaxUserWatches != nil {
		in, out := &in.FsInotifyMaxUserWatches, &out.FsInotifyMaxUserWatches
		*out = new(float64)
		**out = **in
	}
	if in.FsNrOpen != nil {
		in, out := &in.FsNrOpen, &out.FsNrOpen
		*out = new(float64)
		**out = **in
	}
	if in.KernelThreadsMax != nil {
		in, out := &in.KernelThreadsMax, &out.KernelThreadsMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreNetdevMaxBacklog != nil {
		in, out := &in.NetCoreNetdevMaxBacklog, &out.NetCoreNetdevMaxBacklog
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreOptmemMax != nil {
		in, out := &in.NetCoreOptmemMax, &out.NetCoreOptmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreRmemDefault != nil {
		in, out := &in.NetCoreRmemDefault, &out.NetCoreRmemDefault
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreRmemMax != nil {
		in, out := &in.NetCoreRmemMax, &out.NetCoreRmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreSomaxconn != nil {
		in, out := &in.NetCoreSomaxconn, &out.NetCoreSomaxconn
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreWmemDefault != nil {
		in, out := &in.NetCoreWmemDefault, &out.NetCoreWmemDefault
		*out = new(float64)
		**out = **in
	}
	if in.NetCoreWmemMax != nil {
		in, out := &in.NetCoreWmemMax, &out.NetCoreWmemMax
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4IPLocalPortRangeMax != nil {
		in, out := &in.NetIPv4IPLocalPortRangeMax, &out.NetIPv4IPLocalPortRangeMax
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4IPLocalPortRangeMin != nil {
		in, out := &in.NetIPv4IPLocalPortRangeMin, &out.NetIPv4IPLocalPortRangeMin
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh1 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh1, &out.NetIPv4NeighDefaultGcThresh1
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh2 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh2, &out.NetIPv4NeighDefaultGcThresh2
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4NeighDefaultGcThresh3 != nil {
		in, out := &in.NetIPv4NeighDefaultGcThresh3, &out.NetIPv4NeighDefaultGcThresh3
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPFinTimeout != nil {
		in, out := &in.NetIPv4TCPFinTimeout, &out.NetIPv4TCPFinTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveIntvl != nil {
		in, out := &in.NetIPv4TCPKeepaliveIntvl, &out.NetIPv4TCPKeepaliveIntvl
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveProbes != nil {
		in, out := &in.NetIPv4TCPKeepaliveProbes, &out.NetIPv4TCPKeepaliveProbes
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPKeepaliveTime != nil {
		in, out := &in.NetIPv4TCPKeepaliveTime, &out.NetIPv4TCPKeepaliveTime
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPMaxSynBacklog != nil {
		in, out := &in.NetIPv4TCPMaxSynBacklog, &out.NetIPv4TCPMaxSynBacklog
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPMaxTwBuckets != nil {
		in, out := &in.NetIPv4TCPMaxTwBuckets, &out.NetIPv4TCPMaxTwBuckets
		*out = new(float64)
		**out = **in
	}
	if in.NetIPv4TCPTwReuse != nil {
		in, out := &in.NetIPv4TCPTwReuse, &out.NetIPv4TCPTwReuse
		*out = new(bool)
		**out = **in
	}
	if in.NetNetfilterNfConntrackBuckets != nil {
		in, out := &in.NetNetfilterNfConntrackBuckets, &out.NetNetfilterNfConntrackBuckets
		*out = new(float64)
		**out = **in
	}
	if in.NetNetfilterNfConntrackMax != nil {
		in, out := &in.NetNetfilterNfConntrackMax, &out.NetNetfilterNfConntrackMax
		*out = new(float64)
		**out = **in
	}
	if in.VMMaxMapCount != nil {
		in, out := &in.VMMaxMapCount, &out.VMMaxMapCount
		*out = new(float64)
		**out = **in
	}
	if in.VMSwappiness != nil {
		in, out := &in.VMSwappiness, &out.VMSwappiness
		*out = new(float64)
		**out = **in
	}
	if in.VMVfsCachePressure != nil {
		in, out := &in.VMVfsCachePressure, &out.VMVfsCachePressure
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SysctlConfigParameters.
func (in *SysctlConfigParameters) DeepCopy() *SysctlConfigParameters {
	if in == nil {
		return nil
	}
	out := new(SysctlConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UpgradeSettingsObservation) DeepCopyInto(out *UpgradeSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UpgradeSettingsObservation.
func (in *UpgradeSettingsObservation) DeepCopy() *UpgradeSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(UpgradeSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UpgradeSettingsParameters) DeepCopyInto(out *UpgradeSettingsParameters) {
	*out = *in
	if in.MaxSurge != nil {
		in, out := &in.MaxSurge, &out.MaxSurge
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UpgradeSettingsParameters.
func (in *UpgradeSettingsParameters) DeepCopy() *UpgradeSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(UpgradeSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAppRoutingObservation) DeepCopyInto(out *WebAppRoutingObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAppRoutingObservation.
func (in *WebAppRoutingObservation) DeepCopy() *WebAppRoutingObservation {
	if in == nil {
		return nil
	}
	out := new(WebAppRoutingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAppRoutingParameters) DeepCopyInto(out *WebAppRoutingParameters) {
	*out = *in
	if in.DNSZoneID != nil {
		in, out := &in.DNSZoneID, &out.DNSZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAppRoutingParameters.
func (in *WebAppRoutingParameters) DeepCopy() *WebAppRoutingParameters {
	if in == nil {
		return nil
	}
	out := new(WebAppRoutingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsProfileObservation) DeepCopyInto(out *WindowsProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsProfileObservation.
func (in *WindowsProfileObservation) DeepCopy() *WindowsProfileObservation {
	if in == nil {
		return nil
	}
	out := new(WindowsProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsProfileParameters) DeepCopyInto(out *WindowsProfileParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AdminUsername != nil {
		in, out := &in.AdminUsername, &out.AdminUsername
		*out = new(string)
		**out = **in
	}
	if in.Gmsa != nil {
		in, out := &in.Gmsa, &out.Gmsa
		*out = make([]GmsaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsProfileParameters.
func (in *WindowsProfileParameters) DeepCopy() *WindowsProfileParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsProfileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkloadAutoscalerProfileObservation) DeepCopyInto(out *WorkloadAutoscalerProfileObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkloadAutoscalerProfileObservation.
func (in *WorkloadAutoscalerProfileObservation) DeepCopy() *WorkloadAutoscalerProfileObservation {
	if in == nil {
		return nil
	}
	out := new(WorkloadAutoscalerProfileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkloadAutoscalerProfileParameters) DeepCopyInto(out *WorkloadAutoscalerProfileParameters) {
	*out = *in
	if in.KedaEnabled != nil {
		in, out := &in.KedaEnabled, &out.KedaEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkloadAutoscalerProfileParameters.
func (in *WorkloadAutoscalerProfileParameters) DeepCopy() *WorkloadAutoscalerProfileParameters {
	if in == nil {
		return nil
	}
	out := new(WorkloadAutoscalerProfileParameters)
	in.DeepCopyInto(out)
	return out
}
