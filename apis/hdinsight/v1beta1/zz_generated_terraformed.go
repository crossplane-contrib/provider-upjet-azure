/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this HadoopCluster
func (mg *HadoopCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_hadoop_cluster"
}

// GetConnectionDetailsMapping for this HadoopCluster
func (tr *HadoopCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"extension[*].primary_key": "spec.forProvider.extension[*].primaryKeySecretRef", "gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this HadoopCluster
func (tr *HadoopCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HadoopCluster
func (tr *HadoopCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HadoopCluster
func (tr *HadoopCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HadoopCluster
func (tr *HadoopCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HadoopCluster
func (tr *HadoopCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HadoopCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HadoopCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &HadoopClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HadoopCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HBaseCluster
func (mg *HBaseCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_hbase_cluster"
}

// GetConnectionDetailsMapping for this HBaseCluster
func (tr *HBaseCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"extension[*].primary_key": "spec.forProvider.extension[*].primaryKeySecretRef", "gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this HBaseCluster
func (tr *HBaseCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HBaseCluster
func (tr *HBaseCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HBaseCluster
func (tr *HBaseCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HBaseCluster
func (tr *HBaseCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HBaseCluster
func (tr *HBaseCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HBaseCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HBaseCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &HBaseClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HBaseCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InteractiveQueryCluster
func (mg *InteractiveQueryCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_interactive_query_cluster"
}

// GetConnectionDetailsMapping for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"extension[*].primary_key": "spec.forProvider.extension[*].primaryKeySecretRef", "gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InteractiveQueryCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InteractiveQueryCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &InteractiveQueryClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InteractiveQueryCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this KafkaCluster
func (mg *KafkaCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_kafka_cluster"
}

// GetConnectionDetailsMapping for this KafkaCluster
func (tr *KafkaCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"extension[*].primary_key": "spec.forProvider.extension[*].primaryKeySecretRef", "gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].kafka_management_node[*].password": "spec.forProvider.roles[*].kafkaManagementNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this KafkaCluster
func (tr *KafkaCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KafkaCluster
func (tr *KafkaCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KafkaCluster
func (tr *KafkaCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KafkaCluster
func (tr *KafkaCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KafkaCluster
func (tr *KafkaCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KafkaCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KafkaCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &KafkaClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KafkaCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SparkCluster
func (mg *SparkCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_spark_cluster"
}

// GetConnectionDetailsMapping for this SparkCluster
func (tr *SparkCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"extension[*].primary_key": "spec.forProvider.extension[*].primaryKeySecretRef", "gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this SparkCluster
func (tr *SparkCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SparkCluster
func (tr *SparkCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SparkCluster
func (tr *SparkCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SparkCluster
func (tr *SparkCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SparkCluster
func (tr *SparkCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SparkCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SparkCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &SparkClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SparkCluster) GetTerraformSchemaVersion() int {
	return 0
}
