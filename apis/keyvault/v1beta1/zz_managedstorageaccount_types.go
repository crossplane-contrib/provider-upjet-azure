// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedStorageAccountInitParameters struct {

	// Should Storage Account access key be regenerated periodically?
	RegenerateKeyAutomatically *bool `json:"regenerateKeyAutomatically,omitempty" tf:"regenerate_key_automatically,omitempty"`

	// How often Storage Account access key should be regenerated. Value needs to be in ISO 8601 duration format.
	RegenerationPeriod *string `json:"regenerationPeriod,omitempty" tf:"regeneration_period,omitempty"`

	// Which Storage Account access key that is managed by Key Vault. Possible values are key1 and key2.
	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key,omitempty"`

	// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ManagedStorageAccountObservation struct {

	// The ID of the Key Vault Managed Storage Account.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// Should Storage Account access key be regenerated periodically?
	RegenerateKeyAutomatically *bool `json:"regenerateKeyAutomatically,omitempty" tf:"regenerate_key_automatically,omitempty"`

	// How often Storage Account access key should be regenerated. Value needs to be in ISO 8601 duration format.
	RegenerationPeriod *string `json:"regenerationPeriod,omitempty" tf:"regeneration_period,omitempty"`

	// The ID of the Storage Account.
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`

	// Which Storage Account access key that is managed by Key Vault. Possible values are key1 and key2.
	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key,omitempty"`

	// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ManagedStorageAccountParameters struct {

	// The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Vault
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// Reference to a Vault to populate keyVaultId.
	// +kubebuilder:validation:Optional
	KeyVaultIDRef *v1.Reference `json:"keyVaultIdRef,omitempty" tf:"-"`

	// Selector for a Vault to populate keyVaultId.
	// +kubebuilder:validation:Optional
	KeyVaultIDSelector *v1.Selector `json:"keyVaultIdSelector,omitempty" tf:"-"`

	// Should Storage Account access key be regenerated periodically?
	// +kubebuilder:validation:Optional
	RegenerateKeyAutomatically *bool `json:"regenerateKeyAutomatically,omitempty" tf:"regenerate_key_automatically,omitempty"`

	// How often Storage Account access key should be regenerated. Value needs to be in ISO 8601 duration format.
	// +kubebuilder:validation:Optional
	RegenerationPeriod *string `json:"regenerationPeriod,omitempty" tf:"regeneration_period,omitempty"`

	// The ID of the Storage Account.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`

	// Reference to a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDRef *v1.Reference `json:"storageAccountIdRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDSelector *v1.Selector `json:"storageAccountIdSelector,omitempty" tf:"-"`

	// Which Storage Account access key that is managed by Key Vault. Possible values are key1 and key2.
	// +kubebuilder:validation:Optional
	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key,omitempty"`

	// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ManagedStorageAccountSpec defines the desired state of ManagedStorageAccount
type ManagedStorageAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedStorageAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedStorageAccountInitParameters `json:"initProvider,omitempty"`
}

// ManagedStorageAccountStatus defines the observed state of ManagedStorageAccount.
type ManagedStorageAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedStorageAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedStorageAccount is the Schema for the ManagedStorageAccounts API. Manages a Key Vault Managed Storage Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagedStorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageAccountKey) || (has(self.initProvider) && has(self.initProvider.storageAccountKey))",message="spec.forProvider.storageAccountKey is a required parameter"
	Spec   ManagedStorageAccountSpec   `json:"spec"`
	Status ManagedStorageAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedStorageAccountList contains a list of ManagedStorageAccounts
type ManagedStorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedStorageAccount `json:"items"`
}

// Repository type metadata.
var (
	ManagedStorageAccount_Kind             = "ManagedStorageAccount"
	ManagedStorageAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedStorageAccount_Kind}.String()
	ManagedStorageAccount_KindAPIVersion   = ManagedStorageAccount_Kind + "." + CRDGroupVersion.String()
	ManagedStorageAccount_GroupVersionKind = CRDGroupVersion.WithKind(ManagedStorageAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedStorageAccount{}, &ManagedStorageAccountList{})
}
