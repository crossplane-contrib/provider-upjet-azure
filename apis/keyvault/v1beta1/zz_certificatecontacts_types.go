// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateContactsContactInitParameters struct {

	// E-mail address of the contact.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Name of the contact.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of the contact.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type CertificateContactsContactObservation struct {

	// E-mail address of the contact.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Name of the contact.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of the contact.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type CertificateContactsContactParameters struct {

	// E-mail address of the contact.
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// Name of the contact.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of the contact.
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type CertificateContactsInitParameters struct {

	// One or more contact blocks as defined below.
	Contact []CertificateContactsContactInitParameters `json:"contact,omitempty" tf:"contact,omitempty"`
}

type CertificateContactsObservation struct {

	// One or more contact blocks as defined below.
	Contact []CertificateContactsContactObservation `json:"contact,omitempty" tf:"contact,omitempty"`

	// The ID of the Key Vault Certificate Contacts.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`
}

type CertificateContactsParameters struct {

	// One or more contact blocks as defined below.
	// +kubebuilder:validation:Optional
	Contact []CertificateContactsContactParameters `json:"contact,omitempty" tf:"contact,omitempty"`

	// The ID of the Key Vault. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Vault
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// Reference to a Vault in keyvault to populate keyVaultId.
	// +kubebuilder:validation:Optional
	KeyVaultIDRef *v1.Reference `json:"keyVaultIdRef,omitempty" tf:"-"`

	// Selector for a Vault in keyvault to populate keyVaultId.
	// +kubebuilder:validation:Optional
	KeyVaultIDSelector *v1.Selector `json:"keyVaultIdSelector,omitempty" tf:"-"`
}

// CertificateContactsSpec defines the desired state of CertificateContacts
type CertificateContactsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateContactsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CertificateContactsInitParameters `json:"initProvider,omitempty"`
}

// CertificateContactsStatus defines the observed state of CertificateContacts.
type CertificateContactsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateContactsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateContacts is the Schema for the CertificateContactss API. Manages Key Vault Certificate Contacts.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CertificateContacts struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contact) || (has(self.initProvider) && has(self.initProvider.contact))",message="spec.forProvider.contact is a required parameter"
	Spec   CertificateContactsSpec   `json:"spec"`
	Status CertificateContactsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateContactsList contains a list of CertificateContactss
type CertificateContactsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateContacts `json:"items"`
}

// Repository type metadata.
var (
	CertificateContacts_Kind             = "CertificateContacts"
	CertificateContacts_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateContacts_Kind}.String()
	CertificateContacts_KindAPIVersion   = CertificateContacts_Kind + "." + CRDGroupVersion.String()
	CertificateContacts_GroupVersionKind = CRDGroupVersion.WithKind(CertificateContacts_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateContacts{}, &CertificateContactsList{})
}
