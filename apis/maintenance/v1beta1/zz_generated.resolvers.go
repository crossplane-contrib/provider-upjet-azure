//go:build (maintenance || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *MaintenanceAssignmentDedicatedHost) ResolveReferences( // ResolveReferences of this MaintenanceAssignmentDedicatedHost.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta1", "DedicatedHost", "DedicatedHostList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DedicatedHostID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DedicatedHostIDRef,
			Selector:     mg.Spec.ForProvider.DedicatedHostIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DedicatedHostID")
	}
	mg.Spec.ForProvider.DedicatedHostID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DedicatedHostIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("maintenance.azure.upbound.io", "v1beta2", "MaintenanceConfiguration", "MaintenanceConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MaintenanceConfigurationID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.MaintenanceConfigurationIDRef,
			Selector:     mg.Spec.ForProvider.MaintenanceConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MaintenanceConfigurationID")
	}
	mg.Spec.ForProvider.MaintenanceConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MaintenanceConfigurationIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta1", "DedicatedHost", "DedicatedHostList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DedicatedHostID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DedicatedHostIDRef,
			Selector:     mg.Spec.InitProvider.DedicatedHostIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DedicatedHostID")
	}
	mg.Spec.InitProvider.DedicatedHostID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DedicatedHostIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("maintenance.azure.upbound.io", "v1beta2", "MaintenanceConfiguration", "MaintenanceConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MaintenanceConfigurationID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.MaintenanceConfigurationIDRef,
			Selector:     mg.Spec.InitProvider.MaintenanceConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MaintenanceConfigurationID")
	}
	mg.Spec.InitProvider.MaintenanceConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MaintenanceConfigurationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MaintenanceAssignmentVirtualMachine.
func (mg *MaintenanceAssignmentVirtualMachine) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("maintenance.azure.upbound.io", "v1beta2", "MaintenanceConfiguration", "MaintenanceConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MaintenanceConfigurationID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.MaintenanceConfigurationIDRef,
			Selector:     mg.Spec.ForProvider.MaintenanceConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MaintenanceConfigurationID")
	}
	mg.Spec.ForProvider.MaintenanceConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MaintenanceConfigurationIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.azure.upbound.io", "v1beta2", "LinuxVirtualMachine", "LinuxVirtualMachineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualMachineID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VirtualMachineIDRef,
			Selector:     mg.Spec.ForProvider.VirtualMachineIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualMachineID")
	}
	mg.Spec.ForProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualMachineIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("maintenance.azure.upbound.io", "v1beta2", "MaintenanceConfiguration", "MaintenanceConfigurationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MaintenanceConfigurationID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.MaintenanceConfigurationIDRef,
			Selector:     mg.Spec.InitProvider.MaintenanceConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MaintenanceConfigurationID")
	}
	mg.Spec.InitProvider.MaintenanceConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MaintenanceConfigurationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MaintenanceConfiguration.
func (mg *MaintenanceConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
