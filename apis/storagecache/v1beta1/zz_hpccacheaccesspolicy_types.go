// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HPCCacheAccessPolicyAccessRuleInitParameters struct {

	// The access level for this rule. Possible values are: rw, ro, no.
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// The anonymous GID used when root_squash_enabled is true.
	AnonymousGID *float64 `json:"anonymousGid,omitempty" tf:"anonymous_gid,omitempty"`

	// The anonymous UID used when root_squash_enabled is true.
	AnonymousUID *float64 `json:"anonymousUid,omitempty" tf:"anonymous_uid,omitempty"`

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether to enable root squash?
	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled,omitempty"`

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Whether allow access to subdirectories under the root export?
	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled,omitempty"`

	// Whether SUID is allowed?
	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled,omitempty"`
}

type HPCCacheAccessPolicyAccessRuleObservation struct {

	// The access level for this rule. Possible values are: rw, ro, no.
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// The anonymous GID used when root_squash_enabled is true.
	AnonymousGID *float64 `json:"anonymousGid,omitempty" tf:"anonymous_gid,omitempty"`

	// The anonymous UID used when root_squash_enabled is true.
	AnonymousUID *float64 `json:"anonymousUid,omitempty" tf:"anonymous_uid,omitempty"`

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether to enable root squash?
	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled,omitempty"`

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Whether allow access to subdirectories under the root export?
	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled,omitempty"`

	// Whether SUID is allowed?
	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled,omitempty"`
}

type HPCCacheAccessPolicyAccessRuleParameters struct {

	// The access level for this rule. Possible values are: rw, ro, no.
	// +kubebuilder:validation:Optional
	Access *string `json:"access" tf:"access,omitempty"`

	// The anonymous GID used when root_squash_enabled is true.
	// +kubebuilder:validation:Optional
	AnonymousGID *float64 `json:"anonymousGid,omitempty" tf:"anonymous_gid,omitempty"`

	// The anonymous UID used when root_squash_enabled is true.
	// +kubebuilder:validation:Optional
	AnonymousUID *float64 `json:"anonymousUid,omitempty" tf:"anonymous_uid,omitempty"`

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether to enable root squash?
	// +kubebuilder:validation:Optional
	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled,omitempty"`

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope" tf:"scope,omitempty"`

	// Whether allow access to subdirectories under the root export?
	// +kubebuilder:validation:Optional
	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled,omitempty"`

	// Whether SUID is allowed?
	// +kubebuilder:validation:Optional
	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled,omitempty"`
}

type HPCCacheAccessPolicyInitParameters struct {

	// Up to three access_rule blocks as defined below.
	AccessRule []HPCCacheAccessPolicyAccessRuleInitParameters `json:"accessRule,omitempty" tf:"access_rule,omitempty"`
}

type HPCCacheAccessPolicyObservation struct {

	// Up to three access_rule blocks as defined below.
	AccessRule []HPCCacheAccessPolicyAccessRuleObservation `json:"accessRule,omitempty" tf:"access_rule,omitempty"`

	// The ID of the HPC Cache that this HPC Cache Access Policy resides in. Changing this forces a new HPC Cache Access Policy to be created.
	HPCCacheID *string `json:"hpcCacheId,omitempty" tf:"hpc_cache_id,omitempty"`

	// The ID of the HPC Cache Access Policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HPCCacheAccessPolicyParameters struct {

	// Up to three access_rule blocks as defined below.
	// +kubebuilder:validation:Optional
	AccessRule []HPCCacheAccessPolicyAccessRuleParameters `json:"accessRule,omitempty" tf:"access_rule,omitempty"`

	// The ID of the HPC Cache that this HPC Cache Access Policy resides in. Changing this forces a new HPC Cache Access Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storagecache/v1beta1.HPCCache
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	HPCCacheID *string `json:"hpcCacheId,omitempty" tf:"hpc_cache_id,omitempty"`

	// Reference to a HPCCache in storagecache to populate hpcCacheId.
	// +kubebuilder:validation:Optional
	HPCCacheIDRef *v1.Reference `json:"hpcCacheIdRef,omitempty" tf:"-"`

	// Selector for a HPCCache in storagecache to populate hpcCacheId.
	// +kubebuilder:validation:Optional
	HPCCacheIDSelector *v1.Selector `json:"hpcCacheIdSelector,omitempty" tf:"-"`
}

// HPCCacheAccessPolicySpec defines the desired state of HPCCacheAccessPolicy
type HPCCacheAccessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HPCCacheAccessPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HPCCacheAccessPolicyInitParameters `json:"initProvider,omitempty"`
}

// HPCCacheAccessPolicyStatus defines the observed state of HPCCacheAccessPolicy.
type HPCCacheAccessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HPCCacheAccessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HPCCacheAccessPolicy is the Schema for the HPCCacheAccessPolicys API. Manages a HPC Cache Access Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HPCCacheAccessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessRule) || (has(self.initProvider) && has(self.initProvider.accessRule))",message="spec.forProvider.accessRule is a required parameter"
	Spec   HPCCacheAccessPolicySpec   `json:"spec"`
	Status HPCCacheAccessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HPCCacheAccessPolicyList contains a list of HPCCacheAccessPolicys
type HPCCacheAccessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HPCCacheAccessPolicy `json:"items"`
}

// Repository type metadata.
var (
	HPCCacheAccessPolicy_Kind             = "HPCCacheAccessPolicy"
	HPCCacheAccessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HPCCacheAccessPolicy_Kind}.String()
	HPCCacheAccessPolicy_KindAPIVersion   = HPCCacheAccessPolicy_Kind + "." + CRDGroupVersion.String()
	HPCCacheAccessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(HPCCacheAccessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&HPCCacheAccessPolicy{}, &HPCCacheAccessPolicyList{})
}
