//go:build (netapp || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Account) DeepCopyInto(out *Account) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Account.
func (in *Account) DeepCopy() *Account {
	if in == nil {
		return nil
	}
	out := new(Account)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Account) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountInitParameters) DeepCopyInto(out *AccountInitParameters) {
	*out = *in
	if in.ActiveDirectory != nil {
		in, out := &in.ActiveDirectory, &out.ActiveDirectory
		*out = new(ActiveDirectoryInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountInitParameters.
func (in *AccountInitParameters) DeepCopy() *AccountInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccountInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountList) DeepCopyInto(out *AccountList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Account, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountList.
func (in *AccountList) DeepCopy() *AccountList {
	if in == nil {
		return nil
	}
	out := new(AccountList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AccountList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountObservation) DeepCopyInto(out *AccountObservation) {
	*out = *in
	if in.ActiveDirectory != nil {
		in, out := &in.ActiveDirectory, &out.ActiveDirectory
		*out = new(ActiveDirectoryObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountObservation.
func (in *AccountObservation) DeepCopy() *AccountObservation {
	if in == nil {
		return nil
	}
	out := new(AccountObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountParameters) DeepCopyInto(out *AccountParameters) {
	*out = *in
	if in.ActiveDirectory != nil {
		in, out := &in.ActiveDirectory, &out.ActiveDirectory
		*out = new(ActiveDirectoryParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Identity != nil {
		in, out := &in.Identity, &out.Identity
		*out = new(IdentityParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupNameRef != nil {
		in, out := &in.ResourceGroupNameRef, &out.ResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupNameSelector != nil {
		in, out := &in.ResourceGroupNameSelector, &out.ResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountParameters.
func (in *AccountParameters) DeepCopy() *AccountParameters {
	if in == nil {
		return nil
	}
	out := new(AccountParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountSpec) DeepCopyInto(out *AccountSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountSpec.
func (in *AccountSpec) DeepCopy() *AccountSpec {
	if in == nil {
		return nil
	}
	out := new(AccountSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountStatus) DeepCopyInto(out *AccountStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountStatus.
func (in *AccountStatus) DeepCopy() *AccountStatus {
	if in == nil {
		return nil
	}
	out := new(AccountStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveDirectoryInitParameters) DeepCopyInto(out *ActiveDirectoryInitParameters) {
	*out = *in
	if in.AesEncryptionEnabled != nil {
		in, out := &in.AesEncryptionEnabled, &out.AesEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DNSServers != nil {
		in, out := &in.DNSServers, &out.DNSServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.KerberosAdName != nil {
		in, out := &in.KerberosAdName, &out.KerberosAdName
		*out = new(string)
		**out = **in
	}
	if in.KerberosKdcIP != nil {
		in, out := &in.KerberosKdcIP, &out.KerberosKdcIP
		*out = new(string)
		**out = **in
	}
	if in.LdapOverTLSEnabled != nil {
		in, out := &in.LdapOverTLSEnabled, &out.LdapOverTLSEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LdapSigningEnabled != nil {
		in, out := &in.LdapSigningEnabled, &out.LdapSigningEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LocalNFSUsersWithLdapAllowed != nil {
		in, out := &in.LocalNFSUsersWithLdapAllowed, &out.LocalNFSUsersWithLdapAllowed
		*out = new(bool)
		**out = **in
	}
	if in.OrganizationalUnit != nil {
		in, out := &in.OrganizationalUnit, &out.OrganizationalUnit
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.SMBServerName != nil {
		in, out := &in.SMBServerName, &out.SMBServerName
		*out = new(string)
		**out = **in
	}
	if in.ServerRootCACertificateSecretRef != nil {
		in, out := &in.ServerRootCACertificateSecretRef, &out.ServerRootCACertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SiteName != nil {
		in, out := &in.SiteName, &out.SiteName
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveDirectoryInitParameters.
func (in *ActiveDirectoryInitParameters) DeepCopy() *ActiveDirectoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ActiveDirectoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveDirectoryObservation) DeepCopyInto(out *ActiveDirectoryObservation) {
	*out = *in
	if in.AesEncryptionEnabled != nil {
		in, out := &in.AesEncryptionEnabled, &out.AesEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DNSServers != nil {
		in, out := &in.DNSServers, &out.DNSServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.KerberosAdName != nil {
		in, out := &in.KerberosAdName, &out.KerberosAdName
		*out = new(string)
		**out = **in
	}
	if in.KerberosKdcIP != nil {
		in, out := &in.KerberosKdcIP, &out.KerberosKdcIP
		*out = new(string)
		**out = **in
	}
	if in.LdapOverTLSEnabled != nil {
		in, out := &in.LdapOverTLSEnabled, &out.LdapOverTLSEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LdapSigningEnabled != nil {
		in, out := &in.LdapSigningEnabled, &out.LdapSigningEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LocalNFSUsersWithLdapAllowed != nil {
		in, out := &in.LocalNFSUsersWithLdapAllowed, &out.LocalNFSUsersWithLdapAllowed
		*out = new(bool)
		**out = **in
	}
	if in.OrganizationalUnit != nil {
		in, out := &in.OrganizationalUnit, &out.OrganizationalUnit
		*out = new(string)
		**out = **in
	}
	if in.SMBServerName != nil {
		in, out := &in.SMBServerName, &out.SMBServerName
		*out = new(string)
		**out = **in
	}
	if in.SiteName != nil {
		in, out := &in.SiteName, &out.SiteName
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveDirectoryObservation.
func (in *ActiveDirectoryObservation) DeepCopy() *ActiveDirectoryObservation {
	if in == nil {
		return nil
	}
	out := new(ActiveDirectoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActiveDirectoryParameters) DeepCopyInto(out *ActiveDirectoryParameters) {
	*out = *in
	if in.AesEncryptionEnabled != nil {
		in, out := &in.AesEncryptionEnabled, &out.AesEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DNSServers != nil {
		in, out := &in.DNSServers, &out.DNSServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.KerberosAdName != nil {
		in, out := &in.KerberosAdName, &out.KerberosAdName
		*out = new(string)
		**out = **in
	}
	if in.KerberosKdcIP != nil {
		in, out := &in.KerberosKdcIP, &out.KerberosKdcIP
		*out = new(string)
		**out = **in
	}
	if in.LdapOverTLSEnabled != nil {
		in, out := &in.LdapOverTLSEnabled, &out.LdapOverTLSEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LdapSigningEnabled != nil {
		in, out := &in.LdapSigningEnabled, &out.LdapSigningEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LocalNFSUsersWithLdapAllowed != nil {
		in, out := &in.LocalNFSUsersWithLdapAllowed, &out.LocalNFSUsersWithLdapAllowed
		*out = new(bool)
		**out = **in
	}
	if in.OrganizationalUnit != nil {
		in, out := &in.OrganizationalUnit, &out.OrganizationalUnit
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.SMBServerName != nil {
		in, out := &in.SMBServerName, &out.SMBServerName
		*out = new(string)
		**out = **in
	}
	if in.ServerRootCACertificateSecretRef != nil {
		in, out := &in.ServerRootCACertificateSecretRef, &out.ServerRootCACertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SiteName != nil {
		in, out := &in.SiteName, &out.SiteName
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActiveDirectoryParameters.
func (in *ActiveDirectoryParameters) DeepCopy() *ActiveDirectoryParameters {
	if in == nil {
		return nil
	}
	out := new(ActiveDirectoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DailyScheduleInitParameters) DeepCopyInto(out *DailyScheduleInitParameters) {
	*out = *in
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DailyScheduleInitParameters.
func (in *DailyScheduleInitParameters) DeepCopy() *DailyScheduleInitParameters {
	if in == nil {
		return nil
	}
	out := new(DailyScheduleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DailyScheduleObservation) DeepCopyInto(out *DailyScheduleObservation) {
	*out = *in
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DailyScheduleObservation.
func (in *DailyScheduleObservation) DeepCopy() *DailyScheduleObservation {
	if in == nil {
		return nil
	}
	out := new(DailyScheduleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DailyScheduleParameters) DeepCopyInto(out *DailyScheduleParameters) {
	*out = *in
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DailyScheduleParameters.
func (in *DailyScheduleParameters) DeepCopy() *DailyScheduleParameters {
	if in == nil {
		return nil
	}
	out := new(DailyScheduleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionReplicationInitParameters) DeepCopyInto(out *DataProtectionReplicationInitParameters) {
	*out = *in
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeLocation != nil {
		in, out := &in.RemoteVolumeLocation, &out.RemoteVolumeLocation
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeResourceID != nil {
		in, out := &in.RemoteVolumeResourceID, &out.RemoteVolumeResourceID
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeResourceIDRef != nil {
		in, out := &in.RemoteVolumeResourceIDRef, &out.RemoteVolumeResourceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RemoteVolumeResourceIDSelector != nil {
		in, out := &in.RemoteVolumeResourceIDSelector, &out.RemoteVolumeResourceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ReplicationFrequency != nil {
		in, out := &in.ReplicationFrequency, &out.ReplicationFrequency
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionReplicationInitParameters.
func (in *DataProtectionReplicationInitParameters) DeepCopy() *DataProtectionReplicationInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataProtectionReplicationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionReplicationObservation) DeepCopyInto(out *DataProtectionReplicationObservation) {
	*out = *in
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeLocation != nil {
		in, out := &in.RemoteVolumeLocation, &out.RemoteVolumeLocation
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeResourceID != nil {
		in, out := &in.RemoteVolumeResourceID, &out.RemoteVolumeResourceID
		*out = new(string)
		**out = **in
	}
	if in.ReplicationFrequency != nil {
		in, out := &in.ReplicationFrequency, &out.ReplicationFrequency
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionReplicationObservation.
func (in *DataProtectionReplicationObservation) DeepCopy() *DataProtectionReplicationObservation {
	if in == nil {
		return nil
	}
	out := new(DataProtectionReplicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionReplicationParameters) DeepCopyInto(out *DataProtectionReplicationParameters) {
	*out = *in
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeLocation != nil {
		in, out := &in.RemoteVolumeLocation, &out.RemoteVolumeLocation
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeResourceID != nil {
		in, out := &in.RemoteVolumeResourceID, &out.RemoteVolumeResourceID
		*out = new(string)
		**out = **in
	}
	if in.RemoteVolumeResourceIDRef != nil {
		in, out := &in.RemoteVolumeResourceIDRef, &out.RemoteVolumeResourceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RemoteVolumeResourceIDSelector != nil {
		in, out := &in.RemoteVolumeResourceIDSelector, &out.RemoteVolumeResourceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ReplicationFrequency != nil {
		in, out := &in.ReplicationFrequency, &out.ReplicationFrequency
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionReplicationParameters.
func (in *DataProtectionReplicationParameters) DeepCopy() *DataProtectionReplicationParameters {
	if in == nil {
		return nil
	}
	out := new(DataProtectionReplicationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionSnapshotPolicyInitParameters) DeepCopyInto(out *DataProtectionSnapshotPolicyInitParameters) {
	*out = *in
	if in.SnapshotPolicyID != nil {
		in, out := &in.SnapshotPolicyID, &out.SnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.SnapshotPolicyIDRef != nil {
		in, out := &in.SnapshotPolicyIDRef, &out.SnapshotPolicyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SnapshotPolicyIDSelector != nil {
		in, out := &in.SnapshotPolicyIDSelector, &out.SnapshotPolicyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionSnapshotPolicyInitParameters.
func (in *DataProtectionSnapshotPolicyInitParameters) DeepCopy() *DataProtectionSnapshotPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataProtectionSnapshotPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionSnapshotPolicyObservation) DeepCopyInto(out *DataProtectionSnapshotPolicyObservation) {
	*out = *in
	if in.SnapshotPolicyID != nil {
		in, out := &in.SnapshotPolicyID, &out.SnapshotPolicyID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionSnapshotPolicyObservation.
func (in *DataProtectionSnapshotPolicyObservation) DeepCopy() *DataProtectionSnapshotPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(DataProtectionSnapshotPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProtectionSnapshotPolicyParameters) DeepCopyInto(out *DataProtectionSnapshotPolicyParameters) {
	*out = *in
	if in.SnapshotPolicyID != nil {
		in, out := &in.SnapshotPolicyID, &out.SnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.SnapshotPolicyIDRef != nil {
		in, out := &in.SnapshotPolicyIDRef, &out.SnapshotPolicyIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SnapshotPolicyIDSelector != nil {
		in, out := &in.SnapshotPolicyIDSelector, &out.SnapshotPolicyIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProtectionSnapshotPolicyParameters.
func (in *DataProtectionSnapshotPolicyParameters) DeepCopy() *DataProtectionSnapshotPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(DataProtectionSnapshotPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExportPolicyRuleInitParameters) DeepCopyInto(out *ExportPolicyRuleInitParameters) {
	*out = *in
	if in.AllowedClients != nil {
		in, out := &in.AllowedClients, &out.AllowedClients
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Kerberos5IReadOnlyEnabled != nil {
		in, out := &in.Kerberos5IReadOnlyEnabled, &out.Kerberos5IReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5IReadWriteEnabled != nil {
		in, out := &in.Kerberos5IReadWriteEnabled, &out.Kerberos5IReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadOnlyEnabled != nil {
		in, out := &in.Kerberos5PReadOnlyEnabled, &out.Kerberos5PReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadWriteEnabled != nil {
		in, out := &in.Kerberos5PReadWriteEnabled, &out.Kerberos5PReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadOnlyEnabled != nil {
		in, out := &in.Kerberos5ReadOnlyEnabled, &out.Kerberos5ReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadWriteEnabled != nil {
		in, out := &in.Kerberos5ReadWriteEnabled, &out.Kerberos5ReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolsEnabled != nil {
		in, out := &in.ProtocolsEnabled, &out.ProtocolsEnabled
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RootAccessEnabled != nil {
		in, out := &in.RootAccessEnabled, &out.RootAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RuleIndex != nil {
		in, out := &in.RuleIndex, &out.RuleIndex
		*out = new(float64)
		**out = **in
	}
	if in.UnixReadOnly != nil {
		in, out := &in.UnixReadOnly, &out.UnixReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.UnixReadWrite != nil {
		in, out := &in.UnixReadWrite, &out.UnixReadWrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExportPolicyRuleInitParameters.
func (in *ExportPolicyRuleInitParameters) DeepCopy() *ExportPolicyRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExportPolicyRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExportPolicyRuleObservation) DeepCopyInto(out *ExportPolicyRuleObservation) {
	*out = *in
	if in.AllowedClients != nil {
		in, out := &in.AllowedClients, &out.AllowedClients
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Kerberos5IReadOnlyEnabled != nil {
		in, out := &in.Kerberos5IReadOnlyEnabled, &out.Kerberos5IReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5IReadWriteEnabled != nil {
		in, out := &in.Kerberos5IReadWriteEnabled, &out.Kerberos5IReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadOnlyEnabled != nil {
		in, out := &in.Kerberos5PReadOnlyEnabled, &out.Kerberos5PReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadWriteEnabled != nil {
		in, out := &in.Kerberos5PReadWriteEnabled, &out.Kerberos5PReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadOnlyEnabled != nil {
		in, out := &in.Kerberos5ReadOnlyEnabled, &out.Kerberos5ReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadWriteEnabled != nil {
		in, out := &in.Kerberos5ReadWriteEnabled, &out.Kerberos5ReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolsEnabled != nil {
		in, out := &in.ProtocolsEnabled, &out.ProtocolsEnabled
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RootAccessEnabled != nil {
		in, out := &in.RootAccessEnabled, &out.RootAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RuleIndex != nil {
		in, out := &in.RuleIndex, &out.RuleIndex
		*out = new(float64)
		**out = **in
	}
	if in.UnixReadOnly != nil {
		in, out := &in.UnixReadOnly, &out.UnixReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.UnixReadWrite != nil {
		in, out := &in.UnixReadWrite, &out.UnixReadWrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExportPolicyRuleObservation.
func (in *ExportPolicyRuleObservation) DeepCopy() *ExportPolicyRuleObservation {
	if in == nil {
		return nil
	}
	out := new(ExportPolicyRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExportPolicyRuleParameters) DeepCopyInto(out *ExportPolicyRuleParameters) {
	*out = *in
	if in.AllowedClients != nil {
		in, out := &in.AllowedClients, &out.AllowedClients
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Kerberos5IReadOnlyEnabled != nil {
		in, out := &in.Kerberos5IReadOnlyEnabled, &out.Kerberos5IReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5IReadWriteEnabled != nil {
		in, out := &in.Kerberos5IReadWriteEnabled, &out.Kerberos5IReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadOnlyEnabled != nil {
		in, out := &in.Kerberos5PReadOnlyEnabled, &out.Kerberos5PReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5PReadWriteEnabled != nil {
		in, out := &in.Kerberos5PReadWriteEnabled, &out.Kerberos5PReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadOnlyEnabled != nil {
		in, out := &in.Kerberos5ReadOnlyEnabled, &out.Kerberos5ReadOnlyEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Kerberos5ReadWriteEnabled != nil {
		in, out := &in.Kerberos5ReadWriteEnabled, &out.Kerberos5ReadWriteEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolsEnabled != nil {
		in, out := &in.ProtocolsEnabled, &out.ProtocolsEnabled
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RootAccessEnabled != nil {
		in, out := &in.RootAccessEnabled, &out.RootAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RuleIndex != nil {
		in, out := &in.RuleIndex, &out.RuleIndex
		*out = new(float64)
		**out = **in
	}
	if in.UnixReadOnly != nil {
		in, out := &in.UnixReadOnly, &out.UnixReadOnly
		*out = new(bool)
		**out = **in
	}
	if in.UnixReadWrite != nil {
		in, out := &in.UnixReadWrite, &out.UnixReadWrite
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExportPolicyRuleParameters.
func (in *ExportPolicyRuleParameters) DeepCopy() *ExportPolicyRuleParameters {
	if in == nil {
		return nil
	}
	out := new(ExportPolicyRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HourlyScheduleInitParameters) DeepCopyInto(out *HourlyScheduleInitParameters) {
	*out = *in
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HourlyScheduleInitParameters.
func (in *HourlyScheduleInitParameters) DeepCopy() *HourlyScheduleInitParameters {
	if in == nil {
		return nil
	}
	out := new(HourlyScheduleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HourlyScheduleObservation) DeepCopyInto(out *HourlyScheduleObservation) {
	*out = *in
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HourlyScheduleObservation.
func (in *HourlyScheduleObservation) DeepCopy() *HourlyScheduleObservation {
	if in == nil {
		return nil
	}
	out := new(HourlyScheduleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HourlyScheduleParameters) DeepCopyInto(out *HourlyScheduleParameters) {
	*out = *in
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HourlyScheduleParameters.
func (in *HourlyScheduleParameters) DeepCopy() *HourlyScheduleParameters {
	if in == nil {
		return nil
	}
	out := new(HourlyScheduleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityInitParameters) DeepCopyInto(out *IdentityInitParameters) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityInitParameters.
func (in *IdentityInitParameters) DeepCopy() *IdentityInitParameters {
	if in == nil {
		return nil
	}
	out := new(IdentityInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityObservation) DeepCopyInto(out *IdentityObservation) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrincipalID != nil {
		in, out := &in.PrincipalID, &out.PrincipalID
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityObservation.
func (in *IdentityObservation) DeepCopy() *IdentityObservation {
	if in == nil {
		return nil
	}
	out := new(IdentityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IdentityParameters) DeepCopyInto(out *IdentityParameters) {
	*out = *in
	if in.IdentityIds != nil {
		in, out := &in.IdentityIds, &out.IdentityIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IdentityParameters.
func (in *IdentityParameters) DeepCopy() *IdentityParameters {
	if in == nil {
		return nil
	}
	out := new(IdentityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonthlyScheduleInitParameters) DeepCopyInto(out *MonthlyScheduleInitParameters) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonthlyScheduleInitParameters.
func (in *MonthlyScheduleInitParameters) DeepCopy() *MonthlyScheduleInitParameters {
	if in == nil {
		return nil
	}
	out := new(MonthlyScheduleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonthlyScheduleObservation) DeepCopyInto(out *MonthlyScheduleObservation) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonthlyScheduleObservation.
func (in *MonthlyScheduleObservation) DeepCopy() *MonthlyScheduleObservation {
	if in == nil {
		return nil
	}
	out := new(MonthlyScheduleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonthlyScheduleParameters) DeepCopyInto(out *MonthlyScheduleParameters) {
	*out = *in
	if in.DaysOfMonth != nil {
		in, out := &in.DaysOfMonth, &out.DaysOfMonth
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonthlyScheduleParameters.
func (in *MonthlyScheduleParameters) DeepCopy() *MonthlyScheduleParameters {
	if in == nil {
		return nil
	}
	out := new(MonthlyScheduleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicy) DeepCopyInto(out *SnapshotPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicy.
func (in *SnapshotPolicy) DeepCopy() *SnapshotPolicy {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SnapshotPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicyInitParameters) DeepCopyInto(out *SnapshotPolicyInitParameters) {
	*out = *in
	if in.DailySchedule != nil {
		in, out := &in.DailySchedule, &out.DailySchedule
		*out = new(DailyScheduleInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HourlySchedule != nil {
		in, out := &in.HourlySchedule, &out.HourlySchedule
		*out = new(HourlyScheduleInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MonthlySchedule != nil {
		in, out := &in.MonthlySchedule, &out.MonthlySchedule
		*out = new(MonthlyScheduleInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.WeeklySchedule != nil {
		in, out := &in.WeeklySchedule, &out.WeeklySchedule
		*out = new(WeeklyScheduleInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicyInitParameters.
func (in *SnapshotPolicyInitParameters) DeepCopy() *SnapshotPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicyList) DeepCopyInto(out *SnapshotPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SnapshotPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicyList.
func (in *SnapshotPolicyList) DeepCopy() *SnapshotPolicyList {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SnapshotPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicyObservation) DeepCopyInto(out *SnapshotPolicyObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.DailySchedule != nil {
		in, out := &in.DailySchedule, &out.DailySchedule
		*out = new(DailyScheduleObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HourlySchedule != nil {
		in, out := &in.HourlySchedule, &out.HourlySchedule
		*out = new(HourlyScheduleObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MonthlySchedule != nil {
		in, out := &in.MonthlySchedule, &out.MonthlySchedule
		*out = new(MonthlyScheduleObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.WeeklySchedule != nil {
		in, out := &in.WeeklySchedule, &out.WeeklySchedule
		*out = new(WeeklyScheduleObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicyObservation.
func (in *SnapshotPolicyObservation) DeepCopy() *SnapshotPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicyParameters) DeepCopyInto(out *SnapshotPolicyParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountNameRef != nil {
		in, out := &in.AccountNameRef, &out.AccountNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountNameSelector != nil {
		in, out := &in.AccountNameSelector, &out.AccountNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DailySchedule != nil {
		in, out := &in.DailySchedule, &out.DailySchedule
		*out = new(DailyScheduleParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HourlySchedule != nil {
		in, out := &in.HourlySchedule, &out.HourlySchedule
		*out = new(HourlyScheduleParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MonthlySchedule != nil {
		in, out := &in.MonthlySchedule, &out.MonthlySchedule
		*out = new(MonthlyScheduleParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupNameRef != nil {
		in, out := &in.ResourceGroupNameRef, &out.ResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupNameSelector != nil {
		in, out := &in.ResourceGroupNameSelector, &out.ResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.WeeklySchedule != nil {
		in, out := &in.WeeklySchedule, &out.WeeklySchedule
		*out = new(WeeklyScheduleParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicyParameters.
func (in *SnapshotPolicyParameters) DeepCopy() *SnapshotPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicySpec) DeepCopyInto(out *SnapshotPolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicySpec.
func (in *SnapshotPolicySpec) DeepCopy() *SnapshotPolicySpec {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotPolicyStatus) DeepCopyInto(out *SnapshotPolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotPolicyStatus.
func (in *SnapshotPolicyStatus) DeepCopy() *SnapshotPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(SnapshotPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Volume) DeepCopyInto(out *Volume) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Volume.
func (in *Volume) DeepCopy() *Volume {
	if in == nil {
		return nil
	}
	out := new(Volume)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Volume) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeInitParameters) DeepCopyInto(out *VolumeInitParameters) {
	*out = *in
	if in.AzureVMwareDataStoreEnabled != nil {
		in, out := &in.AzureVMwareDataStoreEnabled, &out.AzureVMwareDataStoreEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CreateFromSnapshotResourceID != nil {
		in, out := &in.CreateFromSnapshotResourceID, &out.CreateFromSnapshotResourceID
		*out = new(string)
		**out = **in
	}
	if in.CreateFromSnapshotResourceIDRef != nil {
		in, out := &in.CreateFromSnapshotResourceIDRef, &out.CreateFromSnapshotResourceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateFromSnapshotResourceIDSelector != nil {
		in, out := &in.CreateFromSnapshotResourceIDSelector, &out.CreateFromSnapshotResourceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataProtectionReplication != nil {
		in, out := &in.DataProtectionReplication, &out.DataProtectionReplication
		*out = new(DataProtectionReplicationInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataProtectionSnapshotPolicy != nil {
		in, out := &in.DataProtectionSnapshotPolicy, &out.DataProtectionSnapshotPolicy
		*out = new(DataProtectionSnapshotPolicyInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.EncryptionKeySource != nil {
		in, out := &in.EncryptionKeySource, &out.EncryptionKeySource
		*out = new(string)
		**out = **in
	}
	if in.ExportPolicyRule != nil {
		in, out := &in.ExportPolicyRule, &out.ExportPolicyRule
		*out = make([]ExportPolicyRuleInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KerberosEnabled != nil {
		in, out := &in.KerberosEnabled, &out.KerberosEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KeyVaultPrivateEndpointID != nil {
		in, out := &in.KeyVaultPrivateEndpointID, &out.KeyVaultPrivateEndpointID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.NetworkFeatures != nil {
		in, out := &in.NetworkFeatures, &out.NetworkFeatures
		*out = new(string)
		**out = **in
	}
	if in.Protocols != nil {
		in, out := &in.Protocols, &out.Protocols
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SMBAccessBasedEnumerationEnabled != nil {
		in, out := &in.SMBAccessBasedEnumerationEnabled, &out.SMBAccessBasedEnumerationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBContinuousAvailabilityEnabled != nil {
		in, out := &in.SMBContinuousAvailabilityEnabled, &out.SMBContinuousAvailabilityEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBNonBrowsableEnabled != nil {
		in, out := &in.SMBNonBrowsableEnabled, &out.SMBNonBrowsableEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecurityStyle != nil {
		in, out := &in.SecurityStyle, &out.SecurityStyle
		*out = new(string)
		**out = **in
	}
	if in.ServiceLevel != nil {
		in, out := &in.ServiceLevel, &out.ServiceLevel
		*out = new(string)
		**out = **in
	}
	if in.SnapshotDirectoryVisible != nil {
		in, out := &in.SnapshotDirectoryVisible, &out.SnapshotDirectoryVisible
		*out = new(bool)
		**out = **in
	}
	if in.StorageQuotaInGb != nil {
		in, out := &in.StorageQuotaInGb, &out.StorageQuotaInGb
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputInMibps != nil {
		in, out := &in.ThroughputInMibps, &out.ThroughputInMibps
		*out = new(float64)
		**out = **in
	}
	if in.VolumePath != nil {
		in, out := &in.VolumePath, &out.VolumePath
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeInitParameters.
func (in *VolumeInitParameters) DeepCopy() *VolumeInitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeList) DeepCopyInto(out *VolumeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeList.
func (in *VolumeList) DeepCopy() *VolumeList {
	if in == nil {
		return nil
	}
	out := new(VolumeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeObservation) DeepCopyInto(out *VolumeObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AzureVMwareDataStoreEnabled != nil {
		in, out := &in.AzureVMwareDataStoreEnabled, &out.AzureVMwareDataStoreEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CreateFromSnapshotResourceID != nil {
		in, out := &in.CreateFromSnapshotResourceID, &out.CreateFromSnapshotResourceID
		*out = new(string)
		**out = **in
	}
	if in.DataProtectionReplication != nil {
		in, out := &in.DataProtectionReplication, &out.DataProtectionReplication
		*out = new(DataProtectionReplicationObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.DataProtectionSnapshotPolicy != nil {
		in, out := &in.DataProtectionSnapshotPolicy, &out.DataProtectionSnapshotPolicy
		*out = new(DataProtectionSnapshotPolicyObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.EncryptionKeySource != nil {
		in, out := &in.EncryptionKeySource, &out.EncryptionKeySource
		*out = new(string)
		**out = **in
	}
	if in.ExportPolicyRule != nil {
		in, out := &in.ExportPolicyRule, &out.ExportPolicyRule
		*out = make([]ExportPolicyRuleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KerberosEnabled != nil {
		in, out := &in.KerberosEnabled, &out.KerberosEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KeyVaultPrivateEndpointID != nil {
		in, out := &in.KeyVaultPrivateEndpointID, &out.KeyVaultPrivateEndpointID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MountIPAddresses != nil {
		in, out := &in.MountIPAddresses, &out.MountIPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NetworkFeatures != nil {
		in, out := &in.NetworkFeatures, &out.NetworkFeatures
		*out = new(string)
		**out = **in
	}
	if in.PoolName != nil {
		in, out := &in.PoolName, &out.PoolName
		*out = new(string)
		**out = **in
	}
	if in.Protocols != nil {
		in, out := &in.Protocols, &out.Protocols
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.SMBAccessBasedEnumerationEnabled != nil {
		in, out := &in.SMBAccessBasedEnumerationEnabled, &out.SMBAccessBasedEnumerationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBContinuousAvailabilityEnabled != nil {
		in, out := &in.SMBContinuousAvailabilityEnabled, &out.SMBContinuousAvailabilityEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBNonBrowsableEnabled != nil {
		in, out := &in.SMBNonBrowsableEnabled, &out.SMBNonBrowsableEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecurityStyle != nil {
		in, out := &in.SecurityStyle, &out.SecurityStyle
		*out = new(string)
		**out = **in
	}
	if in.ServiceLevel != nil {
		in, out := &in.ServiceLevel, &out.ServiceLevel
		*out = new(string)
		**out = **in
	}
	if in.SnapshotDirectoryVisible != nil {
		in, out := &in.SnapshotDirectoryVisible, &out.SnapshotDirectoryVisible
		*out = new(bool)
		**out = **in
	}
	if in.StorageQuotaInGb != nil {
		in, out := &in.StorageQuotaInGb, &out.StorageQuotaInGb
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputInMibps != nil {
		in, out := &in.ThroughputInMibps, &out.ThroughputInMibps
		*out = new(float64)
		**out = **in
	}
	if in.VolumePath != nil {
		in, out := &in.VolumePath, &out.VolumePath
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeObservation.
func (in *VolumeObservation) DeepCopy() *VolumeObservation {
	if in == nil {
		return nil
	}
	out := new(VolumeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeParameters) DeepCopyInto(out *VolumeParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountNameRef != nil {
		in, out := &in.AccountNameRef, &out.AccountNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountNameSelector != nil {
		in, out := &in.AccountNameSelector, &out.AccountNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.AzureVMwareDataStoreEnabled != nil {
		in, out := &in.AzureVMwareDataStoreEnabled, &out.AzureVMwareDataStoreEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CreateFromSnapshotResourceID != nil {
		in, out := &in.CreateFromSnapshotResourceID, &out.CreateFromSnapshotResourceID
		*out = new(string)
		**out = **in
	}
	if in.CreateFromSnapshotResourceIDRef != nil {
		in, out := &in.CreateFromSnapshotResourceIDRef, &out.CreateFromSnapshotResourceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateFromSnapshotResourceIDSelector != nil {
		in, out := &in.CreateFromSnapshotResourceIDSelector, &out.CreateFromSnapshotResourceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataProtectionReplication != nil {
		in, out := &in.DataProtectionReplication, &out.DataProtectionReplication
		*out = new(DataProtectionReplicationParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.DataProtectionSnapshotPolicy != nil {
		in, out := &in.DataProtectionSnapshotPolicy, &out.DataProtectionSnapshotPolicy
		*out = new(DataProtectionSnapshotPolicyParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.EncryptionKeySource != nil {
		in, out := &in.EncryptionKeySource, &out.EncryptionKeySource
		*out = new(string)
		**out = **in
	}
	if in.ExportPolicyRule != nil {
		in, out := &in.ExportPolicyRule, &out.ExportPolicyRule
		*out = make([]ExportPolicyRuleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KerberosEnabled != nil {
		in, out := &in.KerberosEnabled, &out.KerberosEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KeyVaultPrivateEndpointID != nil {
		in, out := &in.KeyVaultPrivateEndpointID, &out.KeyVaultPrivateEndpointID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.NetworkFeatures != nil {
		in, out := &in.NetworkFeatures, &out.NetworkFeatures
		*out = new(string)
		**out = **in
	}
	if in.PoolName != nil {
		in, out := &in.PoolName, &out.PoolName
		*out = new(string)
		**out = **in
	}
	if in.PoolNameRef != nil {
		in, out := &in.PoolNameRef, &out.PoolNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PoolNameSelector != nil {
		in, out := &in.PoolNameSelector, &out.PoolNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Protocols != nil {
		in, out := &in.Protocols, &out.Protocols
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupName != nil {
		in, out := &in.ResourceGroupName, &out.ResourceGroupName
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupNameRef != nil {
		in, out := &in.ResourceGroupNameRef, &out.ResourceGroupNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceGroupNameSelector != nil {
		in, out := &in.ResourceGroupNameSelector, &out.ResourceGroupNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SMBAccessBasedEnumerationEnabled != nil {
		in, out := &in.SMBAccessBasedEnumerationEnabled, &out.SMBAccessBasedEnumerationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBContinuousAvailabilityEnabled != nil {
		in, out := &in.SMBContinuousAvailabilityEnabled, &out.SMBContinuousAvailabilityEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SMBNonBrowsableEnabled != nil {
		in, out := &in.SMBNonBrowsableEnabled, &out.SMBNonBrowsableEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SecurityStyle != nil {
		in, out := &in.SecurityStyle, &out.SecurityStyle
		*out = new(string)
		**out = **in
	}
	if in.ServiceLevel != nil {
		in, out := &in.ServiceLevel, &out.ServiceLevel
		*out = new(string)
		**out = **in
	}
	if in.SnapshotDirectoryVisible != nil {
		in, out := &in.SnapshotDirectoryVisible, &out.SnapshotDirectoryVisible
		*out = new(bool)
		**out = **in
	}
	if in.StorageQuotaInGb != nil {
		in, out := &in.StorageQuotaInGb, &out.StorageQuotaInGb
		*out = new(float64)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ThroughputInMibps != nil {
		in, out := &in.ThroughputInMibps, &out.ThroughputInMibps
		*out = new(float64)
		**out = **in
	}
	if in.VolumePath != nil {
		in, out := &in.VolumePath, &out.VolumePath
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeParameters.
func (in *VolumeParameters) DeepCopy() *VolumeParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeSpec) DeepCopyInto(out *VolumeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeSpec.
func (in *VolumeSpec) DeepCopy() *VolumeSpec {
	if in == nil {
		return nil
	}
	out := new(VolumeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeStatus) DeepCopyInto(out *VolumeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeStatus.
func (in *VolumeStatus) DeepCopy() *VolumeStatus {
	if in == nil {
		return nil
	}
	out := new(VolumeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeeklyScheduleInitParameters) DeepCopyInto(out *WeeklyScheduleInitParameters) {
	*out = *in
	if in.DaysOfWeek != nil {
		in, out := &in.DaysOfWeek, &out.DaysOfWeek
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeeklyScheduleInitParameters.
func (in *WeeklyScheduleInitParameters) DeepCopy() *WeeklyScheduleInitParameters {
	if in == nil {
		return nil
	}
	out := new(WeeklyScheduleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeeklyScheduleObservation) DeepCopyInto(out *WeeklyScheduleObservation) {
	*out = *in
	if in.DaysOfWeek != nil {
		in, out := &in.DaysOfWeek, &out.DaysOfWeek
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeeklyScheduleObservation.
func (in *WeeklyScheduleObservation) DeepCopy() *WeeklyScheduleObservation {
	if in == nil {
		return nil
	}
	out := new(WeeklyScheduleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeeklyScheduleParameters) DeepCopyInto(out *WeeklyScheduleParameters) {
	*out = *in
	if in.DaysOfWeek != nil {
		in, out := &in.DaysOfWeek, &out.DaysOfWeek
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotsToKeep != nil {
		in, out := &in.SnapshotsToKeep, &out.SnapshotsToKeep
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeeklyScheduleParameters.
func (in *WeeklyScheduleParameters) DeepCopy() *WeeklyScheduleParameters {
	if in == nil {
		return nil
	}
	out := new(WeeklyScheduleParameters)
	in.DeepCopyInto(out)
	return out
}
