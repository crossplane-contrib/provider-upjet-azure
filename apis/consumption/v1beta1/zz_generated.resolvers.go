/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/insights/v1beta1"
	v1beta1 "github.com/upbound/provider-azure/apis/management/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this BudgetManagementGroup.
func (mg *BudgetManagementGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagementGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ManagementGroupIDRef,
		Selector:     mg.Spec.ForProvider.ManagementGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.ManagementGroupList{},
			Managed: &v1beta1.ManagementGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagementGroupID")
	}
	mg.Spec.ForProvider.ManagementGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagementGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BudgetResourceGroup.
func (mg *BudgetResourceGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceGroupIDRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupIDSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupID")
	}
	mg.Spec.ForProvider.ResourceGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BudgetSubscription.
func (mg *BudgetSubscription) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Notification); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Notification[i3].ContactGroups),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs,
			Selector:      mg.Spec.ForProvider.Notification[i3].ContactGroupsSelector,
			To: reference.To{
				List:    &v1beta12.MonitorActionGroupList{},
				Managed: &v1beta12.MonitorActionGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Notification[i3].ContactGroups")
		}
		mg.Spec.ForProvider.Notification[i3].ContactGroups = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs = mrsp.ResolvedReferences

	}

	return nil
}
