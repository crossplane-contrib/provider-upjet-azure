// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	helper "github.com/crossplane/crossplane-tools/pkg/helpers"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *BudgetManagementGroup) ResolveReferences( // ResolveReferences of this BudgetManagementGroup.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Filter.Dimension[i4].Values),
					Extract:       reference.ExternalName(),
					References:    mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.ForProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.ForProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("management.azure.upbound.io", "v1beta1", "ManagementGroup", "ManagementGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ManagementGroupID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ManagementGroupIDRef,
			Selector:     mg.Spec.ForProvider.ManagementGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagementGroupID")
	}
	mg.Spec.ForProvider.ManagementGroupID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ManagementGroupIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Filter.Dimension[i4].Values),
					Extract:       reference.ExternalName(),
					References:    mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.InitProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.InitProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("management.azure.upbound.io", "v1beta1", "ManagementGroup", "ManagementGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ManagementGroupID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ManagementGroupIDRef,
			Selector:     mg.Spec.InitProvider.ManagementGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ManagementGroupID")
	}
	mg.Spec.InitProvider.ManagementGroupID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ManagementGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BudgetResourceGroup.
func (mg *BudgetResourceGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Filter.Dimension[i4].Values),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.ForProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.ForProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Notification); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Notification[i3].ContactGroups),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs,
				Selector:      mg.Spec.ForProvider.Notification[i3].ContactGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Notification[i3].ContactGroups")
		}
		mg.Spec.ForProvider.Notification[i3].ContactGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ResourceGroupIDRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupID")
	}
	mg.Spec.ForProvider.ResourceGroupID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Filter.Dimension[i4].Values),
					Extract:       resource.ExtractResourceID(),
					References:    mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.InitProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.InitProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Notification); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Notification[i3].ContactGroups),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Notification[i3].ContactGroupsRefs,
				Selector:      mg.Spec.InitProvider.Notification[i3].ContactGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Notification[i3].ContactGroups")
		}
		mg.Spec.InitProvider.Notification[i3].ContactGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Notification[i3].ContactGroupsRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ResourceGroupIDRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupID")
	}
	mg.Spec.InitProvider.ResourceGroupID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BudgetSubscription.
func (mg *BudgetSubscription) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Filter.Dimension[i4].Values),
					Extract:       reference.ExternalName(),
					References:    mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.ForProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.ForProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Notification); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Notification[i3].ContactGroups),
				Extract:       rconfig.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs,
				Selector:      mg.Spec.ForProvider.Notification[i3].ContactGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Notification[i3].ContactGroups")
		}
		mg.Spec.ForProvider.Notification[i3].ContactGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Notification[i3].ContactGroupsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.Filter != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Filter.Dimension); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Filter.Dimension[i4].Values),
					Extract:       reference.ExternalName(),
					References:    mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs,
					Selector:      mg.Spec.InitProvider.Filter.Dimension[i4].ValuesSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Filter.Dimension[i4].Values")
			}
			mg.Spec.InitProvider.Filter.Dimension[i4].Values = helper.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Filter.Dimension[i4].ValuesRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Notification); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta2", "MonitorActionGroup", "MonitorActionGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Notification[i3].ContactGroups),
				Extract:       rconfig.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Notification[i3].ContactGroupsRefs,
				Selector:      mg.Spec.InitProvider.Notification[i3].ContactGroupsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Notification[i3].ContactGroups")
		}
		mg.Spec.InitProvider.Notification[i3].ContactGroups = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Notification[i3].ContactGroupsRefs = mrsp.ResolvedReferences

	}

	return nil
}
