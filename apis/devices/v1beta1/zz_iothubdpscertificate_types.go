/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IOTHubDPSCertificateObservation struct {

	// The ID of the IoTHub Device Provisioning Service Certificate.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IOTHubDPSCertificateParameters struct {

	// The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
	// +kubebuilder:validation:Required
	CertificateContentSecretRef v1.SecretKeySelector `json:"certificateContentSecretRef" tf:"-"`

	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=IOTHubDPS
	// +kubebuilder:validation:Optional
	IOTDPSName *string `json:"iotDpsName,omitempty" tf:"iot_dps_name,omitempty"`

	// Reference to a IOTHubDPS to populate iotDpsName.
	// +kubebuilder:validation:Optional
	IOTDPSNameRef *v1.Reference `json:"iotDpsNameRef,omitempty" tf:"-"`

	// Selector for a IOTHubDPS to populate iotDpsName.
	// +kubebuilder:validation:Optional
	IOTDPSNameSelector *v1.Selector `json:"iotDpsNameSelector,omitempty" tf:"-"`

	// Specifies if the certificate is created in verified state. Defaults to false. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	IsVerified *bool `json:"isVerified,omitempty" tf:"is_verified,omitempty"`

	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// IOTHubDPSCertificateSpec defines the desired state of IOTHubDPSCertificate
type IOTHubDPSCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IOTHubDPSCertificateParameters `json:"forProvider"`
}

// IOTHubDPSCertificateStatus defines the observed state of IOTHubDPSCertificate.
type IOTHubDPSCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IOTHubDPSCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPSCertificate is the Schema for the IOTHubDPSCertificates API. Manages an IoT Device Provisioning Service Certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IOTHubDPSCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IOTHubDPSCertificateSpec   `json:"spec"`
	Status            IOTHubDPSCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPSCertificateList contains a list of IOTHubDPSCertificates
type IOTHubDPSCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IOTHubDPSCertificate `json:"items"`
}

// Repository type metadata.
var (
	IOTHubDPSCertificate_Kind             = "IOTHubDPSCertificate"
	IOTHubDPSCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IOTHubDPSCertificate_Kind}.String()
	IOTHubDPSCertificate_KindAPIVersion   = IOTHubDPSCertificate_Kind + "." + CRDGroupVersion.String()
	IOTHubDPSCertificate_GroupVersionKind = CRDGroupVersion.WithKind(IOTHubDPSCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&IOTHubDPSCertificate{}, &IOTHubDPSCertificateList{})
}
