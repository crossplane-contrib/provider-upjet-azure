// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RedisCacheAccessPolicyAssignmentInitParameters struct {

	// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name,omitempty"`

	// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The alias of the principal ID. Possible values are ServicePrincipal and UserMSI. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	ObjectIDAlias *string `json:"objectIdAlias,omitempty" tf:"object_id_alias,omitempty"`
}

type RedisCacheAccessPolicyAssignmentObservation struct {

	// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name,omitempty"`

	// The ID of the Redis Cache Access Policy Assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The alias of the principal ID. Possible values are ServicePrincipal and UserMSI. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	ObjectIDAlias *string `json:"objectIdAlias,omitempty" tf:"object_id_alias,omitempty"`

	// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	RedisCacheID *string `json:"redisCacheId,omitempty" tf:"redis_cache_id,omitempty"`
}

type RedisCacheAccessPolicyAssignmentParameters struct {

	// The name of the Access Policy to be assigned. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	// +kubebuilder:validation:Optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name,omitempty"`

	// The principal ID to be assigned the Access Policy. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The alias of the principal ID. Possible values are ServicePrincipal and UserMSI. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	// +kubebuilder:validation:Optional
	ObjectIDAlias *string `json:"objectIdAlias,omitempty" tf:"object_id_alias,omitempty"`

	// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy Assignment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cache/v1beta1.RedisCache
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RedisCacheID *string `json:"redisCacheId,omitempty" tf:"redis_cache_id,omitempty"`

	// Reference to a RedisCache in cache to populate redisCacheId.
	// +kubebuilder:validation:Optional
	RedisCacheIDRef *v1.Reference `json:"redisCacheIdRef,omitempty" tf:"-"`

	// Selector for a RedisCache in cache to populate redisCacheId.
	// +kubebuilder:validation:Optional
	RedisCacheIDSelector *v1.Selector `json:"redisCacheIdSelector,omitempty" tf:"-"`
}

// RedisCacheAccessPolicyAssignmentSpec defines the desired state of RedisCacheAccessPolicyAssignment
type RedisCacheAccessPolicyAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RedisCacheAccessPolicyAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RedisCacheAccessPolicyAssignmentInitParameters `json:"initProvider,omitempty"`
}

// RedisCacheAccessPolicyAssignmentStatus defines the observed state of RedisCacheAccessPolicyAssignment.
type RedisCacheAccessPolicyAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RedisCacheAccessPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RedisCacheAccessPolicyAssignment is the Schema for the RedisCacheAccessPolicyAssignments API. Manages a Redis Cache Access Policy Assignment.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RedisCacheAccessPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessPolicyName) || (has(self.initProvider) && has(self.initProvider.accessPolicyName))",message="spec.forProvider.accessPolicyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectId) || (has(self.initProvider) && has(self.initProvider.objectId))",message="spec.forProvider.objectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectIdAlias) || (has(self.initProvider) && has(self.initProvider.objectIdAlias))",message="spec.forProvider.objectIdAlias is a required parameter"
	Spec   RedisCacheAccessPolicyAssignmentSpec   `json:"spec"`
	Status RedisCacheAccessPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedisCacheAccessPolicyAssignmentList contains a list of RedisCacheAccessPolicyAssignments
type RedisCacheAccessPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisCacheAccessPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	RedisCacheAccessPolicyAssignment_Kind             = "RedisCacheAccessPolicyAssignment"
	RedisCacheAccessPolicyAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RedisCacheAccessPolicyAssignment_Kind}.String()
	RedisCacheAccessPolicyAssignment_KindAPIVersion   = RedisCacheAccessPolicyAssignment_Kind + "." + CRDGroupVersion.String()
	RedisCacheAccessPolicyAssignment_GroupVersionKind = CRDGroupVersion.WithKind(RedisCacheAccessPolicyAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&RedisCacheAccessPolicyAssignment{}, &RedisCacheAccessPolicyAssignmentList{})
}
