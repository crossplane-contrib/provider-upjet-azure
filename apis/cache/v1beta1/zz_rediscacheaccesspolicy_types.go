// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RedisCacheAccessPolicyInitParameters struct {

	// Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type RedisCacheAccessPolicyObservation struct {

	// The ID of the Redis Cache Access Policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
	RedisCacheID *string `json:"redisCacheId,omitempty" tf:"redis_cache_id,omitempty"`
}

type RedisCacheAccessPolicyParameters struct {

	// Permissions that are going to be assigned to this Redis Cache Access Policy. Changing this forces a new Redis Cache Access Policy to be created.
	// +kubebuilder:validation:Optional
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The ID of the Redis Cache. Changing this forces a new Redis Cache Access Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cache/v1beta1.RedisCache
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RedisCacheID *string `json:"redisCacheId,omitempty" tf:"redis_cache_id,omitempty"`

	// Reference to a RedisCache in cache to populate redisCacheId.
	// +kubebuilder:validation:Optional
	RedisCacheIDRef *v1.Reference `json:"redisCacheIdRef,omitempty" tf:"-"`

	// Selector for a RedisCache in cache to populate redisCacheId.
	// +kubebuilder:validation:Optional
	RedisCacheIDSelector *v1.Selector `json:"redisCacheIdSelector,omitempty" tf:"-"`
}

// RedisCacheAccessPolicySpec defines the desired state of RedisCacheAccessPolicy
type RedisCacheAccessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RedisCacheAccessPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RedisCacheAccessPolicyInitParameters `json:"initProvider,omitempty"`
}

// RedisCacheAccessPolicyStatus defines the observed state of RedisCacheAccessPolicy.
type RedisCacheAccessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RedisCacheAccessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RedisCacheAccessPolicy is the Schema for the RedisCacheAccessPolicys API. Manages a Redis Cache Access Policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type RedisCacheAccessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	Spec   RedisCacheAccessPolicySpec   `json:"spec"`
	Status RedisCacheAccessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedisCacheAccessPolicyList contains a list of RedisCacheAccessPolicys
type RedisCacheAccessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisCacheAccessPolicy `json:"items"`
}

// Repository type metadata.
var (
	RedisCacheAccessPolicy_Kind             = "RedisCacheAccessPolicy"
	RedisCacheAccessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RedisCacheAccessPolicy_Kind}.String()
	RedisCacheAccessPolicy_KindAPIVersion   = RedisCacheAccessPolicy_Kind + "." + CRDGroupVersion.String()
	RedisCacheAccessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(RedisCacheAccessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&RedisCacheAccessPolicy{}, &RedisCacheAccessPolicyList{})
}
