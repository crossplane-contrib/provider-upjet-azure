// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *FunctionJavascriptUda) ResolveReferences( // ResolveReferences of this FunctionJavascriptUda.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobIDRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobID")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobIDRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobID")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OutputBlob.
func (mg *OutputBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageAccountNameRef,
			Selector:     mg.Spec.ForProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountName")
	}
	mg.Spec.ForProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageContainerNameRef,
			Selector:     mg.Spec.ForProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageContainerName")
	}
	mg.Spec.ForProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageAccountNameRef,
			Selector:     mg.Spec.InitProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountName")
	}
	mg.Spec.InitProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageContainerNameRef,
			Selector:     mg.Spec.InitProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageContainerName")
	}
	mg.Spec.InitProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OutputEventHub.
func (mg *OutputEventHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.EventHubName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EventHubNameRef,
			Selector:     mg.Spec.ForProvider.EventHubNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventHubName")
	}
	mg.Spec.ForProvider.EventHubName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventHubNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHubNamespace", "EventHubNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.ForProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceBusNamespace")
	}
	mg.Spec.ForProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.EventHubName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EventHubNameRef,
			Selector:     mg.Spec.InitProvider.EventHubNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EventHubName")
	}
	mg.Spec.InitProvider.EventHubName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.EventHubNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHubNamespace", "EventHubNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.InitProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceBusNamespace")
	}
	mg.Spec.InitProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceBusNamespaceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OutputServiceBusQueue.
func (mg *OutputServiceBusQueue) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.QueueName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.QueueNameRef,
			Selector:     mg.Spec.ForProvider.QueueNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.QueueName")
	}
	mg.Spec.ForProvider.QueueName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.QueueNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta2", "ServiceBusNamespace", "ServiceBusNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.ForProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceBusNamespace")
	}
	mg.Spec.ForProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta1", "Queue", "QueueList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.QueueName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.QueueNameRef,
			Selector:     mg.Spec.InitProvider.QueueNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.QueueName")
	}
	mg.Spec.InitProvider.QueueName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.QueueNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta2", "ServiceBusNamespace", "ServiceBusNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.InitProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceBusNamespace")
	}
	mg.Spec.InitProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OutputServiceBusTopic.
func (mg *OutputServiceBusTopic) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta2", "ServiceBusNamespace", "ServiceBusNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.ForProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceBusNamespace")
	}
	mg.Spec.ForProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.TopicName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.TopicNameRef,
			Selector:     mg.Spec.ForProvider.TopicNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicName")
	}
	mg.Spec.ForProvider.TopicName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta2", "ServiceBusNamespace", "ServiceBusNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.InitProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceBusNamespace")
	}
	mg.Spec.InitProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("servicebus.azure.upbound.io", "v1beta1", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.TopicName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.TopicNameRef,
			Selector:     mg.Spec.InitProvider.TopicNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicName")
	}
	mg.Spec.InitProvider.TopicName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ReferenceInputBlob.
func (mg *ReferenceInputBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageAccountNameRef,
			Selector:     mg.Spec.ForProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountName")
	}
	mg.Spec.ForProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageContainerNameRef,
			Selector:     mg.Spec.ForProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageContainerName")
	}
	mg.Spec.ForProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageAccountNameRef,
			Selector:     mg.Spec.InitProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountName")
	}
	mg.Spec.InitProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageContainerNameRef,
			Selector:     mg.Spec.InitProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageContainerName")
	}
	mg.Spec.InitProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamInputBlob.
func (mg *StreamInputBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageAccountNameRef,
			Selector:     mg.Spec.ForProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountName")
	}
	mg.Spec.ForProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageContainerNameRef,
			Selector:     mg.Spec.ForProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageContainerName")
	}
	mg.Spec.ForProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageAccountNameRef,
			Selector:     mg.Spec.InitProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountName")
	}
	mg.Spec.InitProvider.StorageAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Container", "ContainerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageContainerName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageContainerNameRef,
			Selector:     mg.Spec.InitProvider.StorageContainerNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageContainerName")
	}
	mg.Spec.InitProvider.StorageContainerName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageContainerNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamInputEventHub.
func (mg *StreamInputEventHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "ConsumerGroup", "ConsumerGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.EventHubConsumerGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EventHubConsumerGroupNameRef,
			Selector:     mg.Spec.ForProvider.EventHubConsumerGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventHubConsumerGroupName")
	}
	mg.Spec.ForProvider.EventHubConsumerGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventHubConsumerGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.EventHubName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EventHubNameRef,
			Selector:     mg.Spec.ForProvider.EventHubNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventHubName")
	}
	mg.Spec.ForProvider.EventHubName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventHubNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHubNamespace", "EventHubNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.ForProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceBusNamespace")
	}
	mg.Spec.ForProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "ConsumerGroup", "ConsumerGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.EventHubConsumerGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EventHubConsumerGroupNameRef,
			Selector:     mg.Spec.InitProvider.EventHubConsumerGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EventHubConsumerGroupName")
	}
	mg.Spec.InitProvider.EventHubConsumerGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.EventHubConsumerGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHub", "EventHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.EventHubName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EventHubNameRef,
			Selector:     mg.Spec.InitProvider.EventHubNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EventHubName")
	}
	mg.Spec.InitProvider.EventHubName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.EventHubNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta2", "EventHubNamespace", "EventHubNamespaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ServiceBusNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServiceBusNamespaceRef,
			Selector:     mg.Spec.InitProvider.ServiceBusNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceBusNamespace")
	}
	mg.Spec.InitProvider.ServiceBusNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceBusNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamInputIOTHub.
func (mg *StreamInputIOTHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "ConsumerGroup", "ConsumerGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.EventHubConsumerGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.EventHubConsumerGroupNameRef,
			Selector:     mg.Spec.ForProvider.EventHubConsumerGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventHubConsumerGroupName")
	}
	mg.Spec.ForProvider.EventHubConsumerGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventHubConsumerGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("devices.azure.upbound.io", "v1beta2", "IOTHub", "IOTHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.IOTHubNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.IOTHubNamespaceRef,
			Selector:     mg.Spec.ForProvider.IOTHubNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IOTHubNamespace")
	}
	mg.Spec.ForProvider.IOTHubNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.IOTHubNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.ForProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StreamAnalyticsJobName")
	}
	mg.Spec.ForProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "ConsumerGroup", "ConsumerGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.EventHubConsumerGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.EventHubConsumerGroupNameRef,
			Selector:     mg.Spec.InitProvider.EventHubConsumerGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EventHubConsumerGroupName")
	}
	mg.Spec.InitProvider.EventHubConsumerGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.EventHubConsumerGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("devices.azure.upbound.io", "v1beta2", "IOTHub", "IOTHubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.IOTHubNamespace, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.IOTHubNamespaceRef,
			Selector:     mg.Spec.InitProvider.IOTHubNamespaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IOTHubNamespace")
	}
	mg.Spec.InitProvider.IOTHubNamespace = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.IOTHubNamespaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("streamanalytics.azure.upbound.io", "v1beta2", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.StreamAnalyticsJobName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StreamAnalyticsJobNameRef,
			Selector:     mg.Spec.InitProvider.StreamAnalyticsJobNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StreamAnalyticsJobName")
	}
	mg.Spec.InitProvider.StreamAnalyticsJobName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.StreamAnalyticsJobNameRef = rsp.ResolvedReference

	return nil
}
