// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this API.
	apisresolver "github.com/upbound/provider-azure/internal/apis"
)

func (mg *API) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIDiagnostic.
func (mg *APIDiagnostic) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Logger", "LoggerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementLoggerID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementLoggerIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementLoggerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementLoggerID")
	}
	mg.Spec.ForProvider.APIManagementLoggerID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementLoggerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Logger", "LoggerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementLoggerID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIManagementLoggerIDRef,
			Selector:     mg.Spec.InitProvider.APIManagementLoggerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementLoggerID")
	}
	mg.Spec.InitProvider.APIManagementLoggerID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementLoggerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIOperation.
func (mg *APIOperation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIOperationPolicy.
func (mg *APIOperationPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "APIOperation", "APIOperationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      resource.ExtractParamPath("api_management_name", false),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "APIOperation", "APIOperationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      resource.ExtractParamPath("api_name", false),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "APIOperation", "APIOperationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.OperationID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.OperationIDRef,
			Selector:     mg.Spec.ForProvider.OperationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OperationID")
	}
	mg.Spec.ForProvider.OperationID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.OperationIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIOperationTag.
func (mg *APIOperationTag) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "APIOperation", "APIOperationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIOperationID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIOperationIDRef,
			Selector:     mg.Spec.ForProvider.APIOperationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIOperationID")
	}
	mg.Spec.ForProvider.APIOperationID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIOperationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIPolicy.
func (mg *APIPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIRelease.
func (mg *APIRelease) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APISchema.
func (mg *APISchema) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APITag.
func (mg *APITag) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this APIVersionSet.
func (mg *APIVersionSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AuthorizationServer.
func (mg *AuthorizationServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Backend.
func (mg *Backend) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultSecretID, ""),
			Extract:      resource.ExtractParamPath("secret_id", true),
			Reference:    mg.Spec.ForProvider.KeyVaultSecretIDRef,
			Selector:     mg.Spec.ForProvider.KeyVaultSecretIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultSecretID")
	}
	mg.Spec.ForProvider.KeyVaultSecretID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultSecretIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultSecretID, ""),
			Extract:      resource.ExtractParamPath("secret_id", true),
			Reference:    mg.Spec.InitProvider.KeyVaultSecretIDRef,
			Selector:     mg.Spec.InitProvider.KeyVaultSecretIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultSecretID")
	}
	mg.Spec.InitProvider.KeyVaultSecretID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyVaultSecretIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomDomain.
func (mg *CustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DeveloperPortal); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultID, ""),
				Extract:      resource.ExtractParamPath("versionless_secret_id", true),
				Reference:    mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultIDRef,
				Selector:     mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultID")
		}
		mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.DeveloperPortal[i3].KeyVaultIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Gateway); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Gateway[i3].KeyVaultID, ""),
				Extract:      resource.ExtractParamPath("versionless_secret_id", true),
				Reference:    mg.Spec.ForProvider.Gateway[i3].KeyVaultIDRef,
				Selector:     mg.Spec.ForProvider.Gateway[i3].KeyVaultIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Gateway[i3].KeyVaultID")
		}
		mg.Spec.ForProvider.Gateway[i3].KeyVaultID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Gateway[i3].KeyVaultIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DeveloperPortal); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultID, ""),
				Extract:      resource.ExtractParamPath("versionless_secret_id", true),
				Reference:    mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultIDRef,
				Selector:     mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultID")
		}
		mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.DeveloperPortal[i3].KeyVaultIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Gateway); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Gateway[i3].KeyVaultID, ""),
				Extract:      resource.ExtractParamPath("versionless_secret_id", true),
				Reference:    mg.Spec.InitProvider.Gateway[i3].KeyVaultIDRef,
				Selector:     mg.Spec.InitProvider.Gateway[i3].KeyVaultIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Gateway[i3].KeyVaultID")
		}
		mg.Spec.InitProvider.Gateway[i3].KeyVaultID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Gateway[i3].KeyVaultIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Diagnostic.
func (mg *Diagnostic) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Logger", "LoggerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementLoggerID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementLoggerIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementLoggerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementLoggerID")
	}
	mg.Spec.ForProvider.APIManagementLoggerID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementLoggerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Logger", "LoggerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementLoggerID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIManagementLoggerIDRef,
			Selector:     mg.Spec.InitProvider.APIManagementLoggerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementLoggerID")
	}
	mg.Spec.InitProvider.APIManagementLoggerID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementLoggerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EmailTemplate.
func (mg *EmailTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Gateway.
func (mg *Gateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIManagementIDRef,
			Selector:     mg.Spec.InitProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementID")
	}
	mg.Spec.InitProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewayAPI.
func (mg *GatewayAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIIDRef,
			Selector:     mg.Spec.ForProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIID")
	}
	mg.Spec.ForProvider.APIID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.GatewayID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.GatewayIDRef,
			Selector:     mg.Spec.ForProvider.GatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIIDRef,
			Selector:     mg.Spec.InitProvider.APIIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIID")
	}
	mg.Spec.InitProvider.APIID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Gateway", "GatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.GatewayID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.GatewayIDRef,
			Selector:     mg.Spec.InitProvider.GatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayID")
	}
	mg.Spec.InitProvider.GatewayID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.GatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalSchema.
func (mg *GlobalSchema) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityProviderAAD.
func (mg *IdentityProviderAAD) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityProviderFacebook.
func (mg *IdentityProviderFacebook) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementNameRef,
			Selector:     mg.Spec.InitProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementName")
	}
	mg.Spec.InitProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityProviderGoogle.
func (mg *IdentityProviderGoogle) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementNameRef,
			Selector:     mg.Spec.InitProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementName")
	}
	mg.Spec.InitProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityProviderMicrosoft.
func (mg *IdentityProviderMicrosoft) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementNameRef,
			Selector:     mg.Spec.InitProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementName")
	}
	mg.Spec.InitProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IdentityProviderTwitter.
func (mg *IdentityProviderTwitter) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementNameRef,
			Selector:     mg.Spec.InitProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementName")
	}
	mg.Spec.InitProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Logger.
func (mg *Logger) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ResourceIDRef,
			Selector:     mg.Spec.ForProvider.ResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ResourceIDRef,
			Selector:     mg.Spec.InitProvider.ResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceID")
	}
	mg.Spec.InitProvider.ResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Management.
func (mg *Management) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AdditionalLocation); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID, ""),
					Extract:      rconfig.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDRef,
					Selector:     mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID")
			}
			mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.VirtualNetworkConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetID")
		}
		mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.VirtualNetworkConfiguration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AdditionalLocation); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID, ""),
					Extract:      rconfig.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDRef,
					Selector:     mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID")
			}
			mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetID = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.AdditionalLocation[i3].VirtualNetworkConfiguration[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VirtualNetworkConfiguration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetID")
		}
		mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.VirtualNetworkConfiguration[i3].SubnetIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this NamedValue.
func (mg *NamedValue) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NotificationRecipientEmail.
func (mg *NotificationRecipientEmail) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NotificationRecipientUser.
func (mg *NotificationRecipientUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.UserID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.UserIDRef,
			Selector:     mg.Spec.ForProvider.UserIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.APIManagementIDRef,
			Selector:     mg.Spec.InitProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementID")
	}
	mg.Spec.InitProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.UserID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.UserIDRef,
			Selector:     mg.Spec.InitProvider.UserIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OpenIDConnectProvider.
func (mg *OpenIDConnectProvider) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Policy.
func (mg *Policy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Product.
func (mg *Product) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProductAPI.
func (mg *ProductAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "API", "APIList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APINameRef,
			Selector:     mg.Spec.ForProvider.APINameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIName")
	}
	mg.Spec.ForProvider.APIName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APINameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ProductID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProductIDRef,
			Selector:     mg.Spec.ForProvider.ProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProductID")
	}
	mg.Spec.ForProvider.ProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProductPolicy.
func (mg *ProductPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ProductID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProductIDRef,
			Selector:     mg.Spec.ForProvider.ProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProductID")
	}
	mg.Spec.ForProvider.ProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProductTag.
func (mg *ProductTag) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementProductID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementProductIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementProductID")
	}
	mg.Spec.ForProvider.APIManagementProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Tag", "TagList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.Name, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementNameRef,
			Selector:     mg.Spec.InitProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementName")
	}
	mg.Spec.InitProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.APIManagementProductID, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.APIManagementProductIDRef,
			Selector:     mg.Spec.InitProvider.APIManagementProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.APIManagementProductID")
	}
	mg.Spec.InitProvider.APIManagementProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.APIManagementProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Tag", "TagList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.Name, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RedisCache.
func (mg *RedisCache) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.RedisCacheID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.RedisCacheIDRef,
			Selector:     mg.Spec.ForProvider.RedisCacheIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedisCacheID")
	}
	mg.Spec.ForProvider.RedisCacheID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedisCacheIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.RedisCacheID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.RedisCacheIDRef,
			Selector:     mg.Spec.InitProvider.RedisCacheIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedisCacheID")
	}
	mg.Spec.InitProvider.RedisCacheID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedisCacheIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Subscription.
func (mg *Subscription) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ProductID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ProductIDRef,
			Selector:     mg.Spec.ForProvider.ProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProductID")
	}
	mg.Spec.ForProvider.ProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.UserID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.UserIDRef,
			Selector:     mg.Spec.ForProvider.UserIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "Product", "ProductList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ProductID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ProductIDRef,
			Selector:     mg.Spec.InitProvider.ProductIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProductID")
	}
	mg.Spec.InitProvider.ProductID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProductIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.UserID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.UserIDRef,
			Selector:     mg.Spec.InitProvider.UserIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Tag.
func (mg *Tag) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.APIManagementIDRef,
			Selector:     mg.Spec.ForProvider.APIManagementIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementID")
	}
	mg.Spec.ForProvider.APIManagementID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("apimanagement.azure.upbound.io", "v1beta2", "Management", "ManagementList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.APIManagementName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.APIManagementNameRef,
			Selector:     mg.Spec.ForProvider.APIManagementNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.APIManagementName")
	}
	mg.Spec.ForProvider.APIManagementName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.APIManagementNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
