/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopApplication
func (mg *VirtualDesktopApplication) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_application"
}

// GetConnectionDetailsMapping for this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopApplication
func (tr *VirtualDesktopApplication) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopApplication using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopApplication) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopApplicationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopApplication) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopApplicationGroup
func (mg *VirtualDesktopApplicationGroup) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_application_group"
}

// GetConnectionDetailsMapping for this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopApplicationGroup
func (tr *VirtualDesktopApplicationGroup) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopApplicationGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopApplicationGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopApplicationGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopApplicationGroup) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopHostPoolRegistrationInfo
func (mg *VirtualDesktopHostPoolRegistrationInfo) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_host_pool_registration_info"
}

// GetConnectionDetailsMapping for this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"token": "status.atProvider.token"}
}

// GetObservation of this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopHostPoolRegistrationInfo
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopHostPoolRegistrationInfo using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopHostPoolRegistrationInfo) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopHostPoolRegistrationInfoParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopHostPoolRegistrationInfo) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopScalingPlan
func (mg *VirtualDesktopScalingPlan) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_scaling_plan"
}

// GetConnectionDetailsMapping for this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopScalingPlan
func (tr *VirtualDesktopScalingPlan) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopScalingPlan using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopScalingPlan) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopScalingPlanParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopScalingPlan) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopWorkspace
func (mg *VirtualDesktopWorkspace) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_workspace"
}

// GetConnectionDetailsMapping for this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopWorkspace
func (tr *VirtualDesktopWorkspace) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopWorkspace using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopWorkspace) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopWorkspaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopWorkspace) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this VirtualDesktopWorkspaceApplicationGroupAssociation
func (mg *VirtualDesktopWorkspaceApplicationGroupAssociation) GetTerraformResourceType() string {
	return "azurerm_virtual_desktop_workspace_application_group_association"
}

// GetConnectionDetailsMapping for this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this VirtualDesktopWorkspaceApplicationGroupAssociation
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this VirtualDesktopWorkspaceApplicationGroupAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &VirtualDesktopWorkspaceApplicationGroupAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VirtualDesktopWorkspaceApplicationGroupAssociation) GetTerraformSchemaVersion() int {
	return 1
}
