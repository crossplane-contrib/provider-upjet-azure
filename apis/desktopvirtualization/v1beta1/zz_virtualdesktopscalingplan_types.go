/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostPoolInitParameters struct {

	// Specifies if the scaling plan is enabled or disabled for the HostPool.
	ScalingPlanEnabled *bool `json:"scalingPlanEnabled,omitempty" tf:"scaling_plan_enabled,omitempty"`
}

type HostPoolObservation struct {

	// The ID of the HostPool to assign the Scaling Plan to.
	HostpoolID *string `json:"hostpoolId,omitempty" tf:"hostpool_id,omitempty"`

	// Specifies if the scaling plan is enabled or disabled for the HostPool.
	ScalingPlanEnabled *bool `json:"scalingPlanEnabled,omitempty" tf:"scaling_plan_enabled,omitempty"`
}

type HostPoolParameters struct {

	// The ID of the HostPool to assign the Scaling Plan to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/virtual/v1beta1.DesktopHostPool
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	HostpoolID *string `json:"hostpoolId,omitempty" tf:"hostpool_id,omitempty"`

	// Reference to a DesktopHostPool in virtual to populate hostpoolId.
	// +kubebuilder:validation:Optional
	HostpoolIDRef *v1.Reference `json:"hostpoolIdRef,omitempty" tf:"-"`

	// Selector for a DesktopHostPool in virtual to populate hostpoolId.
	// +kubebuilder:validation:Optional
	HostpoolIDSelector *v1.Selector `json:"hostpoolIdSelector,omitempty" tf:"-"`

	// Specifies if the scaling plan is enabled or disabled for the HostPool.
	// +kubebuilder:validation:Optional
	ScalingPlanEnabled *bool `json:"scalingPlanEnabled" tf:"scaling_plan_enabled,omitempty"`
}

type ScheduleInitParameters struct {

	// A list of Days of the Week on which this schedule will be used. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// The name of the schedule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are DepthFirst and BreadthFirst.
	OffPeakLoadBalancingAlgorithm *string `json:"offPeakLoadBalancingAlgorithm,omitempty" tf:"off_peak_load_balancing_algorithm,omitempty"`

	// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
	OffPeakStartTime *string `json:"offPeakStartTime,omitempty" tf:"off_peak_start_time,omitempty"`

	// The load Balancing Algorithm to use during Peak Hours. Possible values are DepthFirst and BreadthFirst.
	PeakLoadBalancingAlgorithm *string `json:"peakLoadBalancingAlgorithm,omitempty" tf:"peak_load_balancing_algorithm,omitempty"`

	// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	PeakStartTime *string `json:"peakStartTime,omitempty" tf:"peak_start_time,omitempty"`

	// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampDownCapacityThresholdPercent *float64 `json:"rampDownCapacityThresholdPercent,omitempty" tf:"ramp_down_capacity_threshold_percent,omitempty"`

	// Whether users will be forced to log-off session hosts once the ramp_down_wait_time_minutes value has been exceeded during the Ramp-Down period. Possible
	RampDownForceLogoffUsers *bool `json:"rampDownForceLogoffUsers,omitempty" tf:"ramp_down_force_logoff_users,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are DepthFirst and BreadthFirst.
	RampDownLoadBalancingAlgorithm *string `json:"rampDownLoadBalancingAlgorithm,omitempty" tf:"ramp_down_load_balancing_algorithm,omitempty"`

	// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampDownMinimumHostsPercent *float64 `json:"rampDownMinimumHostsPercent,omitempty" tf:"ramp_down_minimum_hosts_percent,omitempty"`

	// The notification message to send to users during Ramp-Down period when they are required to log-off.
	RampDownNotificationMessage *string `json:"rampDownNotificationMessage,omitempty" tf:"ramp_down_notification_message,omitempty"`

	// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampDownStartTime *string `json:"rampDownStartTime,omitempty" tf:"ramp_down_start_time,omitempty"`

	// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are ZeroSessions and ZeroActiveSessions.
	RampDownStopHostsWhen *string `json:"rampDownStopHostsWhen,omitempty" tf:"ramp_down_stop_hosts_when,omitempty"`

	// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
	RampDownWaitTimeMinutes *float64 `json:"rampDownWaitTimeMinutes,omitempty" tf:"ramp_down_wait_time_minutes,omitempty"`

	// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampUpCapacityThresholdPercent *float64 `json:"rampUpCapacityThresholdPercent,omitempty" tf:"ramp_up_capacity_threshold_percent,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are DepthFirst and BreadthFirst.
	RampUpLoadBalancingAlgorithm *string `json:"rampUpLoadBalancingAlgorithm,omitempty" tf:"ramp_up_load_balancing_algorithm,omitempty"`

	// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampUpMinimumHostsPercent *float64 `json:"rampUpMinimumHostsPercent,omitempty" tf:"ramp_up_minimum_hosts_percent,omitempty"`

	// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampUpStartTime *string `json:"rampUpStartTime,omitempty" tf:"ramp_up_start_time,omitempty"`
}

type ScheduleObservation struct {

	// A list of Days of the Week on which this schedule will be used. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// The name of the schedule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are DepthFirst and BreadthFirst.
	OffPeakLoadBalancingAlgorithm *string `json:"offPeakLoadBalancingAlgorithm,omitempty" tf:"off_peak_load_balancing_algorithm,omitempty"`

	// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
	OffPeakStartTime *string `json:"offPeakStartTime,omitempty" tf:"off_peak_start_time,omitempty"`

	// The load Balancing Algorithm to use during Peak Hours. Possible values are DepthFirst and BreadthFirst.
	PeakLoadBalancingAlgorithm *string `json:"peakLoadBalancingAlgorithm,omitempty" tf:"peak_load_balancing_algorithm,omitempty"`

	// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	PeakStartTime *string `json:"peakStartTime,omitempty" tf:"peak_start_time,omitempty"`

	// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampDownCapacityThresholdPercent *float64 `json:"rampDownCapacityThresholdPercent,omitempty" tf:"ramp_down_capacity_threshold_percent,omitempty"`

	// Whether users will be forced to log-off session hosts once the ramp_down_wait_time_minutes value has been exceeded during the Ramp-Down period. Possible
	RampDownForceLogoffUsers *bool `json:"rampDownForceLogoffUsers,omitempty" tf:"ramp_down_force_logoff_users,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are DepthFirst and BreadthFirst.
	RampDownLoadBalancingAlgorithm *string `json:"rampDownLoadBalancingAlgorithm,omitempty" tf:"ramp_down_load_balancing_algorithm,omitempty"`

	// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampDownMinimumHostsPercent *float64 `json:"rampDownMinimumHostsPercent,omitempty" tf:"ramp_down_minimum_hosts_percent,omitempty"`

	// The notification message to send to users during Ramp-Down period when they are required to log-off.
	RampDownNotificationMessage *string `json:"rampDownNotificationMessage,omitempty" tf:"ramp_down_notification_message,omitempty"`

	// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampDownStartTime *string `json:"rampDownStartTime,omitempty" tf:"ramp_down_start_time,omitempty"`

	// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are ZeroSessions and ZeroActiveSessions.
	RampDownStopHostsWhen *string `json:"rampDownStopHostsWhen,omitempty" tf:"ramp_down_stop_hosts_when,omitempty"`

	// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
	RampDownWaitTimeMinutes *float64 `json:"rampDownWaitTimeMinutes,omitempty" tf:"ramp_down_wait_time_minutes,omitempty"`

	// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampUpCapacityThresholdPercent *float64 `json:"rampUpCapacityThresholdPercent,omitempty" tf:"ramp_up_capacity_threshold_percent,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are DepthFirst and BreadthFirst.
	RampUpLoadBalancingAlgorithm *string `json:"rampUpLoadBalancingAlgorithm,omitempty" tf:"ramp_up_load_balancing_algorithm,omitempty"`

	// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampUpMinimumHostsPercent *float64 `json:"rampUpMinimumHostsPercent,omitempty" tf:"ramp_up_minimum_hosts_percent,omitempty"`

	// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampUpStartTime *string `json:"rampUpStartTime,omitempty" tf:"ramp_up_start_time,omitempty"`
}

type ScheduleParameters struct {

	// A list of Days of the Week on which this schedule will be used. Possible values are Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday
	// +kubebuilder:validation:Optional
	DaysOfWeek []*string `json:"daysOfWeek" tf:"days_of_week,omitempty"`

	// The name of the schedule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are DepthFirst and BreadthFirst.
	// +kubebuilder:validation:Optional
	OffPeakLoadBalancingAlgorithm *string `json:"offPeakLoadBalancingAlgorithm" tf:"off_peak_load_balancing_algorithm,omitempty"`

	// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
	// +kubebuilder:validation:Optional
	OffPeakStartTime *string `json:"offPeakStartTime" tf:"off_peak_start_time,omitempty"`

	// The load Balancing Algorithm to use during Peak Hours. Possible values are DepthFirst and BreadthFirst.
	// +kubebuilder:validation:Optional
	PeakLoadBalancingAlgorithm *string `json:"peakLoadBalancingAlgorithm" tf:"peak_load_balancing_algorithm,omitempty"`

	// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	// +kubebuilder:validation:Optional
	PeakStartTime *string `json:"peakStartTime" tf:"peak_start_time,omitempty"`

	// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	// +kubebuilder:validation:Optional
	RampDownCapacityThresholdPercent *float64 `json:"rampDownCapacityThresholdPercent" tf:"ramp_down_capacity_threshold_percent,omitempty"`

	// Whether users will be forced to log-off session hosts once the ramp_down_wait_time_minutes value has been exceeded during the Ramp-Down period. Possible
	// +kubebuilder:validation:Optional
	RampDownForceLogoffUsers *bool `json:"rampDownForceLogoffUsers" tf:"ramp_down_force_logoff_users,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are DepthFirst and BreadthFirst.
	// +kubebuilder:validation:Optional
	RampDownLoadBalancingAlgorithm *string `json:"rampDownLoadBalancingAlgorithm" tf:"ramp_down_load_balancing_algorithm,omitempty"`

	// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	// +kubebuilder:validation:Optional
	RampDownMinimumHostsPercent *float64 `json:"rampDownMinimumHostsPercent" tf:"ramp_down_minimum_hosts_percent,omitempty"`

	// The notification message to send to users during Ramp-Down period when they are required to log-off.
	// +kubebuilder:validation:Optional
	RampDownNotificationMessage *string `json:"rampDownNotificationMessage" tf:"ramp_down_notification_message,omitempty"`

	// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	// +kubebuilder:validation:Optional
	RampDownStartTime *string `json:"rampDownStartTime" tf:"ramp_down_start_time,omitempty"`

	// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are ZeroSessions and ZeroActiveSessions.
	// +kubebuilder:validation:Optional
	RampDownStopHostsWhen *string `json:"rampDownStopHostsWhen" tf:"ramp_down_stop_hosts_when,omitempty"`

	// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
	// +kubebuilder:validation:Optional
	RampDownWaitTimeMinutes *float64 `json:"rampDownWaitTimeMinutes" tf:"ramp_down_wait_time_minutes,omitempty"`

	// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	// +kubebuilder:validation:Optional
	RampUpCapacityThresholdPercent *float64 `json:"rampUpCapacityThresholdPercent,omitempty" tf:"ramp_up_capacity_threshold_percent,omitempty"`

	// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are DepthFirst and BreadthFirst.
	// +kubebuilder:validation:Optional
	RampUpLoadBalancingAlgorithm *string `json:"rampUpLoadBalancingAlgorithm" tf:"ramp_up_load_balancing_algorithm,omitempty"`

	// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	// +kubebuilder:validation:Optional
	RampUpMinimumHostsPercent *float64 `json:"rampUpMinimumHostsPercent,omitempty" tf:"ramp_up_minimum_hosts_percent,omitempty"`

	// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	// +kubebuilder:validation:Optional
	RampUpStartTime *string `json:"rampUpStartTime" tf:"ramp_up_start_time,omitempty"`
}

type VirtualDesktopScalingPlanInitParameters struct {

	// A description of the Scaling Plan.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the tag associated with the VMs you want to exclude from autoscaling.
	ExclusionTag *string `json:"exclusionTag,omitempty" tf:"exclusion_tag,omitempty"`

	// Friendly name of the Scaling Plan.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// One or more host_pool blocks as defined below.
	HostPool []HostPoolInitParameters `json:"hostPool,omitempty" tf:"host_pool,omitempty"`

	// The Azure Region where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// One or more schedule blocks as defined below.
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the Time Zone which should be used by the Scaling Plan for time based events, the possible values are defined here.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type VirtualDesktopScalingPlanObservation struct {

	// A description of the Scaling Plan.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the tag associated with the VMs you want to exclude from autoscaling.
	ExclusionTag *string `json:"exclusionTag,omitempty" tf:"exclusion_tag,omitempty"`

	// Friendly name of the Scaling Plan.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// One or more host_pool blocks as defined below.
	HostPool []HostPoolObservation `json:"hostPool,omitempty" tf:"host_pool,omitempty"`

	// The ID of the Virtual Desktop Scaling Plan.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Azure Region where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the Resource Group where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// One or more schedule blocks as defined below.
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the Time Zone which should be used by the Scaling Plan for time based events, the possible values are defined here.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type VirtualDesktopScalingPlanParameters struct {

	// A description of the Scaling Plan.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the tag associated with the VMs you want to exclude from autoscaling.
	// +kubebuilder:validation:Optional
	ExclusionTag *string `json:"exclusionTag,omitempty" tf:"exclusion_tag,omitempty"`

	// Friendly name of the Scaling Plan.
	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// One or more host_pool blocks as defined below.
	// +kubebuilder:validation:Optional
	HostPool []HostPoolParameters `json:"hostPool,omitempty" tf:"host_pool,omitempty"`

	// The Azure Region where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the Resource Group where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// One or more schedule blocks as defined below.
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the Time Zone which should be used by the Scaling Plan for time based events, the possible values are defined here.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

// VirtualDesktopScalingPlanSpec defines the desired state of VirtualDesktopScalingPlan
type VirtualDesktopScalingPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDesktopScalingPlanParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualDesktopScalingPlanInitParameters `json:"initProvider,omitempty"`
}

// VirtualDesktopScalingPlanStatus defines the observed state of VirtualDesktopScalingPlan.
type VirtualDesktopScalingPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDesktopScalingPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopScalingPlan is the Schema for the VirtualDesktopScalingPlans API. Manages a Virtual Desktop Scaling Plan .
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopScalingPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedule) || has(self.initProvider.schedule)",message="schedule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeZone) || has(self.initProvider.timeZone)",message="timeZone is a required parameter"
	Spec   VirtualDesktopScalingPlanSpec   `json:"spec"`
	Status VirtualDesktopScalingPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopScalingPlanList contains a list of VirtualDesktopScalingPlans
type VirtualDesktopScalingPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopScalingPlan `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopScalingPlan_Kind             = "VirtualDesktopScalingPlan"
	VirtualDesktopScalingPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualDesktopScalingPlan_Kind}.String()
	VirtualDesktopScalingPlan_KindAPIVersion   = VirtualDesktopScalingPlan_Kind + "." + CRDGroupVersion.String()
	VirtualDesktopScalingPlan_GroupVersionKind = CRDGroupVersion.WithKind(VirtualDesktopScalingPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopScalingPlan{}, &VirtualDesktopScalingPlanList{})
}
