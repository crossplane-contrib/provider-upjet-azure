// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualDesktopApplicationInitParameters struct {

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The index of the icon you wish to use.
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

type VirtualDesktopApplicationObservation struct {

	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupID *string `json:"applicationGroupId,omitempty" tf:"application_group_id,omitempty"`

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The ID of the Virtual Desktop Application.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The index of the icon you wish to use.
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

type VirtualDesktopApplicationParameters struct {

	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/desktopvirtualization/v1beta1.VirtualDesktopApplicationGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ApplicationGroupID *string `json:"applicationGroupId,omitempty" tf:"application_group_id,omitempty"`

	// Reference to a VirtualDesktopApplicationGroup in desktopvirtualization to populate applicationGroupId.
	// +kubebuilder:validation:Optional
	ApplicationGroupIDRef *v1.Reference `json:"applicationGroupIdRef,omitempty" tf:"-"`

	// Selector for a VirtualDesktopApplicationGroup in desktopvirtualization to populate applicationGroupId.
	// +kubebuilder:validation:Optional
	ApplicationGroupIDSelector *v1.Selector `json:"applicationGroupIdSelector,omitempty" tf:"-"`

	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: DoNotAllow, Allow, Require.
	// +kubebuilder:validation:Optional
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy,omitempty" tf:"command_line_argument_policy,omitempty"`

	// Command Line Arguments for Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// Option to set a description for the Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Option to set a friendly name for the Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// The index of the icon you wish to use.
	// +kubebuilder:validation:Optional
	IconIndex *float64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	// +kubebuilder:validation:Optional
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// The file path location of the app on the Virtual Desktop OS.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	// +kubebuilder:validation:Optional
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

// VirtualDesktopApplicationSpec defines the desired state of VirtualDesktopApplication
type VirtualDesktopApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDesktopApplicationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualDesktopApplicationInitParameters `json:"initProvider,omitempty"`
}

// VirtualDesktopApplicationStatus defines the observed state of VirtualDesktopApplication.
type VirtualDesktopApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDesktopApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopApplication is the Schema for the VirtualDesktopApplications API. Manages a Virtual Desktop Application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commandLineArgumentPolicy) || (has(self.initProvider) && has(self.initProvider.commandLineArgumentPolicy))",message="spec.forProvider.commandLineArgumentPolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	Spec   VirtualDesktopApplicationSpec   `json:"spec"`
	Status VirtualDesktopApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopApplicationList contains a list of VirtualDesktopApplications
type VirtualDesktopApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopApplication `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopApplication_Kind             = "VirtualDesktopApplication"
	VirtualDesktopApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualDesktopApplication_Kind}.String()
	VirtualDesktopApplication_KindAPIVersion   = VirtualDesktopApplication_Kind + "." + CRDGroupVersion.String()
	VirtualDesktopApplication_GroupVersionKind = CRDGroupVersion.WithKind(VirtualDesktopApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopApplication{}, &VirtualDesktopApplicationList{})
}
