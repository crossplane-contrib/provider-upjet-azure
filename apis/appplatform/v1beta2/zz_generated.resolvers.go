// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	helper "github.com/crossplane/crossplane-tools/pkg/helpers"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *SpringCloudAPIPortal) ResolveReferences( // ResolveReferences of this SpringCloudAPIPortal.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.GatewayIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.ForProvider.GatewayIdsRefs,
			Selector:      mg.Spec.ForProvider.GatewayIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayIds")
	}
	mg.Spec.ForProvider.GatewayIds = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.GatewayIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.GatewayIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.InitProvider.GatewayIdsRefs,
			Selector:      mg.Spec.InitProvider.GatewayIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayIds")
	}
	mg.Spec.InitProvider.GatewayIds = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.GatewayIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this SpringCloudApp.
func (mg *SpringCloudApp) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceNameRef,
			Selector:     mg.Spec.ForProvider.ServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuildDeployment.
func (mg *SpringCloudBuildDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudAppID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuildPackBinding.
func (mg *SpringCloudBuildPackBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudBuilder", "SpringCloudBuilderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudBuilderID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudBuilderIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudBuilderIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudBuilderID")
	}
	mg.Spec.ForProvider.SpringCloudBuilderID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudBuilderIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuilder.
func (mg *SpringCloudBuilder) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudServiceID")
	}
	mg.Spec.InitProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudContainerDeployment.
func (mg *SpringCloudContainerDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudAppID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCustomizedAccelerator.
func (mg *SpringCloudCustomizedAccelerator) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudAccelerator", "SpringCloudAcceleratorList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudAcceleratorID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAcceleratorIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAcceleratorIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAcceleratorID")
	}
	mg.Spec.ForProvider.SpringCloudAcceleratorID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAcceleratorIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudDevToolPortal.
func (mg *SpringCloudDevToolPortal) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudServiceID")
	}
	mg.Spec.InitProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudGateway.
func (mg *SpringCloudGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudServiceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SpringCloudAppID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudService.
func (mg *SpringCloudService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Network.AppSubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network.AppSubnetIDRef,
				Selector:     mg.Spec.ForProvider.Network.AppSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network.AppSubnetID")
		}
		mg.Spec.ForProvider.Network.AppSubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network.AppSubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Network.ServiceRuntimeSubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network.ServiceRuntimeSubnetIDRef,
				Selector:     mg.Spec.ForProvider.Network.ServiceRuntimeSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network.ServiceRuntimeSubnetID")
		}
		mg.Spec.ForProvider.Network.ServiceRuntimeSubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network.ServiceRuntimeSubnetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Trace != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Trace.ConnectionString, ""),
				Extract:      resource.ExtractParamPath("connection_string", true),
				Reference:    mg.Spec.ForProvider.Trace.ConnectionStringRef,
				Selector:     mg.Spec.ForProvider.Trace.ConnectionStringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Trace.ConnectionString")
		}
		mg.Spec.ForProvider.Trace.ConnectionString = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Trace.ConnectionStringRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Network.AppSubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network.AppSubnetIDRef,
				Selector:     mg.Spec.InitProvider.Network.AppSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network.AppSubnetID")
		}
		mg.Spec.InitProvider.Network.AppSubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network.AppSubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Network.ServiceRuntimeSubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network.ServiceRuntimeSubnetIDRef,
				Selector:     mg.Spec.InitProvider.Network.ServiceRuntimeSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network.ServiceRuntimeSubnetID")
		}
		mg.Spec.InitProvider.Network.ServiceRuntimeSubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network.ServiceRuntimeSubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Trace != nil {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Trace.ConnectionString, ""),
				Extract:      resource.ExtractParamPath("connection_string", true),
				Reference:    mg.Spec.InitProvider.Trace.ConnectionStringRef,
				Selector:     mg.Spec.InitProvider.Trace.ConnectionStringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Trace.ConnectionString")
		}
		mg.Spec.InitProvider.Trace.ConnectionString = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Trace.ConnectionStringRef = rsp.ResolvedReference

	}

	return nil
}
