//go:build (appplatform || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *SpringCloudAPIPortal) ResolveReferences( // ResolveReferences of this SpringCloudAPIPortal.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.GatewayIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.ForProvider.GatewayIdsRefs,
			Selector:      mg.Spec.ForProvider.GatewayIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayIds")
	}
	mg.Spec.ForProvider.GatewayIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.GatewayIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.GatewayIds),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.InitProvider.GatewayIdsRefs,
			Selector:      mg.Spec.InitProvider.GatewayIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayIds")
	}
	mg.Spec.InitProvider.GatewayIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.GatewayIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this SpringCloudAPIPortalCustomDomain.
func (mg *SpringCloudAPIPortalCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudAPIPortal", "SpringCloudAPIPortalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAPIPortalID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAPIPortalIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAPIPortalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAPIPortalID")
	}
	mg.Spec.ForProvider.SpringCloudAPIPortalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAPIPortalIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudAPIPortal", "SpringCloudAPIPortalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudAPIPortalID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudAPIPortalIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudAPIPortalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudAPIPortalID")
	}
	mg.Spec.InitProvider.SpringCloudAPIPortalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudAPIPortalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAccelerator.
func (mg *SpringCloudAccelerator) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudServiceID")
	}
	mg.Spec.InitProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudJavaDeployment", "SpringCloudJavaDeploymentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeploymentName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DeploymentNameRef,
			Selector:     mg.Spec.ForProvider.DeploymentNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeploymentName")
	}
	mg.Spec.ForProvider.DeploymentName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeploymentNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudJavaDeployment", "SpringCloudJavaDeploymentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeploymentName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DeploymentNameRef,
			Selector:     mg.Spec.InitProvider.DeploymentNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DeploymentName")
	}
	mg.Spec.InitProvider.DeploymentName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DeploymentNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudAppID")
	}
	mg.Spec.InitProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudApp.
func (mg *SpringCloudApp) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceNameRef,
			Selector:     mg.Spec.ForProvider.ServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppCosmosDBAssociation.
func (mg *SpringCloudAppCosmosDBAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cosmosdb.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CosmosDBAccessKey),
			Extract:      resource.ExtractParamPath("primary_key", true),
			Reference:    mg.Spec.ForProvider.CosmosDBAccessKeyRef,
			Selector:     mg.Spec.ForProvider.CosmosDBAccessKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CosmosDBAccessKey")
	}
	mg.Spec.ForProvider.CosmosDBAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CosmosDBAccessKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cosmosdb.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CosmosDBAccountID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.CosmosDBAccountIDRef,
			Selector:     mg.Spec.ForProvider.CosmosDBAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CosmosDBAccountID")
	}
	mg.Spec.ForProvider.CosmosDBAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CosmosDBAccountIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cosmosdb.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CosmosDBAccessKey),
			Extract:      resource.ExtractParamPath("primary_key", true),
			Reference:    mg.Spec.InitProvider.CosmosDBAccessKeyRef,
			Selector:     mg.Spec.InitProvider.CosmosDBAccessKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CosmosDBAccessKey")
	}
	mg.Spec.InitProvider.CosmosDBAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CosmosDBAccessKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cosmosdb.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CosmosDBAccountID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.CosmosDBAccountIDRef,
			Selector:     mg.Spec.InitProvider.CosmosDBAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CosmosDBAccountID")
	}
	mg.Spec.InitProvider.CosmosDBAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CosmosDBAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppMySQLAssociation.
func (mg *SpringCloudAppMySQLAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatabaseNameRef,
			Selector:     mg.Spec.ForProvider.DatabaseNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseName")
	}
	mg.Spec.ForProvider.DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta2", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MySQLServerID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.MySQLServerIDRef,
			Selector:     mg.Spec.ForProvider.MySQLServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MySQLServerID")
	}
	mg.Spec.ForProvider.MySQLServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MySQLServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta2", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
			Extract:      resource.ExtractParamPath("administrator_login", false),
			Reference:    mg.Spec.ForProvider.UsernameRef,
			Selector:     mg.Spec.ForProvider.UsernameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatabaseName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DatabaseNameRef,
			Selector:     mg.Spec.InitProvider.DatabaseNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatabaseName")
	}
	mg.Spec.InitProvider.DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatabaseNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta2", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MySQLServerID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.MySQLServerIDRef,
			Selector:     mg.Spec.InitProvider.MySQLServerIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MySQLServerID")
	}
	mg.Spec.InitProvider.MySQLServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MySQLServerIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("dbformysql.azure.upbound.io", "v1beta2", "Server", "ServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Username),
			Extract:      resource.ExtractParamPath("administrator_login", false),
			Reference:    mg.Spec.InitProvider.UsernameRef,
			Selector:     mg.Spec.InitProvider.UsernameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Username")
	}
	mg.Spec.InitProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UsernameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedisAccessKey),
			Extract:      resource.ExtractParamPath("primary_access_key", true),
			Reference:    mg.Spec.ForProvider.RedisAccessKeyRef,
			Selector:     mg.Spec.ForProvider.RedisAccessKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedisAccessKey")
	}
	mg.Spec.ForProvider.RedisAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedisAccessKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedisCacheID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.RedisCacheIDRef,
			Selector:     mg.Spec.ForProvider.RedisCacheIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedisCacheID")
	}
	mg.Spec.ForProvider.RedisCacheID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedisCacheIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedisAccessKey),
			Extract:      resource.ExtractParamPath("primary_access_key", true),
			Reference:    mg.Spec.InitProvider.RedisAccessKeyRef,
			Selector:     mg.Spec.InitProvider.RedisAccessKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedisAccessKey")
	}
	mg.Spec.InitProvider.RedisAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedisAccessKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cache.azure.upbound.io", "v1beta2", "RedisCache", "RedisCacheList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedisCacheID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.RedisCacheIDRef,
			Selector:     mg.Spec.InitProvider.RedisCacheIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedisCacheID")
	}
	mg.Spec.InitProvider.RedisCacheID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedisCacheIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuildDeployment.
func (mg *SpringCloudBuildDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuildPackBinding.
func (mg *SpringCloudBuildPackBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudBuilder", "SpringCloudBuilderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudBuilderID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudBuilderIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudBuilderIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudBuilderID")
	}
	mg.Spec.ForProvider.SpringCloudBuilderID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudBuilderIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudBuilder.
func (mg *SpringCloudBuilder) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudServiceID")
	}
	mg.Spec.InitProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultCertificateID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.KeyVaultCertificateIDRef,
			Selector:     mg.Spec.ForProvider.KeyVaultCertificateIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultCertificateID")
	}
	mg.Spec.ForProvider.KeyVaultCertificateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultCertificateIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceNameRef,
			Selector:     mg.Spec.ForProvider.ServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultCertificateID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.KeyVaultCertificateIDRef,
			Selector:     mg.Spec.InitProvider.KeyVaultCertificateIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultCertificateID")
	}
	mg.Spec.InitProvider.KeyVaultCertificateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyVaultCertificateIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudConfigurationService.
func (mg *SpringCloudConfigurationService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudContainerDeployment.
func (mg *SpringCloudContainerDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudAppID")
	}
	mg.Spec.InitProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCustomizedAccelerator.
func (mg *SpringCloudCustomizedAccelerator) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudAccelerator", "SpringCloudAcceleratorList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAcceleratorID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAcceleratorIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAcceleratorIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAcceleratorID")
	}
	mg.Spec.ForProvider.SpringCloudAcceleratorID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAcceleratorIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudDevToolPortal.
func (mg *SpringCloudDevToolPortal) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudServiceID")
	}
	mg.Spec.InitProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudGateway.
func (mg *SpringCloudGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudGatewayCustomDomain.
func (mg *SpringCloudGatewayCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudGatewayIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudGatewayID")
	}
	mg.Spec.ForProvider.SpringCloudGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudGatewayIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudGateway", "SpringCloudGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpringCloudGatewayID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SpringCloudGatewayIDRef,
			Selector:     mg.Spec.InitProvider.SpringCloudGatewayIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpringCloudGatewayID")
	}
	mg.Spec.InitProvider.SpringCloudGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpringCloudGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta1", "SpringCloudApp", "SpringCloudAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudService.
func (mg *SpringCloudService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].AppSubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network[i3].AppSubnetIDRef,
				Selector:     mg.Spec.ForProvider.Network[i3].AppSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].AppSubnetID")
		}
		mg.Spec.ForProvider.Network[i3].AppSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].AppSubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDRef,
				Selector:     mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID")
		}
		mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Trace); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Trace[i3].ConnectionString),
				Extract:      resource.ExtractParamPath("connection_string", true),
				Reference:    mg.Spec.ForProvider.Trace[i3].ConnectionStringRef,
				Selector:     mg.Spec.ForProvider.Trace[i3].ConnectionStringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Trace[i3].ConnectionString")
		}
		mg.Spec.ForProvider.Trace[i3].ConnectionString = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Trace[i3].ConnectionStringRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].AppSubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network[i3].AppSubnetIDRef,
				Selector:     mg.Spec.InitProvider.Network[i3].AppSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].AppSubnetID")
		}
		mg.Spec.InitProvider.Network[i3].AppSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].AppSubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetIDRef,
				Selector:     mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetID")
		}
		mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].ServiceRuntimeSubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Trace); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("insights.azure.upbound.io", "v1beta1", "ApplicationInsights", "ApplicationInsightsList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Trace[i3].ConnectionString),
				Extract:      resource.ExtractParamPath("connection_string", true),
				Reference:    mg.Spec.InitProvider.Trace[i3].ConnectionStringRef,
				Selector:     mg.Spec.InitProvider.Trace[i3].ConnectionStringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Trace[i3].ConnectionString")
		}
		mg.Spec.InitProvider.Trace[i3].ConnectionString = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Trace[i3].ConnectionStringRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this SpringCloudStorage.
func (mg *SpringCloudStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appplatform.azure.upbound.io", "v1beta2", "SpringCloudService", "SpringCloudServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
			Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountKey),
			Extract:      resource.ExtractParamPath("primary_access_key", true),
			Reference:    mg.Spec.ForProvider.StorageAccountKeyRef,
			Selector:     mg.Spec.ForProvider.StorageAccountKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountKey")
	}
	mg.Spec.ForProvider.StorageAccountKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.StorageAccountNameRef,
			Selector:     mg.Spec.ForProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountName")
	}
	mg.Spec.ForProvider.StorageAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageAccountKey),
			Extract:      resource.ExtractParamPath("primary_access_key", true),
			Reference:    mg.Spec.InitProvider.StorageAccountKeyRef,
			Selector:     mg.Spec.InitProvider.StorageAccountKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountKey")
	}
	mg.Spec.InitProvider.StorageAccountKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageAccountName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.StorageAccountNameRef,
			Selector:     mg.Spec.InitProvider.StorageAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountName")
	}
	mg.Spec.InitProvider.StorageAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountNameRef = rsp.ResolvedReference

	return nil
}
