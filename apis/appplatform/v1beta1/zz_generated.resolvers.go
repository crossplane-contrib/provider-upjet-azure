/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta13 "github.com/upbound/provider-azure/apis/cache/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/cosmosdb/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/dbformysql/v1beta1"
	v1beta16 "github.com/upbound/provider-azure/apis/insights/v1beta1"
	v1beta14 "github.com/upbound/provider-azure/apis/keyvault/v1beta1"
	v1beta15 "github.com/upbound/provider-azure/apis/network/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	v1beta17 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this SpringCloudActiveDeployment.
func (mg *SpringCloudActiveDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeploymentName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DeploymentNameRef,
		Selector:     mg.Spec.ForProvider.DeploymentNameSelector,
		To: reference.To{
			List:    &SpringCloudJavaDeploymentList{},
			Managed: &SpringCloudJavaDeployment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DeploymentName")
	}
	mg.Spec.ForProvider.DeploymentName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DeploymentNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudApp.
func (mg *SpringCloudApp) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceNameRef,
		Selector:     mg.Spec.ForProvider.ServiceNameSelector,
		To: reference.To{
			List:    &SpringCloudServiceList{},
			Managed: &SpringCloudService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppCosmosDBAssociation.
func (mg *SpringCloudAppCosmosDBAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CosmosDBAccessKey),
		Extract:      resource.ExtractParamPath("primary_key", true),
		Reference:    mg.Spec.ForProvider.CosmosDBAccessKeyRef,
		Selector:     mg.Spec.ForProvider.CosmosDBAccessKeySelector,
		To: reference.To{
			List:    &v1beta11.AccountList{},
			Managed: &v1beta11.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CosmosDBAccessKey")
	}
	mg.Spec.ForProvider.CosmosDBAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CosmosDBAccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CosmosDBAccountID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CosmosDBAccountIDRef,
		Selector:     mg.Spec.ForProvider.CosmosDBAccountIDSelector,
		To: reference.To{
			List:    &v1beta11.AccountList{},
			Managed: &v1beta11.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CosmosDBAccountID")
	}
	mg.Spec.ForProvider.CosmosDBAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CosmosDBAccountIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppMySQLAssociation.
func (mg *SpringCloudAppMySQLAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatabaseName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DatabaseNameRef,
		Selector:     mg.Spec.ForProvider.DatabaseNameSelector,
		To: reference.To{
			List:    &v1beta12.DatabaseList{},
			Managed: &v1beta12.Database{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatabaseName")
	}
	mg.Spec.ForProvider.DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatabaseNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MySQLServerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.MySQLServerIDRef,
		Selector:     mg.Spec.ForProvider.MySQLServerIDSelector,
		To: reference.To{
			List:    &v1beta12.ServerList{},
			Managed: &v1beta12.Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MySQLServerID")
	}
	mg.Spec.ForProvider.MySQLServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MySQLServerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Username),
		Extract:      resource.ExtractParamPath("administrator_login", false),
		Reference:    mg.Spec.ForProvider.UsernameRef,
		Selector:     mg.Spec.ForProvider.UsernameSelector,
		To: reference.To{
			List:    &v1beta12.ServerList{},
			Managed: &v1beta12.Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Username")
	}
	mg.Spec.ForProvider.Username = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UsernameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudAppRedisAssociation.
func (mg *SpringCloudAppRedisAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedisAccessKey),
		Extract:      resource.ExtractParamPath("primary_access_key", true),
		Reference:    mg.Spec.ForProvider.RedisAccessKeyRef,
		Selector:     mg.Spec.ForProvider.RedisAccessKeySelector,
		To: reference.To{
			List:    &v1beta13.RedisCacheList{},
			Managed: &v1beta13.RedisCache{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedisAccessKey")
	}
	mg.Spec.ForProvider.RedisAccessKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedisAccessKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedisCacheID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RedisCacheIDRef,
		Selector:     mg.Spec.ForProvider.RedisCacheIDSelector,
		To: reference.To{
			List:    &v1beta13.RedisCacheList{},
			Managed: &v1beta13.RedisCache{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedisCacheID")
	}
	mg.Spec.ForProvider.RedisCacheID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedisCacheIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCertificate.
func (mg *SpringCloudCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultCertificateID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.KeyVaultCertificateIDRef,
		Selector:     mg.Spec.ForProvider.KeyVaultCertificateIDSelector,
		To: reference.To{
			List:    &v1beta14.CertificateList{},
			Managed: &v1beta14.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultCertificateID")
	}
	mg.Spec.ForProvider.KeyVaultCertificateID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultCertificateIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceNameRef,
		Selector:     mg.Spec.ForProvider.ServiceNameSelector,
		To: reference.To{
			List:    &SpringCloudServiceList{},
			Managed: &SpringCloudService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceName")
	}
	mg.Spec.ForProvider.ServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudCustomDomain.
func (mg *SpringCloudCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudJavaDeployment.
func (mg *SpringCloudJavaDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudAppID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudAppIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudAppIDSelector,
		To: reference.To{
			List:    &SpringCloudAppList{},
			Managed: &SpringCloudApp{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudAppID")
	}
	mg.Spec.ForProvider.SpringCloudAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudAppIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SpringCloudService.
func (mg *SpringCloudService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].AppSubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Network[i3].AppSubnetIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].AppSubnetIDSelector,
			To: reference.To{
				List:    &v1beta15.SubnetList{},
				Managed: &v1beta15.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].AppSubnetID")
		}
		mg.Spec.ForProvider.Network[i3].AppSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].AppSubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDRef,
			Selector:     mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDSelector,
			To: reference.To{
				List:    &v1beta15.SubnetList{},
				Managed: &v1beta15.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID")
		}
		mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].ServiceRuntimeSubnetIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Trace); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Trace[i3].ConnectionString),
			Extract:      resource.ExtractParamPath("connection_string", true),
			Reference:    mg.Spec.ForProvider.Trace[i3].ConnectionStringRef,
			Selector:     mg.Spec.ForProvider.Trace[i3].ConnectionStringSelector,
			To: reference.To{
				List:    &v1beta16.ApplicationInsightsList{},
				Managed: &v1beta16.ApplicationInsights{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Trace[i3].ConnectionString")
		}
		mg.Spec.ForProvider.Trace[i3].ConnectionString = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Trace[i3].ConnectionStringRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this SpringCloudStorage.
func (mg *SpringCloudStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpringCloudServiceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpringCloudServiceIDRef,
		Selector:     mg.Spec.ForProvider.SpringCloudServiceIDSelector,
		To: reference.To{
			List:    &SpringCloudServiceList{},
			Managed: &SpringCloudService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpringCloudServiceID")
	}
	mg.Spec.ForProvider.SpringCloudServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpringCloudServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountKey),
		Extract:      resource.ExtractParamPath("primary_access_key", true),
		Reference:    mg.Spec.ForProvider.StorageAccountKeyRef,
		Selector:     mg.Spec.ForProvider.StorageAccountKeySelector,
		To: reference.To{
			List:    &v1beta17.AccountList{},
			Managed: &v1beta17.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountKey")
	}
	mg.Spec.ForProvider.StorageAccountKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountKeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.StorageAccountNameRef,
		Selector:     mg.Spec.ForProvider.StorageAccountNameSelector,
		To: reference.To{
			List:    &v1beta17.AccountList{},
			Managed: &v1beta17.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountName")
	}
	mg.Spec.ForProvider.StorageAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountNameRef = rsp.ResolvedReference

	return nil
}
