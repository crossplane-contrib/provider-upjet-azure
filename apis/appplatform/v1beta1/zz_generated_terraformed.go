// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAccelerator
func (mg *SpringCloudAccelerator) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_accelerator"
}

// GetConnectionDetailsMapping for this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAccelerator
func (tr *SpringCloudAccelerator) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAccelerator using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAccelerator) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAcceleratorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAccelerator) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudActiveDeployment
func (mg *SpringCloudActiveDeployment) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_active_deployment"
}

// GetConnectionDetailsMapping for this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudActiveDeployment
func (tr *SpringCloudActiveDeployment) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudActiveDeployment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudActiveDeployment) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudActiveDeploymentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudActiveDeployment) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAPIPortal
func (mg *SpringCloudAPIPortal) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_api_portal"
}

// GetConnectionDetailsMapping for this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAPIPortal
func (tr *SpringCloudAPIPortal) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAPIPortal using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAPIPortal) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAPIPortalParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAPIPortal) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAPIPortalCustomDomain
func (mg *SpringCloudAPIPortalCustomDomain) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_api_portal_custom_domain"
}

// GetConnectionDetailsMapping for this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAPIPortalCustomDomain
func (tr *SpringCloudAPIPortalCustomDomain) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAPIPortalCustomDomain using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAPIPortalCustomDomain) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAPIPortalCustomDomainParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAPIPortalCustomDomain) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudApp
func (mg *SpringCloudApp) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_app"
}

// GetConnectionDetailsMapping for this SpringCloudApp
func (tr *SpringCloudApp) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudApp
func (tr *SpringCloudApp) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudApp
func (tr *SpringCloudApp) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudApp
func (tr *SpringCloudApp) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudApp
func (tr *SpringCloudApp) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudApp
func (tr *SpringCloudApp) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudApp
func (tr *SpringCloudApp) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudApp using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudApp) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAppParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudApp) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAppCosmosDBAssociation
func (mg *SpringCloudAppCosmosDBAssociation) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_app_cosmosdb_association"
}

// GetConnectionDetailsMapping for this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAppCosmosDBAssociation
func (tr *SpringCloudAppCosmosDBAssociation) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAppCosmosDBAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAppCosmosDBAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAppCosmosDBAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAppCosmosDBAssociation) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAppMySQLAssociation
func (mg *SpringCloudAppMySQLAssociation) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_app_mysql_association"
}

// GetConnectionDetailsMapping for this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAppMySQLAssociation
func (tr *SpringCloudAppMySQLAssociation) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAppMySQLAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAppMySQLAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAppMySQLAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAppMySQLAssociation) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudAppRedisAssociation
func (mg *SpringCloudAppRedisAssociation) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_app_redis_association"
}

// GetConnectionDetailsMapping for this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudAppRedisAssociation
func (tr *SpringCloudAppRedisAssociation) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudAppRedisAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudAppRedisAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudAppRedisAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudAppRedisAssociation) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudBuildDeployment
func (mg *SpringCloudBuildDeployment) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_build_deployment"
}

// GetConnectionDetailsMapping for this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudBuildDeployment
func (tr *SpringCloudBuildDeployment) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudBuildDeployment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudBuildDeployment) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudBuildDeploymentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudBuildDeployment) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudBuildPackBinding
func (mg *SpringCloudBuildPackBinding) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_build_pack_binding"
}

// GetConnectionDetailsMapping for this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudBuildPackBinding
func (tr *SpringCloudBuildPackBinding) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudBuildPackBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudBuildPackBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudBuildPackBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudBuildPackBinding) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudBuilder
func (mg *SpringCloudBuilder) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_builder"
}

// GetConnectionDetailsMapping for this SpringCloudBuilder
func (tr *SpringCloudBuilder) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudBuilder
func (tr *SpringCloudBuilder) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudBuilder
func (tr *SpringCloudBuilder) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudBuilder
func (tr *SpringCloudBuilder) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudBuilder
func (tr *SpringCloudBuilder) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudBuilder
func (tr *SpringCloudBuilder) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudBuilder
func (tr *SpringCloudBuilder) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudBuilder using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudBuilder) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudBuilderParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudBuilder) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudCertificate
func (mg *SpringCloudCertificate) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_certificate"
}

// GetConnectionDetailsMapping for this SpringCloudCertificate
func (tr *SpringCloudCertificate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudCertificate
func (tr *SpringCloudCertificate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudCertificate
func (tr *SpringCloudCertificate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudCertificate
func (tr *SpringCloudCertificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudCertificate
func (tr *SpringCloudCertificate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudCertificate
func (tr *SpringCloudCertificate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudCertificate
func (tr *SpringCloudCertificate) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudCertificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudCertificate) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudCertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudCertificate) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudConfigurationService
func (mg *SpringCloudConfigurationService) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_configuration_service"
}

// GetConnectionDetailsMapping for this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"repository[*].password": "spec.forProvider.repository[*].passwordSecretRef", "repository[*].private_key": "spec.forProvider.repository[*].privateKeySecretRef"}
}

// GetObservation of this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudConfigurationService
func (tr *SpringCloudConfigurationService) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudConfigurationService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudConfigurationService) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudConfigurationServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudConfigurationService) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudContainerDeployment
func (mg *SpringCloudContainerDeployment) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_container_deployment"
}

// GetConnectionDetailsMapping for this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudContainerDeployment
func (tr *SpringCloudContainerDeployment) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudContainerDeployment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudContainerDeployment) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudContainerDeploymentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudContainerDeployment) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudCustomDomain
func (mg *SpringCloudCustomDomain) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_custom_domain"
}

// GetConnectionDetailsMapping for this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudCustomDomain
func (tr *SpringCloudCustomDomain) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudCustomDomain using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudCustomDomain) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudCustomDomainParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudCustomDomain) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudCustomizedAccelerator
func (mg *SpringCloudCustomizedAccelerator) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_customized_accelerator"
}

// GetConnectionDetailsMapping for this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"git_repository[*].basic_auth[*].password": "spec.forProvider.gitRepository[*].basicAuth[*].passwordSecretRef", "git_repository[*].ssh_auth[*].host_key": "spec.forProvider.gitRepository[*].sshAuth[*].hostKeySecretRef", "git_repository[*].ssh_auth[*].private_key": "spec.forProvider.gitRepository[*].sshAuth[*].privateKeySecretRef"}
}

// GetObservation of this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudCustomizedAccelerator
func (tr *SpringCloudCustomizedAccelerator) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudCustomizedAccelerator using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudCustomizedAccelerator) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudCustomizedAcceleratorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudCustomizedAccelerator) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudDevToolPortal
func (mg *SpringCloudDevToolPortal) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_dev_tool_portal"
}

// GetConnectionDetailsMapping for this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudDevToolPortal
func (tr *SpringCloudDevToolPortal) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudDevToolPortal using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudDevToolPortal) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudDevToolPortalParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudDevToolPortal) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudGateway
func (mg *SpringCloudGateway) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_gateway"
}

// GetConnectionDetailsMapping for this SpringCloudGateway
func (tr *SpringCloudGateway) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"sensitive_environment_variables": "spec.forProvider.sensitiveEnvironmentVariablesSecretRef"}
}

// GetObservation of this SpringCloudGateway
func (tr *SpringCloudGateway) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudGateway
func (tr *SpringCloudGateway) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudGateway
func (tr *SpringCloudGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudGateway
func (tr *SpringCloudGateway) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudGateway
func (tr *SpringCloudGateway) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudGateway
func (tr *SpringCloudGateway) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudGateway) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudGatewayCustomDomain
func (mg *SpringCloudGatewayCustomDomain) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_gateway_custom_domain"
}

// GetConnectionDetailsMapping for this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudGatewayCustomDomain
func (tr *SpringCloudGatewayCustomDomain) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudGatewayCustomDomain using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudGatewayCustomDomain) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudGatewayCustomDomainParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudGatewayCustomDomain) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudJavaDeployment
func (mg *SpringCloudJavaDeployment) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_java_deployment"
}

// GetConnectionDetailsMapping for this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudJavaDeployment
func (tr *SpringCloudJavaDeployment) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudJavaDeployment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudJavaDeployment) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudJavaDeploymentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudJavaDeployment) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudService
func (mg *SpringCloudService) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_service"
}

// GetConnectionDetailsMapping for this SpringCloudService
func (tr *SpringCloudService) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"config_server_git_setting[*].http_basic_auth[*].password": "spec.forProvider.configServerGitSetting[*].httpBasicAuth[*].passwordSecretRef", "config_server_git_setting[*].repository[*].http_basic_auth[*].password": "spec.forProvider.configServerGitSetting[*].repository[*].httpBasicAuth[*].passwordSecretRef", "config_server_git_setting[*].repository[*].ssh_auth[*].host_key": "spec.forProvider.configServerGitSetting[*].repository[*].sshAuth[*].hostKeySecretRef", "config_server_git_setting[*].repository[*].ssh_auth[*].private_key": "spec.forProvider.configServerGitSetting[*].repository[*].sshAuth[*].privateKeySecretRef", "config_server_git_setting[*].ssh_auth[*].host_key": "spec.forProvider.configServerGitSetting[*].sshAuth[*].hostKeySecretRef", "config_server_git_setting[*].ssh_auth[*].private_key": "spec.forProvider.configServerGitSetting[*].sshAuth[*].privateKeySecretRef"}
}

// GetObservation of this SpringCloudService
func (tr *SpringCloudService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudService
func (tr *SpringCloudService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudService
func (tr *SpringCloudService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudService
func (tr *SpringCloudService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudService
func (tr *SpringCloudService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudService
func (tr *SpringCloudService) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudService) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudService) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SpringCloudStorage
func (mg *SpringCloudStorage) GetTerraformResourceType() string {
	return "azurerm_spring_cloud_storage"
}

// GetConnectionDetailsMapping for this SpringCloudStorage
func (tr *SpringCloudStorage) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpringCloudStorage
func (tr *SpringCloudStorage) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpringCloudStorage
func (tr *SpringCloudStorage) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpringCloudStorage
func (tr *SpringCloudStorage) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpringCloudStorage
func (tr *SpringCloudStorage) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpringCloudStorage
func (tr *SpringCloudStorage) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SpringCloudStorage
func (tr *SpringCloudStorage) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SpringCloudStorage using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpringCloudStorage) LateInitialize(attrs []byte) (bool, error) {
	params := &SpringCloudStorageParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpringCloudStorage) GetTerraformSchemaVersion() int {
	return 1
}
