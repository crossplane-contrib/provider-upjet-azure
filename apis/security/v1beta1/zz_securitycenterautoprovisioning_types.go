/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityCenterAutoProvisioningObservation struct {

	// The ID of the Security Center Auto Provisioning.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityCenterAutoProvisioningParameters struct {

	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are On (to install the security agent automatically, if it's missing) or Off (to not install the security agent automatically).
	// +kubebuilder:validation:Required
	AutoProvision *string `json:"autoProvision" tf:"auto_provision,omitempty"`
}

// SecurityCenterAutoProvisioningSpec defines the desired state of SecurityCenterAutoProvisioning
type SecurityCenterAutoProvisioningSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityCenterAutoProvisioningParameters `json:"forProvider"`
}

// SecurityCenterAutoProvisioningStatus defines the observed state of SecurityCenterAutoProvisioning.
type SecurityCenterAutoProvisioningStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityCenterAutoProvisioningObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterAutoProvisioning is the Schema for the SecurityCenterAutoProvisionings API. Manages the subscription's Security Center Auto Provisioning.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SecurityCenterAutoProvisioning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityCenterAutoProvisioningSpec   `json:"spec"`
	Status            SecurityCenterAutoProvisioningStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterAutoProvisioningList contains a list of SecurityCenterAutoProvisionings
type SecurityCenterAutoProvisioningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityCenterAutoProvisioning `json:"items"`
}

// Repository type metadata.
var (
	SecurityCenterAutoProvisioning_Kind             = "SecurityCenterAutoProvisioning"
	SecurityCenterAutoProvisioning_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityCenterAutoProvisioning_Kind}.String()
	SecurityCenterAutoProvisioning_KindAPIVersion   = SecurityCenterAutoProvisioning_Kind + "." + CRDGroupVersion.String()
	SecurityCenterAutoProvisioning_GroupVersionKind = CRDGroupVersion.WithKind(SecurityCenterAutoProvisioning_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityCenterAutoProvisioning{}, &SecurityCenterAutoProvisioningList{})
}
