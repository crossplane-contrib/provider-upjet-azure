//go:build (containerapp || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentCustomDomainInitParameters struct {

	// The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
	// The Custom Domain Certificate Private Key as a base64 encoded PFX or PEM.
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The password for the Certificate bundle.
	// The Custom Domain Certificate password.
	CertificatePasswordSecretRef v1.SecretKeySelector `json:"certificatePasswordSecretRef" tf:"-"`

	// The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
	// The Container App Managed Environment ID to configure this Custom Domain on.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.Reference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.Selector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// Custom DNS Suffix for the Container App Environment.
	// The Custom Domain DNS suffix for this Container App Environment.
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`
}

type EnvironmentCustomDomainObservation struct {

	// The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
	// The Custom Domain Certificate Private Key as a base64 encoded PFX or PEM.
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
	// The Container App Managed Environment ID to configure this Custom Domain on.
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Custom DNS Suffix for the Container App Environment.
	// The Custom Domain DNS suffix for this Container App Environment.
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EnvironmentCustomDomainParameters struct {

	// The bundle of Private Key and Certificate for the Custom DNS Suffix as a base64 encoded PFX or PEM.
	// The Custom Domain Certificate Private Key as a base64 encoded PFX or PEM.
	// +kubebuilder:validation:Optional
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The password for the Certificate bundle.
	// The Custom Domain Certificate password.
	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef v1.SecretKeySelector `json:"certificatePasswordSecretRef" tf:"-"`

	// The ID of the Container Apps Managed Environment. Changing this forces a new resource to be created.
	// The Container App Managed Environment ID to configure this Custom Domain on.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.Reference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.Selector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// Custom DNS Suffix for the Container App Environment.
	// The Custom Domain DNS suffix for this Container App Environment.
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`
}

// EnvironmentCustomDomainSpec defines the desired state of EnvironmentCustomDomain
type EnvironmentCustomDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentCustomDomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentCustomDomainInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentCustomDomainStatus defines the observed state of EnvironmentCustomDomain.
type EnvironmentCustomDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentCustomDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentCustomDomain is the Schema for the EnvironmentCustomDomains API. Manages a Container App Environment Custom Domain.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EnvironmentCustomDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateBlobBase64) || (has(self.initProvider) && has(self.initProvider.certificateBlobBase64))",message="spec.forProvider.certificateBlobBase64 is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificatePasswordSecretRef)",message="spec.forProvider.certificatePasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dnsSuffix) || (has(self.initProvider) && has(self.initProvider.dnsSuffix))",message="spec.forProvider.dnsSuffix is a required parameter"
	Spec   EnvironmentCustomDomainSpec   `json:"spec"`
	Status EnvironmentCustomDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentCustomDomainList contains a list of EnvironmentCustomDomains
type EnvironmentCustomDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentCustomDomain `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentCustomDomain_Kind             = "EnvironmentCustomDomain"
	EnvironmentCustomDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentCustomDomain_Kind}.String()
	EnvironmentCustomDomain_KindAPIVersion   = EnvironmentCustomDomain_Kind + "." + CRDGroupVersion.String()
	EnvironmentCustomDomain_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentCustomDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentCustomDomain{}, &EnvironmentCustomDomainList{})
}
