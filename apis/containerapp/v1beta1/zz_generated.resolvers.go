// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ContainerApp) ResolveReferences( // ResolveReferences of this ContainerApp.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.InitProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.InitProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CustomDomain.
func (mg *CustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "EnvironmentCertificate", "EnvironmentCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentCertificateID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentCertificateIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentCertificateIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentCertificateID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentCertificateID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentCertificateIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta2", "ContainerApp", "ContainerAppList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppID")
	}
	mg.Spec.ForProvider.ContainerAppID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "EnvironmentCertificate", "EnvironmentCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerAppEnvironmentCertificateID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ContainerAppEnvironmentCertificateIDRef,
			Selector:     mg.Spec.InitProvider.ContainerAppEnvironmentCertificateIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerAppEnvironmentCertificateID")
	}
	mg.Spec.InitProvider.ContainerAppEnvironmentCertificateID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerAppEnvironmentCertificateIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Environment.
func (mg *Environment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.InfrastructureResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InfrastructureResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.InfrastructureResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InfrastructureResourceGroupName")
	}
	mg.Spec.ForProvider.InfrastructureResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.InfrastructureResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.InfrastructureSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.InfrastructureSubnetIDRef,
			Selector:     mg.Spec.ForProvider.InfrastructureSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InfrastructureSubnetID")
	}
	mg.Spec.ForProvider.InfrastructureSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.InfrastructureSubnetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.InfrastructureResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InfrastructureResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.InfrastructureResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InfrastructureResourceGroupName")
	}
	mg.Spec.InitProvider.InfrastructureResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.InfrastructureResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.InfrastructureSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.InfrastructureSubnetIDRef,
			Selector:     mg.Spec.InitProvider.InfrastructureSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InfrastructureSubnetID")
	}
	mg.Spec.InitProvider.InfrastructureSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.InfrastructureSubnetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.InitProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EnvironmentCertificate.
func (mg *EnvironmentCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EnvironmentCustomDomain.
func (mg *EnvironmentCustomDomain) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.InitProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.InitProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EnvironmentDaprComponent.
func (mg *EnvironmentDaprComponent) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EnvironmentStorage.
func (mg *EnvironmentStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.AccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.AccountNameRef,
			Selector:     mg.Spec.ForProvider.AccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AccountName")
	}
	mg.Spec.ForProvider.AccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerapp.azure.upbound.io", "v1beta1", "Environment", "EnvironmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerAppEnvironmentID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerAppEnvironmentIDRef,
			Selector:     mg.Spec.ForProvider.ContainerAppEnvironmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerAppEnvironmentID")
	}
	mg.Spec.ForProvider.ContainerAppEnvironmentID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerAppEnvironmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ShareName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ShareNameRef,
			Selector:     mg.Spec.ForProvider.ShareNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ShareName")
	}
	mg.Spec.ForProvider.ShareName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ShareNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.AccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.AccountNameRef,
			Selector:     mg.Spec.InitProvider.AccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AccountName")
	}
	mg.Spec.InitProvider.AccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ShareName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ShareNameRef,
			Selector:     mg.Spec.InitProvider.ShareNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ShareName")
	}
	mg.Spec.InitProvider.ShareName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ShareNameRef = rsp.ResolvedReference

	return nil
}
