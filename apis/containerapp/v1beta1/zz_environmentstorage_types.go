//go:build (containerapp || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentStorageInitParameters struct {

	// The Storage Account Access Key.
	// The Storage Account Access Key.
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// The access mode to connect this storage to the Container App. Possible values include ReadOnly and ReadWrite. Changing this forces a new resource to be created.
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	// The Azure Storage Account in which the Share to be used is located.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta2.Account
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Reference to a Account in storage to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameRef *v1.Reference `json:"accountNameRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameSelector *v1.Selector `json:"accountNameSelector,omitempty" tf:"-"`

	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	// The name of the Azure Storage Share to use.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Share
	ShareName *string `json:"shareName,omitempty" tf:"share_name,omitempty"`

	// Reference to a Share in storage to populate shareName.
	// +kubebuilder:validation:Optional
	ShareNameRef *v1.Reference `json:"shareNameRef,omitempty" tf:"-"`

	// Selector for a Share in storage to populate shareName.
	// +kubebuilder:validation:Optional
	ShareNameSelector *v1.Selector `json:"shareNameSelector,omitempty" tf:"-"`
}

type EnvironmentStorageObservation struct {

	// The access mode to connect this storage to the Container App. Possible values include ReadOnly and ReadWrite. Changing this forces a new resource to be created.
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	// The Azure Storage Account in which the Share to be used is located.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	// The ID of the Container App Environment to which this storage belongs.
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// The ID of the Container App Environment Storage
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	// The name of the Azure Storage Share to use.
	ShareName *string `json:"shareName,omitempty" tf:"share_name,omitempty"`
}

type EnvironmentStorageParameters struct {

	// The Storage Account Access Key.
	// The Storage Account Access Key.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// The access mode to connect this storage to the Container App. Possible values include ReadOnly and ReadWrite. Changing this forces a new resource to be created.
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`.
	// +kubebuilder:validation:Optional
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	// The Azure Storage Account in which the Share to be used is located.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta2.Account
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Reference to a Account in storage to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameRef *v1.Reference `json:"accountNameRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameSelector *v1.Selector `json:"accountNameSelector,omitempty" tf:"-"`

	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	// The ID of the Container App Environment to which this storage belongs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.Reference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.Selector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	// The name of the Azure Storage Share to use.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Share
	// +kubebuilder:validation:Optional
	ShareName *string `json:"shareName,omitempty" tf:"share_name,omitempty"`

	// Reference to a Share in storage to populate shareName.
	// +kubebuilder:validation:Optional
	ShareNameRef *v1.Reference `json:"shareNameRef,omitempty" tf:"-"`

	// Selector for a Share in storage to populate shareName.
	// +kubebuilder:validation:Optional
	ShareNameSelector *v1.Selector `json:"shareNameSelector,omitempty" tf:"-"`
}

// EnvironmentStorageSpec defines the desired state of EnvironmentStorage
type EnvironmentStorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentStorageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentStorageInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentStorageStatus defines the observed state of EnvironmentStorage.
type EnvironmentStorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentStorage is the Schema for the EnvironmentStorages API. Manages a Container App Environment Storage.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EnvironmentStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessKeySecretRef)",message="spec.forProvider.accessKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessMode) || (has(self.initProvider) && has(self.initProvider.accessMode))",message="spec.forProvider.accessMode is a required parameter"
	Spec   EnvironmentStorageSpec   `json:"spec"`
	Status EnvironmentStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentStorageList contains a list of EnvironmentStorages
type EnvironmentStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentStorage `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentStorage_Kind             = "EnvironmentStorage"
	EnvironmentStorage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentStorage_Kind}.String()
	EnvironmentStorage_KindAPIVersion   = EnvironmentStorage_Kind + "." + CRDGroupVersion.String()
	EnvironmentStorage_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentStorage_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentStorage{}, &EnvironmentStorageList{})
}
