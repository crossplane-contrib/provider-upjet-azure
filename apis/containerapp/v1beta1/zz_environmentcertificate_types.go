//go:build (containerapp || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentCertificateInitParameters struct {

	// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
	// The Certificate Private Key as a base64 encoded PFX or PEM.
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The password for the Certificate. Changing this forces a new resource to be created.
	// The password for the Certificate.
	CertificatePasswordSecretRef v1.SecretKeySelector `json:"certificatePasswordSecretRef" tf:"-"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type EnvironmentCertificateObservation struct {

	// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
	// The Certificate Private Key as a base64 encoded PFX or PEM.
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
	// The Container App Managed Environment ID to configure this Certificate on.
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// The expiration date for the Certificate.
	// The expiration date for the Certificate.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// The ID of the Container App Environment Certificate
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The date of issue for the Certificate.
	// The date of issue for the Certificate.
	IssueDate *string `json:"issueDate,omitempty" tf:"issue_date,omitempty"`

	// The Certificate Issuer.
	// The Certificate Issuer.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// The Subject Name for the Certificate.
	// The Subject Name for the Certificate.
	SubjectName *string `json:"subjectName,omitempty" tf:"subject_name,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The Thumbprint of the Certificate.
	// The Thumbprint of the Certificate.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type EnvironmentCertificateParameters struct {

	// The Certificate Private Key as a base64 encoded PFX or PEM. Changing this forces a new resource to be created.
	// The Certificate Private Key as a base64 encoded PFX or PEM.
	// +kubebuilder:validation:Optional
	CertificateBlobBase64 *string `json:"certificateBlobBase64,omitempty" tf:"certificate_blob_base64,omitempty"`

	// The password for the Certificate. Changing this forces a new resource to be created.
	// The password for the Certificate.
	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef v1.SecretKeySelector `json:"certificatePasswordSecretRef" tf:"-"`

	// The Container App Managed Environment ID to configure this Certificate on. Changing this forces a new resource to be created.
	// The Container App Managed Environment ID to configure this Certificate on.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentID *string `json:"containerAppEnvironmentId,omitempty" tf:"container_app_environment_id,omitempty"`

	// Reference to a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDRef *v1.Reference `json:"containerAppEnvironmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment in containerapp to populate containerAppEnvironmentId.
	// +kubebuilder:validation:Optional
	ContainerAppEnvironmentIDSelector *v1.Selector `json:"containerAppEnvironmentIdSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// EnvironmentCertificateSpec defines the desired state of EnvironmentCertificate
type EnvironmentCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentCertificateInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentCertificateStatus defines the observed state of EnvironmentCertificate.
type EnvironmentCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentCertificate is the Schema for the EnvironmentCertificates API. Manages a Container App Environment Certificate.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EnvironmentCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateBlobBase64) || (has(self.initProvider) && has(self.initProvider.certificateBlobBase64))",message="spec.forProvider.certificateBlobBase64 is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificatePasswordSecretRef)",message="spec.forProvider.certificatePasswordSecretRef is a required parameter"
	Spec   EnvironmentCertificateSpec   `json:"spec"`
	Status EnvironmentCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentCertificateList contains a list of EnvironmentCertificates
type EnvironmentCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentCertificate `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentCertificate_Kind             = "EnvironmentCertificate"
	EnvironmentCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentCertificate_Kind}.String()
	EnvironmentCertificate_KindAPIVersion   = EnvironmentCertificate_Kind + "." + CRDGroupVersion.String()
	EnvironmentCertificate_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentCertificate{}, &EnvironmentCertificateList{})
}
