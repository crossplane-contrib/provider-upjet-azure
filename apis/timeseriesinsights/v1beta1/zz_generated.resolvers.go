/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta1 "github.com/upbound/provider-azure/apis/devices/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this EventSourceIOTHub.
func (mg *EventSourceIOTHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConsumerGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConsumerGroupNameRef,
		Selector:     mg.Spec.ForProvider.ConsumerGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.IOTHubConsumerGroupList{},
			Managed: &v1beta1.IOTHubConsumerGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConsumerGroupName")
	}
	mg.Spec.ForProvider.ConsumerGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConsumerGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EnvironmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.EnvironmentIDRef,
		Selector:     mg.Spec.ForProvider.EnvironmentIDSelector,
		To: reference.To{
			List:    &Gen2EnvironmentList{},
			Managed: &Gen2Environment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EnvironmentID")
	}
	mg.Spec.ForProvider.EnvironmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EnvironmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventSourceResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.EventSourceResourceIDRef,
		Selector:     mg.Spec.ForProvider.EventSourceResourceIDSelector,
		To: reference.To{
			List:    &v1beta1.IOTHubList{},
			Managed: &v1beta1.IOTHub{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventSourceResourceID")
	}
	mg.Spec.ForProvider.EventSourceResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventSourceResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IOTHubName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IOTHubNameRef,
		Selector:     mg.Spec.ForProvider.IOTHubNameSelector,
		To: reference.To{
			List:    &v1beta1.IOTHubList{},
			Managed: &v1beta1.IOTHub{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IOTHubName")
	}
	mg.Spec.ForProvider.IOTHubName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IOTHubNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Gen2Environment.
func (mg *Gen2Environment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Storage); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Storage[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Storage[i3].NameRef,
			Selector:     mg.Spec.ForProvider.Storage[i3].NameSelector,
			To: reference.To{
				List:    &v1beta12.AccountList{},
				Managed: &v1beta12.Account{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Storage[i3].Name")
		}
		mg.Spec.ForProvider.Storage[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Storage[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ReferenceDataSet.
func (mg *ReferenceDataSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentIDRef,
		Selector:     mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentIDSelector,
		To: reference.To{
			List:    &StandardEnvironmentList{},
			Managed: &StandardEnvironment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentID")
	}
	mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TimeSeriesInsightsEnvironmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StandardEnvironment.
func (mg *StandardEnvironment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
