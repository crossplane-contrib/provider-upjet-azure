// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *SentinelAlertRuleFusion) ResolveReferences( // ResolveReferences of this SentinelAlertRuleFusion.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("operationsmanagement.azure.upbound.io", "v1beta2", "LogAnalyticsSolution", "LogAnalyticsSolutionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_resource_id", false),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationsmanagement.azure.upbound.io", "v1beta2", "LogAnalyticsSolution", "LogAnalyticsSolutionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_resource_id", false),
			Reference:    mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.InitProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelAlertRuleMSSecurityIncident.
func (mg *SentinelAlertRuleMSSecurityIncident) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("securityinsights.azure.upbound.io", "v1beta1", "SentinelLogAnalyticsWorkspaceOnboarding", "SentinelLogAnalyticsWorkspaceOnboardingList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelAlertRuleMachineLearningBehaviorAnalytics.
func (mg *SentinelAlertRuleMachineLearningBehaviorAnalytics) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.InitProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelAutomationRule.
func (mg *SentinelAutomationRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("securityinsights.azure.upbound.io", "v1beta1", "SentinelLogAnalyticsWorkspaceOnboarding", "SentinelLogAnalyticsWorkspaceOnboardingList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("securityinsights.azure.upbound.io", "v1beta1", "SentinelLogAnalyticsWorkspaceOnboarding", "SentinelLogAnalyticsWorkspaceOnboardingList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Reference:    mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.InitProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelDataConnectorIOT.
func (mg *SentinelDataConnectorIOT) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("securityinsights.azure.upbound.io", "v1beta1", "SentinelLogAnalyticsWorkspaceOnboarding", "SentinelLogAnalyticsWorkspaceOnboardingList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelLogAnalyticsWorkspaceOnboarding.
func (mg *SentinelLogAnalyticsWorkspaceOnboarding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceID")
	}
	mg.Spec.ForProvider.WorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.WorkspaceName, ""),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.WorkspaceNameRef,
			Selector:     mg.Spec.ForProvider.WorkspaceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceName")
	}
	mg.Spec.ForProvider.WorkspaceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.WorkspaceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.WorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceID")
	}
	mg.Spec.InitProvider.WorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("operationalinsights.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.WorkspaceName, ""),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.InitProvider.WorkspaceNameRef,
			Selector:     mg.Spec.InitProvider.WorkspaceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceName")
	}
	mg.Spec.InitProvider.WorkspaceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkspaceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SentinelWatchlist.
func (mg *SentinelWatchlist) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("securityinsights.azure.upbound.io", "v1beta1", "SentinelLogAnalyticsWorkspaceOnboarding", "SentinelLogAnalyticsWorkspaceOnboardingList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LogAnalyticsWorkspaceID, ""),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Reference:    mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.LogAnalyticsWorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogAnalyticsWorkspaceID")
	}
	mg.Spec.ForProvider.LogAnalyticsWorkspaceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogAnalyticsWorkspaceIDRef = rsp.ResolvedReference

	return nil
}
