/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CorsObservation struct {
}

type CorsParameters struct {

	// A list of origins which should be able to make cross-origin calls. * can be used to allow all calls.
	// +kubebuilder:validation:Required
	AllowedOrigins []*string `json:"allowedOrigins" tf:"allowed_origins,omitempty"`
}

type LiveTraceObservation struct {
}

type LiveTraceParameters struct {

	// Whether the log category ConnectivityLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	ConnectivityLogsEnabled *bool `json:"connectivityLogsEnabled,omitempty" tf:"connectivity_logs_enabled,omitempty"`

	// Whether the live trace is enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether the log category HttpRequestLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	HTTPRequestLogsEnabled *bool `json:"httpRequestLogsEnabled,omitempty" tf:"http_request_logs_enabled,omitempty"`

	// Whether the log category MessagingLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	MessagingLogsEnabled *bool `json:"messagingLogsEnabled,omitempty" tf:"messaging_logs_enabled,omitempty"`
}

type ServiceObservation struct {

	// The FQDN of the SignalR service.
	HostName *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The ID of the SignalR service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The publicly accessible IP of the SignalR service.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The publicly accessible port of the SignalR service which is designed for browser/client use.
	PublicPort *float64 `json:"publicPort,omitempty" tf:"public_port,omitempty"`

	// The publicly accessible port of the SignalR service which is designed for customer server side use.
	ServerPort *float64 `json:"serverPort,omitempty" tf:"server_port,omitempty"`
}

type ServiceParameters struct {

	// Specifies if Connectivity Logs are enabled or not. Defaults to false.
	// +kubebuilder:validation:Optional
	ConnectivityLogsEnabled *bool `json:"connectivityLogsEnabled,omitempty" tf:"connectivity_logs_enabled,omitempty"`

	// A cors block as documented below.
	// +kubebuilder:validation:Optional
	Cors []CorsParameters `json:"cors,omitempty" tf:"cors,omitempty"`

	// A live_trace block as defined below.
	// +kubebuilder:validation:Optional
	LiveTrace []LiveTraceParameters `json:"liveTrace,omitempty" tf:"live_trace,omitempty"`

	// Specifies if Live Trace is enabled or not. Defaults to false.
	// +kubebuilder:validation:Optional
	LiveTraceEnabled *bool `json:"liveTraceEnabled,omitempty" tf:"live_trace_enabled,omitempty"`

	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies if Messaging Logs are enabled or not. Defaults to false.
	// +kubebuilder:validation:Optional
	MessagingLogsEnabled *bool `json:"messagingLogsEnabled,omitempty" tf:"messaging_logs_enabled,omitempty"`

	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// Specifies the service mode. Possible values are Classic, Default and Serverless. Defaults to Default.
	// +kubebuilder:validation:Optional
	ServiceMode *string `json:"serviceMode,omitempty" tf:"service_mode,omitempty"`

	// A sku block as documented below.
	// +kubebuilder:validation:Required
	Sku []SkuParameters `json:"sku" tf:"sku,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// An upstream_endpoint block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	// +kubebuilder:validation:Optional
	UpstreamEndpoint []UpstreamEndpointParameters `json:"upstreamEndpoint,omitempty" tf:"upstream_endpoint,omitempty"`
}

type SkuObservation struct {
}

type SkuParameters struct {

	// Specifies the number of units associated with this SignalR service. Valid values are 1, 2, 5, 10, 20, 50 and 100.
	// +kubebuilder:validation:Required
	Capacity *float64 `json:"capacity" tf:"capacity,omitempty"`

	// Specifies which tier to use. Valid values are Free_F1, Standard_S1 and Premium_P1.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type UpstreamEndpointObservation struct {
}

type UpstreamEndpointParameters struct {

	// The categories to match on, or * for all.
	// +kubebuilder:validation:Required
	CategoryPattern []*string `json:"categoryPattern" tf:"category_pattern,omitempty"`

	// The events to match on, or * for all.
	// +kubebuilder:validation:Required
	EventPattern []*string `json:"eventPattern" tf:"event_pattern,omitempty"`

	// The hubs to match on, or * for all.
	// +kubebuilder:validation:Required
	HubPattern []*string `json:"hubPattern" tf:"hub_pattern,omitempty"`

	// The upstream URL Template. This can be a url or a template such as http://host.com/{hub}/api/{category}/{event}.
	// +kubebuilder:validation:Required
	URLTemplate *string `json:"urlTemplate" tf:"url_template,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API. Manages an Azure SignalR service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
