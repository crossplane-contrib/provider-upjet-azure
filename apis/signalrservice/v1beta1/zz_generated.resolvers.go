//go:build (signalrservice || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *NetworkACL) ResolveReferences( // ResolveReferences of this NetworkACL.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PrivateEndpoint); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "PrivateEndpoint", "PrivateEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateEndpoint[i3].ID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PrivateEndpoint[i3].IDRef,
				Selector:     mg.Spec.ForProvider.PrivateEndpoint[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PrivateEndpoint[i3].ID")
		}
		mg.Spec.ForProvider.PrivateEndpoint[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PrivateEndpoint[i3].IDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SignalrServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SignalrServiceIDRef,
			Selector:     mg.Spec.ForProvider.SignalrServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SignalrServiceID")
	}
	mg.Spec.ForProvider.SignalrServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SignalrServiceIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PrivateEndpoint); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "PrivateEndpoint", "PrivateEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateEndpoint[i3].ID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PrivateEndpoint[i3].IDRef,
				Selector:     mg.Spec.InitProvider.PrivateEndpoint[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PrivateEndpoint[i3].ID")
		}
		mg.Spec.InitProvider.PrivateEndpoint[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PrivateEndpoint[i3].IDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SignalrServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SignalrServiceIDRef,
			Selector:     mg.Spec.InitProvider.SignalrServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SignalrServiceID")
	}
	mg.Spec.InitProvider.SignalrServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SignalrServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Service.
func (mg *Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SignalrSharedPrivateLinkResource.
func (mg *SignalrSharedPrivateLinkResource) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SignalrServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SignalrServiceIDRef,
			Selector:     mg.Spec.ForProvider.SignalrServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SignalrServiceID")
	}
	mg.Spec.ForProvider.SignalrServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SignalrServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Vault", "VaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SignalrServiceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SignalrServiceIDRef,
			Selector:     mg.Spec.InitProvider.SignalrServiceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SignalrServiceID")
	}
	mg.Spec.InitProvider.SignalrServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SignalrServiceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Vault", "VaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WebPubsub.
func (mg *WebPubsub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WebPubsubHub.
func (mg *WebPubsubHub) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventHandler); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.EventHandler[i3].Auth); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDRef,
					Selector:     mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityID")
			}
			mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventListener); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "EventHub", "EventHubList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventListener[i3].EventHubName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EventListener[i3].EventHubNameRef,
				Selector:     mg.Spec.ForProvider.EventListener[i3].EventHubNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EventListener[i3].EventHubName")
		}
		mg.Spec.ForProvider.EventListener[i3].EventHubName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EventListener[i3].EventHubNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.EventListener); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "EventHubNamespace", "EventHubNamespaceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceNameRef,
				Selector:     mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceName")
		}
		mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EventListener[i3].EventHubNamespaceNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "WebPubsub", "WebPubsubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WebPubsubID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WebPubsubIDRef,
			Selector:     mg.Spec.ForProvider.WebPubsubIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WebPubsubID")
	}
	mg.Spec.ForProvider.WebPubsubID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WebPubsubIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.EventHandler); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.EventHandler[i3].Auth); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDRef,
					Selector:     mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityID")
			}
			mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.EventHandler[i3].Auth[i4].ManagedIdentityIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.EventListener); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "EventHub", "EventHubList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EventListener[i3].EventHubName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EventListener[i3].EventHubNameRef,
				Selector:     mg.Spec.InitProvider.EventListener[i3].EventHubNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EventListener[i3].EventHubName")
		}
		mg.Spec.InitProvider.EventListener[i3].EventHubName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EventListener[i3].EventHubNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.EventListener); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("eventhub.azure.upbound.io", "v1beta1", "EventHubNamespace", "EventHubNamespaceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceNameRef,
				Selector:     mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceName")
		}
		mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EventListener[i3].EventHubNamespaceNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "WebPubsub", "WebPubsubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WebPubsubID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.WebPubsubIDRef,
			Selector:     mg.Spec.InitProvider.WebPubsubIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WebPubsubID")
	}
	mg.Spec.InitProvider.WebPubsubID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WebPubsubIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WebPubsubNetworkACL.
func (mg *WebPubsubNetworkACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PrivateEndpoint); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "PrivateEndpoint", "PrivateEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateEndpoint[i3].ID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PrivateEndpoint[i3].IDRef,
				Selector:     mg.Spec.ForProvider.PrivateEndpoint[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PrivateEndpoint[i3].ID")
		}
		mg.Spec.ForProvider.PrivateEndpoint[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PrivateEndpoint[i3].IDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "WebPubsub", "WebPubsubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WebPubsubID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.WebPubsubIDRef,
			Selector:     mg.Spec.ForProvider.WebPubsubIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WebPubsubID")
	}
	mg.Spec.ForProvider.WebPubsubID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WebPubsubIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PrivateEndpoint); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "PrivateEndpoint", "PrivateEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrivateEndpoint[i3].ID),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PrivateEndpoint[i3].IDRef,
				Selector:     mg.Spec.InitProvider.PrivateEndpoint[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PrivateEndpoint[i3].ID")
		}
		mg.Spec.InitProvider.PrivateEndpoint[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PrivateEndpoint[i3].IDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("signalrservice.azure.upbound.io", "v1beta1", "WebPubsub", "WebPubsubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WebPubsubID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.WebPubsubIDRef,
			Selector:     mg.Spec.InitProvider.WebPubsubIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WebPubsubID")
	}
	mg.Spec.InitProvider.WebPubsubID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WebPubsubIDRef = rsp.ResolvedReference

	return nil
}
