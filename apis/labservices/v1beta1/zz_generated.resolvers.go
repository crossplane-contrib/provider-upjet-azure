// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	helper "github.com/crossplane/crossplane-tools/pkg/helpers"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *LabServiceLab) ResolveReferences( // ResolveReferences of this LabServiceLab.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Network[i3].SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network[i3].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.Network[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].SubnetID")
		}
		mg.Spec.ForProvider.Network[i3].SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].SubnetIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Network[i3].SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network[i3].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.Network[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].SubnetID")
		}
		mg.Spec.InitProvider.Network[i3].SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].SubnetIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LabServicePlan.
func (mg *LabServicePlan) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.AllowedRegions),
			Extract:       resource.ExtractParamPath("location", false),
			References:    mg.Spec.ForProvider.AllowedRegionsRefs,
			Selector:      mg.Spec.ForProvider.AllowedRegionsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AllowedRegions")
	}
	mg.Spec.ForProvider.AllowedRegions = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AllowedRegionsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DefaultNetworkSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DefaultNetworkSubnetIDRef,
			Selector:     mg.Spec.ForProvider.DefaultNetworkSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultNetworkSubnetID")
	}
	mg.Spec.ForProvider.DefaultNetworkSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultNetworkSubnetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.AllowedRegions),
			Extract:       resource.ExtractParamPath("location", false),
			References:    mg.Spec.InitProvider.AllowedRegionsRefs,
			Selector:      mg.Spec.InitProvider.AllowedRegionsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AllowedRegions")
	}
	mg.Spec.InitProvider.AllowedRegions = helper.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.AllowedRegionsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.DefaultNetworkSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DefaultNetworkSubnetIDRef,
			Selector:     mg.Spec.InitProvider.DefaultNetworkSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultNetworkSubnetID")
	}
	mg.Spec.InitProvider.DefaultNetworkSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultNetworkSubnetIDRef = rsp.ResolvedReference

	return nil
}
