/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HashObservation struct {
}

type HashParameters struct {

	// Specifies the algorithm used for the hash content.
	// +kubebuilder:validation:Required
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// The hash value of the content.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type ModuleLinkObservation struct {
}

type ModuleLinkParameters struct {

	// A hash block as defined below.
	// +kubebuilder:validation:Optional
	Hash []HashParameters `json:"hash,omitempty" tf:"hash,omitempty"`

	// The URI of the module content (zip or nupkg).
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

type ModuleObservation struct {

	// The Automation Module ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ModuleParameters struct {

	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/automation/v1beta1.Account
	// +kubebuilder:validation:Optional
	AutomationAccountName *string `json:"automationAccountName,omitempty" tf:"automation_account_name,omitempty"`

	// Reference to a Account in automation to populate automationAccountName.
	// +kubebuilder:validation:Optional
	AutomationAccountNameRef *v1.Reference `json:"automationAccountNameRef,omitempty" tf:"-"`

	// Selector for a Account in automation to populate automationAccountName.
	// +kubebuilder:validation:Optional
	AutomationAccountNameSelector *v1.Selector `json:"automationAccountNameSelector,omitempty" tf:"-"`

	// A module_link block as defined below.
	// +kubebuilder:validation:Required
	ModuleLink []ModuleLinkParameters `json:"moduleLink" tf:"module_link,omitempty"`

	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// ModuleSpec defines the desired state of Module
type ModuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ModuleParameters `json:"forProvider"`
}

// ModuleStatus defines the observed state of Module.
type ModuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Module is the Schema for the Modules API. Manages a Automation Module.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Module struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ModuleSpec   `json:"spec"`
	Status            ModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ModuleList contains a list of Modules
type ModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Module `json:"items"`
}

// Repository type metadata.
var (
	Module_Kind             = "Module"
	Module_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Module_Kind}.String()
	Module_KindAPIVersion   = Module_Kind + "." + CRDGroupVersion.String()
	Module_GroupVersionKind = CRDGroupVersion.WithKind(Module_Kind)
)

func init() {
	SchemeBuilder.Register(&Module{}, &ModuleList{})
}
