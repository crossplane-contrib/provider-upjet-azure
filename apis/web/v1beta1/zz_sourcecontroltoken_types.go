/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceControlTokenObservation struct {

	// The ID of the App Service Source GitHub Token.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SourceControlTokenParameters struct {

	// The Access Token.
	// +kubebuilder:validation:Required
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	TokenSecretSecretRef *v1.SecretKeySelector `json:"tokenSecretSecretRef,omitempty" tf:"-"`

	// The Token type. Possible values include Bitbucket, Dropbox, Github, and OneDrive.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// SourceControlTokenSpec defines the desired state of SourceControlToken
type SourceControlTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceControlTokenParameters `json:"forProvider"`
}

// SourceControlTokenStatus defines the observed state of SourceControlToken.
type SourceControlTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceControlTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SourceControlToken is the Schema for the SourceControlTokens API. Manages an App Service GitHub Token.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SourceControlToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SourceControlTokenSpec   `json:"spec"`
	Status            SourceControlTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceControlTokenList contains a list of SourceControlTokens
type SourceControlTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SourceControlToken `json:"items"`
}

// Repository type metadata.
var (
	SourceControlToken_Kind             = "SourceControlToken"
	SourceControlToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SourceControlToken_Kind}.String()
	SourceControlToken_KindAPIVersion   = SourceControlToken_Kind + "." + CRDGroupVersion.String()
	SourceControlToken_GroupVersionKind = CRDGroupVersion.WithKind(SourceControlToken_Kind)
)

func init() {
	SchemeBuilder.Register(&SourceControlToken{}, &SourceControlTokenList{})
}
