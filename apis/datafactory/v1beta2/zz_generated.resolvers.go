// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *CustomDataSet) ResolveReferences( // ResolveReferences of this CustomDataSet.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.LinkedService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedCustomService", "LinkedCustomServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.LinkedService.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.LinkedService.NameRef,
				Selector:     mg.Spec.ForProvider.LinkedService.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedService.Name")
		}
		mg.Spec.ForProvider.LinkedService.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedService.NameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.LinkedService != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedCustomService", "LinkedCustomServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.LinkedService.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.LinkedService.NameRef,
				Selector:     mg.Spec.InitProvider.LinkedService.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedService.Name")
		}
		mg.Spec.InitProvider.LinkedService.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedService.NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DataFlow.
func (mg *DataFlow) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sink); i3++ {
		if mg.Spec.ForProvider.Sink[i3].DataSet != nil {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Sink[i3].DataSet.Name, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Sink[i3].DataSet.NameRef,
					Selector:     mg.Spec.ForProvider.Sink[i3].DataSet.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Sink[i3].DataSet.Name")
			}
			mg.Spec.ForProvider.Sink[i3].DataSet.Name = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Sink[i3].DataSet.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		if mg.Spec.ForProvider.Source[i3].DataSet != nil {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Source[i3].DataSet.Name, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Source[i3].DataSet.NameRef,
					Selector:     mg.Spec.ForProvider.Source[i3].DataSet.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].DataSet.Name")
			}
			mg.Spec.ForProvider.Source[i3].DataSet.Name = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Source[i3].DataSet.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Sink); i3++ {
		if mg.Spec.InitProvider.Sink[i3].DataSet != nil {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Sink[i3].DataSet.Name, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Sink[i3].DataSet.NameRef,
					Selector:     mg.Spec.InitProvider.Sink[i3].DataSet.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Sink[i3].DataSet.Name")
			}
			mg.Spec.InitProvider.Sink[i3].DataSet.Name = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Sink[i3].DataSet.NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		if mg.Spec.InitProvider.Source[i3].DataSet != nil {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Source[i3].DataSet.Name, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Source[i3].DataSet.NameRef,
					Selector:     mg.Spec.InitProvider.Source[i3].DataSet.NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].DataSet.Name")
			}
			mg.Spec.InitProvider.Source[i3].DataSet.Name = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Source[i3].DataSet.NameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this DataSetBinary.
func (mg *DataSetBinary) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceSFTP", "LinkedServiceSFTPList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceSFTP", "LinkedServiceSFTPList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetDelimitedText.
func (mg *DataSetDelimitedText) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetJSON.
func (mg *DataSetJSON) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetParquet.
func (mg *DataSetParquet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.LinkedServiceName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Factory.
func (mg *Factory) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzureSSIS.
func (mg *IntegrationRuntimeAzureSSIS) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.ExpressVnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.ExpressVnetIntegration.SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.ExpressVnetIntegration.SubnetIDRef,
				Selector:     mg.Spec.ForProvider.ExpressVnetIntegration.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExpressVnetIntegration.SubnetID")
		}
		mg.Spec.ForProvider.ExpressVnetIntegration.SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExpressVnetIntegration.SubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.VnetIntegration.SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.VnetIntegration.SubnetIDRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration.SubnetID")
		}
		mg.Spec.ForProvider.VnetIntegration.SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration.SubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.VnetIntegration.SubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.VnetIntegration.SubnetNameRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration.SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration.SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration.SubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration.SubnetNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ExpressVnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.ExpressVnetIntegration.SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.ExpressVnetIntegration.SubnetIDRef,
				Selector:     mg.Spec.InitProvider.ExpressVnetIntegration.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExpressVnetIntegration.SubnetID")
		}
		mg.Spec.InitProvider.ExpressVnetIntegration.SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExpressVnetIntegration.SubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.VnetIntegration.SubnetID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.VnetIntegration.SubnetIDRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration.SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration.SubnetID")
		}
		mg.Spec.InitProvider.VnetIntegration.SubnetID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration.SubnetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.VnetIntegration.SubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.VnetIntegration.SubnetNameRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration.SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration.SubnetName")
		}
		mg.Spec.InitProvider.VnetIntegration.SubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration.SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IntegrationRuntimeManaged.
func (mg *IntegrationRuntimeManaged) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.VnetIntegration.SubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.VnetIntegration.SubnetNameRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration.SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration.SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration.SubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration.SubnetNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.VnetIntegration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.VnetIntegration.SubnetName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.VnetIntegration.SubnetNameRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration.SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration.SubnetName")
		}
		mg.Spec.InitProvider.VnetIntegration.SubnetName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration.SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedCustomService.
func (mg *LinkedCustomService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureBlobStorage.
func (mg *LinkedServiceAzureBlobStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.KeyVaultSASToken != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultSASToken.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName")
		}
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KeyVaultSASToken != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultSASToken.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName")
		}
		mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey.LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceAzureDatabricks.
func (mg *LinkedServiceAzureDatabricks) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MsiWorkSpaceResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef,
			Selector:     mg.Spec.ForProvider.MsiWorkSpaceResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MsiWorkSpaceResourceID")
	}
	mg.Spec.ForProvider.MsiWorkSpaceResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta2", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.MsiWorkSpaceResourceID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.MsiWorkSpaceResourceIDRef,
			Selector:     mg.Spec.InitProvider.MsiWorkSpaceResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MsiWorkSpaceResourceID")
	}
	mg.Spec.InitProvider.MsiWorkSpaceResourceID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.MsiWorkSpaceResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFileStorage.
func (mg *LinkedServiceAzureFileStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFunction.
func (mg *LinkedServiceAzureFunction) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureSQLDatabase.
func (mg *LinkedServiceAzureSQLDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOData.
func (mg *LinkedServiceOData) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOdbc.
func (mg *LinkedServiceOdbc) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceSQLServer.
func (mg *LinkedServiceSQLServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSnowflake.
func (mg *LinkedServiceSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSynapse.
func (mg *LinkedServiceSynapse) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.KeyVaultPassword != nil {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword.LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this TriggerSchedule.
func (mg *TriggerSchedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.DataFactoryID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.PipelineName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PipelineNameRef,
			Selector:     mg.Spec.ForProvider.PipelineNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineName")
	}
	mg.Spec.ForProvider.PipelineName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.PipelineName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.PipelineNameRef,
			Selector:     mg.Spec.InitProvider.PipelineNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineName")
	}
	mg.Spec.InitProvider.PipelineName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineNameRef = rsp.ResolvedReference

	return nil
}
