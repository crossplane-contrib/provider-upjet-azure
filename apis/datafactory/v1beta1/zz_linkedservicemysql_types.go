/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinkedServiceMySQLObservation struct {

	// The ID of the Data Factory MySQL Linked Service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LinkedServiceMySQLParameters struct {

	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The connection string in which to authenticate with MySQL.
	// +kubebuilder:validation:Required
	ConnectionString *string `json:"connectionString" tf:"connection_string,omitempty"`

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DataFactoryID *string `json:"dataFactoryId,omitempty" tf:"data_factory_id,omitempty"`

	// Reference to a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDRef *v1.Reference `json:"dataFactoryIdRef,omitempty" tf:"-"`

	// Selector for a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDSelector *v1.Selector `json:"dataFactoryIdSelector,omitempty" tf:"-"`

	// The description for the Data Factory Linked Service MySQL.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name,omitempty"`

	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

// LinkedServiceMySQLSpec defines the desired state of LinkedServiceMySQL
type LinkedServiceMySQLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LinkedServiceMySQLParameters `json:"forProvider"`
}

// LinkedServiceMySQLStatus defines the observed state of LinkedServiceMySQL.
type LinkedServiceMySQLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LinkedServiceMySQLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LinkedServiceMySQL is the Schema for the LinkedServiceMySQLs API. Manages a Linked Service (connection) between MySQL and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LinkedServiceMySQL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LinkedServiceMySQLSpec   `json:"spec"`
	Status            LinkedServiceMySQLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LinkedServiceMySQLList contains a list of LinkedServiceMySQLs
type LinkedServiceMySQLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LinkedServiceMySQL `json:"items"`
}

// Repository type metadata.
var (
	LinkedServiceMySQL_Kind             = "LinkedServiceMySQL"
	LinkedServiceMySQL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LinkedServiceMySQL_Kind}.String()
	LinkedServiceMySQL_KindAPIVersion   = LinkedServiceMySQL_Kind + "." + CRDGroupVersion.String()
	LinkedServiceMySQL_GroupVersionKind = CRDGroupVersion.WithKind(LinkedServiceMySQL_Kind)
)

func init() {
	SchemeBuilder.Register(&LinkedServiceMySQL{}, &LinkedServiceMySQLList{})
}
