/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Factory
func (mg *Factory) GetTerraformResourceType() string {
	return "azurerm_data_factory"
}

// GetConnectionDetailsMapping for this Factory
func (tr *Factory) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Factory
func (tr *Factory) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Factory
func (tr *Factory) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Factory
func (tr *Factory) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Factory
func (tr *Factory) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Factory
func (tr *Factory) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Factory using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Factory) LateInitialize(attrs []byte) (bool, error) {
	params := &FactoryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Factory) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this CustomDataSet
func (mg *CustomDataSet) GetTerraformResourceType() string {
	return "azurerm_data_factory_custom_dataset"
}

// GetConnectionDetailsMapping for this CustomDataSet
func (tr *CustomDataSet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this CustomDataSet
func (tr *CustomDataSet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CustomDataSet
func (tr *CustomDataSet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CustomDataSet
func (tr *CustomDataSet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CustomDataSet
func (tr *CustomDataSet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CustomDataSet
func (tr *CustomDataSet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CustomDataSet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CustomDataSet) LateInitialize(attrs []byte) (bool, error) {
	params := &CustomDataSetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CustomDataSet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataFlow
func (mg *DataFlow) GetTerraformResourceType() string {
	return "azurerm_data_factory_data_flow"
}

// GetConnectionDetailsMapping for this DataFlow
func (tr *DataFlow) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataFlow
func (tr *DataFlow) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataFlow
func (tr *DataFlow) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataFlow
func (tr *DataFlow) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataFlow
func (tr *DataFlow) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataFlow
func (tr *DataFlow) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataFlow using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataFlow) LateInitialize(attrs []byte) (bool, error) {
	params := &DataFlowParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataFlow) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetAzureBlob
func (mg *DataSetAzureBlob) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_azure_blob"
}

// GetConnectionDetailsMapping for this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetAzureBlob
func (tr *DataSetAzureBlob) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetAzureBlob
func (tr *DataSetAzureBlob) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetAzureBlob using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetAzureBlob) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetAzureBlobParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetAzureBlob) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetBinary
func (mg *DataSetBinary) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_binary"
}

// GetConnectionDetailsMapping for this DataSetBinary
func (tr *DataSetBinary) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetBinary
func (tr *DataSetBinary) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetBinary
func (tr *DataSetBinary) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetBinary
func (tr *DataSetBinary) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetBinary
func (tr *DataSetBinary) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetBinary
func (tr *DataSetBinary) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetBinary using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetBinary) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetBinaryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetBinary) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetCosmosDBSQLAPI
func (mg *DataSetCosmosDBSQLAPI) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_cosmosdb_sqlapi"
}

// GetConnectionDetailsMapping for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetCosmosDBSQLAPI using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetCosmosDBSQLAPI) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetCosmosDBSQLAPIParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetCosmosDBSQLAPI) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetDelimitedText
func (mg *DataSetDelimitedText) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_delimited_text"
}

// GetConnectionDetailsMapping for this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetDelimitedText
func (tr *DataSetDelimitedText) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetDelimitedText
func (tr *DataSetDelimitedText) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetDelimitedText using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetDelimitedText) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetDelimitedTextParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetDelimitedText) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetHTTP
func (mg *DataSetHTTP) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_http"
}

// GetConnectionDetailsMapping for this DataSetHTTP
func (tr *DataSetHTTP) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetHTTP
func (tr *DataSetHTTP) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetHTTP
func (tr *DataSetHTTP) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetHTTP
func (tr *DataSetHTTP) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetHTTP
func (tr *DataSetHTTP) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetHTTP
func (tr *DataSetHTTP) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetHTTP using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetHTTP) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetHTTPParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetHTTP) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetJSON
func (mg *DataSetJSON) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_json"
}

// GetConnectionDetailsMapping for this DataSetJSON
func (tr *DataSetJSON) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetJSON
func (tr *DataSetJSON) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetJSON
func (tr *DataSetJSON) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetJSON
func (tr *DataSetJSON) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetJSON
func (tr *DataSetJSON) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetJSON
func (tr *DataSetJSON) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetJSON using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetJSON) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetJSONParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetJSON) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetMySQL
func (mg *DataSetMySQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_mysql"
}

// GetConnectionDetailsMapping for this DataSetMySQL
func (tr *DataSetMySQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetMySQL
func (tr *DataSetMySQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetMySQL
func (tr *DataSetMySQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetMySQL
func (tr *DataSetMySQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetMySQL
func (tr *DataSetMySQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetMySQL
func (tr *DataSetMySQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetMySQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetMySQL) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetMySQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetMySQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetParquet
func (mg *DataSetParquet) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_parquet"
}

// GetConnectionDetailsMapping for this DataSetParquet
func (tr *DataSetParquet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetParquet
func (tr *DataSetParquet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetParquet
func (tr *DataSetParquet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetParquet
func (tr *DataSetParquet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetParquet
func (tr *DataSetParquet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetParquet
func (tr *DataSetParquet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetParquet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetParquet) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetParquetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetParquet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetPostgreSQL
func (mg *DataSetPostgreSQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_postgresql"
}

// GetConnectionDetailsMapping for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetPostgreSQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetPostgreSQL) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetPostgreSQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetPostgreSQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetSnowflake
func (mg *DataSetSnowflake) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_snowflake"
}

// GetConnectionDetailsMapping for this DataSetSnowflake
func (tr *DataSetSnowflake) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetSnowflake
func (tr *DataSetSnowflake) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetSnowflake
func (tr *DataSetSnowflake) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetSnowflake
func (tr *DataSetSnowflake) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetSnowflake
func (tr *DataSetSnowflake) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetSnowflake
func (tr *DataSetSnowflake) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetSnowflake using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetSnowflake) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetSnowflakeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetSnowflake) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeAzure
func (mg *IntegrationRuntimeAzure) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_azure"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeAzure using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeAzure) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeAzureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeAzure) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeAzureSSIS
func (mg *IntegrationRuntimeAzureSSIS) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_azure_ssis"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"catalog_info[*].administrator_password": "spec.forProvider.catalogInfo[*].administratorPasswordSecretRef", "custom_setup_script[*].sas_token": "spec.forProvider.customSetupScript[*].sasTokenSecretRef", "express_custom_setup[*].command_key[*].password": "spec.forProvider.expressCustomSetup[*].commandKey[*].passwordSecretRef", "express_custom_setup[*].component[*].license": "spec.forProvider.expressCustomSetup[*].component[*].licenseSecretRef"}
}

// GetObservation of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeAzureSSIS using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeAzureSSIS) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeAzureSSISParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeAzureSSIS) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeSelfHosted
func (mg *IntegrationRuntimeSelfHosted) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_self_hosted"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeSelfHosted using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeSelfHosted) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeSelfHostedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeSelfHosted) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedCustomService
func (mg *LinkedCustomService) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_custom_service"
}

// GetConnectionDetailsMapping for this LinkedCustomService
func (tr *LinkedCustomService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedCustomService
func (tr *LinkedCustomService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedCustomService
func (tr *LinkedCustomService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedCustomService
func (tr *LinkedCustomService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedCustomService
func (tr *LinkedCustomService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedCustomService
func (tr *LinkedCustomService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedCustomService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedCustomService) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedCustomServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedCustomService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureBlobStorage
func (mg *LinkedServiceAzureBlobStorage) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_blob_storage"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef", "sas_uri": "spec.forProvider.sasUriSecretRef", "service_endpoint": "spec.forProvider.serviceEndpointSecretRef"}
}

// GetObservation of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureBlobStorage using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureBlobStorage) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureBlobStorageParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureBlobStorage) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceOdbc
func (mg *LinkedServiceOdbc) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_odbc"
}

// GetConnectionDetailsMapping for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"basic_authentication[*].password": "spec.forProvider.basicAuthentication[*].passwordSecretRef"}
}

// GetObservation of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceOdbc using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceOdbc) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceOdbcParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceOdbc) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Pipeline
func (mg *Pipeline) GetTerraformResourceType() string {
	return "azurerm_data_factory_pipeline"
}

// GetConnectionDetailsMapping for this Pipeline
func (tr *Pipeline) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Pipeline
func (tr *Pipeline) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Pipeline
func (tr *Pipeline) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Pipeline
func (tr *Pipeline) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Pipeline
func (tr *Pipeline) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Pipeline
func (tr *Pipeline) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Pipeline using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Pipeline) LateInitialize(attrs []byte) (bool, error) {
	params := &PipelineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Pipeline) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TriggerBlobEvent
func (mg *TriggerBlobEvent) GetTerraformResourceType() string {
	return "azurerm_data_factory_trigger_blob_event"
}

// GetConnectionDetailsMapping for this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TriggerBlobEvent
func (tr *TriggerBlobEvent) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TriggerBlobEvent
func (tr *TriggerBlobEvent) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TriggerBlobEvent using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TriggerBlobEvent) LateInitialize(attrs []byte) (bool, error) {
	params := &TriggerBlobEventParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TriggerBlobEvent) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TriggerSchedule
func (mg *TriggerSchedule) GetTerraformResourceType() string {
	return "azurerm_data_factory_trigger_schedule"
}

// GetConnectionDetailsMapping for this TriggerSchedule
func (tr *TriggerSchedule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TriggerSchedule
func (tr *TriggerSchedule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TriggerSchedule
func (tr *TriggerSchedule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TriggerSchedule
func (tr *TriggerSchedule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TriggerSchedule
func (tr *TriggerSchedule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TriggerSchedule
func (tr *TriggerSchedule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TriggerSchedule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TriggerSchedule) LateInitialize(attrs []byte) (bool, error) {
	params := &TriggerScheduleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	opts = append(opts, resource.WithNameFilter("Pipeline"))
	opts = append(opts, resource.WithNameFilter("PipelineName"))

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TriggerSchedule) GetTerraformSchemaVersion() int {
	return 0
}
