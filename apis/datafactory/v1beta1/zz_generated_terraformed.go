/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Factory
func (mg *Factory) GetTerraformResourceType() string {
	return "azurerm_data_factory"
}

// GetConnectionDetailsMapping for this Factory
func (tr *Factory) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Factory
func (tr *Factory) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Factory
func (tr *Factory) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Factory
func (tr *Factory) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Factory
func (tr *Factory) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Factory
func (tr *Factory) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Factory using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Factory) LateInitialize(attrs []byte) (bool, error) {
	params := &FactoryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Factory) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this CustomDataSet
func (mg *CustomDataSet) GetTerraformResourceType() string {
	return "azurerm_data_factory_custom_dataset"
}

// GetConnectionDetailsMapping for this CustomDataSet
func (tr *CustomDataSet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this CustomDataSet
func (tr *CustomDataSet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CustomDataSet
func (tr *CustomDataSet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CustomDataSet
func (tr *CustomDataSet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CustomDataSet
func (tr *CustomDataSet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CustomDataSet
func (tr *CustomDataSet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CustomDataSet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CustomDataSet) LateInitialize(attrs []byte) (bool, error) {
	params := &CustomDataSetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CustomDataSet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataFlow
func (mg *DataFlow) GetTerraformResourceType() string {
	return "azurerm_data_factory_data_flow"
}

// GetConnectionDetailsMapping for this DataFlow
func (tr *DataFlow) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataFlow
func (tr *DataFlow) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataFlow
func (tr *DataFlow) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataFlow
func (tr *DataFlow) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataFlow
func (tr *DataFlow) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataFlow
func (tr *DataFlow) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataFlow using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataFlow) LateInitialize(attrs []byte) (bool, error) {
	params := &DataFlowParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataFlow) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetAzureBlob
func (mg *DataSetAzureBlob) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_azure_blob"
}

// GetConnectionDetailsMapping for this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetAzureBlob
func (tr *DataSetAzureBlob) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetAzureBlob
func (tr *DataSetAzureBlob) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetAzureBlob
func (tr *DataSetAzureBlob) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetAzureBlob using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetAzureBlob) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetAzureBlobParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetAzureBlob) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetBinary
func (mg *DataSetBinary) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_binary"
}

// GetConnectionDetailsMapping for this DataSetBinary
func (tr *DataSetBinary) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetBinary
func (tr *DataSetBinary) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetBinary
func (tr *DataSetBinary) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetBinary
func (tr *DataSetBinary) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetBinary
func (tr *DataSetBinary) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetBinary
func (tr *DataSetBinary) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetBinary using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetBinary) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetBinaryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetBinary) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetCosmosDBSQLAPI
func (mg *DataSetCosmosDBSQLAPI) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_cosmosdb_sqlapi"
}

// GetConnectionDetailsMapping for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetCosmosDBSQLAPI
func (tr *DataSetCosmosDBSQLAPI) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetCosmosDBSQLAPI using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetCosmosDBSQLAPI) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetCosmosDBSQLAPIParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetCosmosDBSQLAPI) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetDelimitedText
func (mg *DataSetDelimitedText) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_delimited_text"
}

// GetConnectionDetailsMapping for this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetDelimitedText
func (tr *DataSetDelimitedText) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetDelimitedText
func (tr *DataSetDelimitedText) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetDelimitedText
func (tr *DataSetDelimitedText) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetDelimitedText using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetDelimitedText) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetDelimitedTextParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetDelimitedText) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetHTTP
func (mg *DataSetHTTP) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_http"
}

// GetConnectionDetailsMapping for this DataSetHTTP
func (tr *DataSetHTTP) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetHTTP
func (tr *DataSetHTTP) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetHTTP
func (tr *DataSetHTTP) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetHTTP
func (tr *DataSetHTTP) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetHTTP
func (tr *DataSetHTTP) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetHTTP
func (tr *DataSetHTTP) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetHTTP using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetHTTP) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetHTTPParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetHTTP) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetJSON
func (mg *DataSetJSON) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_json"
}

// GetConnectionDetailsMapping for this DataSetJSON
func (tr *DataSetJSON) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetJSON
func (tr *DataSetJSON) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetJSON
func (tr *DataSetJSON) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetJSON
func (tr *DataSetJSON) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetJSON
func (tr *DataSetJSON) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetJSON
func (tr *DataSetJSON) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetJSON using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetJSON) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetJSONParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetJSON) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetMySQL
func (mg *DataSetMySQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_mysql"
}

// GetConnectionDetailsMapping for this DataSetMySQL
func (tr *DataSetMySQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetMySQL
func (tr *DataSetMySQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetMySQL
func (tr *DataSetMySQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetMySQL
func (tr *DataSetMySQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetMySQL
func (tr *DataSetMySQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetMySQL
func (tr *DataSetMySQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetMySQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetMySQL) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetMySQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetMySQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetParquet
func (mg *DataSetParquet) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_parquet"
}

// GetConnectionDetailsMapping for this DataSetParquet
func (tr *DataSetParquet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetParquet
func (tr *DataSetParquet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetParquet
func (tr *DataSetParquet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetParquet
func (tr *DataSetParquet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetParquet
func (tr *DataSetParquet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetParquet
func (tr *DataSetParquet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetParquet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetParquet) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetParquetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetParquet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetPostgreSQL
func (mg *DataSetPostgreSQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_postgresql"
}

// GetConnectionDetailsMapping for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetPostgreSQL
func (tr *DataSetPostgreSQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetPostgreSQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetPostgreSQL) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetPostgreSQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetPostgreSQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetSnowflake
func (mg *DataSetSnowflake) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_snowflake"
}

// GetConnectionDetailsMapping for this DataSetSnowflake
func (tr *DataSetSnowflake) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetSnowflake
func (tr *DataSetSnowflake) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetSnowflake
func (tr *DataSetSnowflake) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetSnowflake
func (tr *DataSetSnowflake) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetSnowflake
func (tr *DataSetSnowflake) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetSnowflake
func (tr *DataSetSnowflake) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetSnowflake using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetSnowflake) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetSnowflakeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetSnowflake) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DataSetSQLServerTable
func (mg *DataSetSQLServerTable) GetTerraformResourceType() string {
	return "azurerm_data_factory_dataset_sql_server_table"
}

// GetConnectionDetailsMapping for this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DataSetSQLServerTable
func (tr *DataSetSQLServerTable) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DataSetSQLServerTable using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DataSetSQLServerTable) LateInitialize(attrs []byte) (bool, error) {
	params := &DataSetSQLServerTableParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DataSetSQLServerTable) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeAzure
func (mg *IntegrationRuntimeAzure) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_azure"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeAzure
func (tr *IntegrationRuntimeAzure) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeAzure using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeAzure) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeAzureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeAzure) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeAzureSSIS
func (mg *IntegrationRuntimeAzureSSIS) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_azure_ssis"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"catalog_info[*].administrator_password": "spec.forProvider.catalogInfo[*].administratorPasswordSecretRef", "custom_setup_script[*].sas_token": "spec.forProvider.customSetupScript[*].sasTokenSecretRef", "express_custom_setup[*].command_key[*].password": "spec.forProvider.expressCustomSetup[*].commandKey[*].passwordSecretRef", "express_custom_setup[*].component[*].license": "spec.forProvider.expressCustomSetup[*].component[*].licenseSecretRef"}
}

// GetObservation of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeAzureSSIS
func (tr *IntegrationRuntimeAzureSSIS) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeAzureSSIS using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeAzureSSIS) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeAzureSSISParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeAzureSSIS) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeManaged
func (mg *IntegrationRuntimeManaged) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_managed"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"catalog_info[*].administrator_password": "spec.forProvider.catalogInfo[*].administratorPasswordSecretRef", "custom_setup_script[*].sas_token": "spec.forProvider.customSetupScript[*].sasTokenSecretRef"}
}

// GetObservation of this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeManaged
func (tr *IntegrationRuntimeManaged) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeManaged using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeManaged) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeManagedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeManaged) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IntegrationRuntimeSelfHosted
func (mg *IntegrationRuntimeSelfHosted) GetTerraformResourceType() string {
	return "azurerm_data_factory_integration_runtime_self_hosted"
}

// GetConnectionDetailsMapping for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IntegrationRuntimeSelfHosted
func (tr *IntegrationRuntimeSelfHosted) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IntegrationRuntimeSelfHosted using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IntegrationRuntimeSelfHosted) LateInitialize(attrs []byte) (bool, error) {
	params := &IntegrationRuntimeSelfHostedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IntegrationRuntimeSelfHosted) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedCustomService
func (mg *LinkedCustomService) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_custom_service"
}

// GetConnectionDetailsMapping for this LinkedCustomService
func (tr *LinkedCustomService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedCustomService
func (tr *LinkedCustomService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedCustomService
func (tr *LinkedCustomService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedCustomService
func (tr *LinkedCustomService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedCustomService
func (tr *LinkedCustomService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedCustomService
func (tr *LinkedCustomService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedCustomService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedCustomService) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedCustomServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedCustomService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureBlobStorage
func (mg *LinkedServiceAzureBlobStorage) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_blob_storage"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef", "sas_uri": "spec.forProvider.sasUriSecretRef", "service_endpoint": "spec.forProvider.serviceEndpointSecretRef"}
}

// GetObservation of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureBlobStorage
func (tr *LinkedServiceAzureBlobStorage) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureBlobStorage using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureBlobStorage) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureBlobStorageParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureBlobStorage) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureDatabricks
func (mg *LinkedServiceAzureDatabricks) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_databricks"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"access_token": "spec.forProvider.accessTokenSecretRef"}
}

// GetObservation of this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureDatabricks
func (tr *LinkedServiceAzureDatabricks) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureDatabricks using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureDatabricks) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureDatabricksParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureDatabricks) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureFileStorage
func (mg *LinkedServiceAzureFileStorage) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_file_storage"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef", "password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureFileStorage
func (tr *LinkedServiceAzureFileStorage) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureFileStorage using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureFileStorage) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureFileStorageParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureFileStorage) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureFunction
func (mg *LinkedServiceAzureFunction) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_function"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"key": "spec.forProvider.keySecretRef"}
}

// GetObservation of this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureFunction
func (tr *LinkedServiceAzureFunction) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureFunction using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureFunction) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureFunctionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureFunction) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureSearch
func (mg *LinkedServiceAzureSearch) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_search"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureSearch
func (tr *LinkedServiceAzureSearch) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureSearch using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureSearch) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureSearchParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureSearch) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureSQLDatabase
func (mg *LinkedServiceAzureSQLDatabase) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_sql_database"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureSQLDatabase
func (tr *LinkedServiceAzureSQLDatabase) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureSQLDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureSQLDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureSQLDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureSQLDatabase) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceAzureTableStorage
func (mg *LinkedServiceAzureTableStorage) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_azure_table_storage"
}

// GetConnectionDetailsMapping for this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef"}
}

// GetObservation of this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceAzureTableStorage
func (tr *LinkedServiceAzureTableStorage) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceAzureTableStorage using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceAzureTableStorage) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceAzureTableStorageParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceAzureTableStorage) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceCosmosDB
func (mg *LinkedServiceCosmosDB) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_cosmosdb"
}

// GetConnectionDetailsMapping for this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"account_key": "spec.forProvider.accountKeySecretRef", "connection_string": "spec.forProvider.connectionStringSecretRef"}
}

// GetObservation of this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceCosmosDB
func (tr *LinkedServiceCosmosDB) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceCosmosDB using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceCosmosDB) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceCosmosDBParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceCosmosDB) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceCosmosDBMongoapi
func (mg *LinkedServiceCosmosDBMongoapi) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_cosmosdb_mongoapi"
}

// GetConnectionDetailsMapping for this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "spec.forProvider.connectionStringSecretRef"}
}

// GetObservation of this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceCosmosDBMongoapi
func (tr *LinkedServiceCosmosDBMongoapi) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceCosmosDBMongoapi using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceCosmosDBMongoapi) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceCosmosDBMongoapiParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceCosmosDBMongoapi) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceDataLakeStorageGen2
func (mg *LinkedServiceDataLakeStorageGen2) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_data_lake_storage_gen2"
}

// GetConnectionDetailsMapping for this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceDataLakeStorageGen2
func (tr *LinkedServiceDataLakeStorageGen2) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceDataLakeStorageGen2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceDataLakeStorageGen2) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceDataLakeStorageGen2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceDataLakeStorageGen2) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceKeyVault
func (mg *LinkedServiceKeyVault) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_key_vault"
}

// GetConnectionDetailsMapping for this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceKeyVault
func (tr *LinkedServiceKeyVault) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceKeyVault using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceKeyVault) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceKeyVaultParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceKeyVault) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceKusto
func (mg *LinkedServiceKusto) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_kusto"
}

// GetConnectionDetailsMapping for this LinkedServiceKusto
func (tr *LinkedServiceKusto) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"service_principal_key": "spec.forProvider.servicePrincipalKeySecretRef"}
}

// GetObservation of this LinkedServiceKusto
func (tr *LinkedServiceKusto) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceKusto
func (tr *LinkedServiceKusto) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceKusto
func (tr *LinkedServiceKusto) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceKusto
func (tr *LinkedServiceKusto) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceKusto
func (tr *LinkedServiceKusto) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceKusto using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceKusto) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceKustoParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceKusto) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceMySQL
func (mg *LinkedServiceMySQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_mysql"
}

// GetConnectionDetailsMapping for this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceMySQL
func (tr *LinkedServiceMySQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceMySQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceMySQL) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceMySQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceMySQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceOData
func (mg *LinkedServiceOData) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_odata"
}

// GetConnectionDetailsMapping for this LinkedServiceOData
func (tr *LinkedServiceOData) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"basic_authentication[*].password": "spec.forProvider.basicAuthentication[*].passwordSecretRef"}
}

// GetObservation of this LinkedServiceOData
func (tr *LinkedServiceOData) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceOData
func (tr *LinkedServiceOData) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceOData
func (tr *LinkedServiceOData) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceOData
func (tr *LinkedServiceOData) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceOData
func (tr *LinkedServiceOData) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceOData using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceOData) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceODataParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceOData) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceOdbc
func (mg *LinkedServiceOdbc) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_odbc"
}

// GetConnectionDetailsMapping for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"basic_authentication[*].password": "spec.forProvider.basicAuthentication[*].passwordSecretRef"}
}

// GetObservation of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceOdbc
func (tr *LinkedServiceOdbc) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceOdbc using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceOdbc) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceOdbcParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceOdbc) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServicePostgreSQL
func (mg *LinkedServicePostgreSQL) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_postgresql"
}

// GetConnectionDetailsMapping for this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServicePostgreSQL
func (tr *LinkedServicePostgreSQL) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServicePostgreSQL using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServicePostgreSQL) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServicePostgreSQLParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServicePostgreSQL) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceSFTP
func (mg *LinkedServiceSFTP) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_sftp"
}

// GetConnectionDetailsMapping for this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceSFTP
func (tr *LinkedServiceSFTP) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceSFTP using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceSFTP) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceSFTPParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceSFTP) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceSnowflake
func (mg *LinkedServiceSnowflake) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_snowflake"
}

// GetConnectionDetailsMapping for this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceSnowflake
func (tr *LinkedServiceSnowflake) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceSnowflake using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceSnowflake) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceSnowflakeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceSnowflake) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceSQLServer
func (mg *LinkedServiceSQLServer) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_sql_server"
}

// GetConnectionDetailsMapping for this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceSQLServer
func (tr *LinkedServiceSQLServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceSQLServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceSQLServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceSQLServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceSQLServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceSynapse
func (mg *LinkedServiceSynapse) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_synapse"
}

// GetConnectionDetailsMapping for this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceSynapse
func (tr *LinkedServiceSynapse) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceSynapse using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceSynapse) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceSynapseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceSynapse) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LinkedServiceWeb
func (mg *LinkedServiceWeb) GetTerraformResourceType() string {
	return "azurerm_data_factory_linked_service_web"
}

// GetConnectionDetailsMapping for this LinkedServiceWeb
func (tr *LinkedServiceWeb) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this LinkedServiceWeb
func (tr *LinkedServiceWeb) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LinkedServiceWeb
func (tr *LinkedServiceWeb) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LinkedServiceWeb
func (tr *LinkedServiceWeb) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LinkedServiceWeb
func (tr *LinkedServiceWeb) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LinkedServiceWeb
func (tr *LinkedServiceWeb) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LinkedServiceWeb using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LinkedServiceWeb) LateInitialize(attrs []byte) (bool, error) {
	params := &LinkedServiceWebParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LinkedServiceWeb) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ManagedPrivateEndpoint
func (mg *ManagedPrivateEndpoint) GetTerraformResourceType() string {
	return "azurerm_data_factory_managed_private_endpoint"
}

// GetConnectionDetailsMapping for this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ManagedPrivateEndpoint
func (tr *ManagedPrivateEndpoint) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ManagedPrivateEndpoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ManagedPrivateEndpoint) LateInitialize(attrs []byte) (bool, error) {
	params := &ManagedPrivateEndpointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ManagedPrivateEndpoint) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Pipeline
func (mg *Pipeline) GetTerraformResourceType() string {
	return "azurerm_data_factory_pipeline"
}

// GetConnectionDetailsMapping for this Pipeline
func (tr *Pipeline) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Pipeline
func (tr *Pipeline) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Pipeline
func (tr *Pipeline) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Pipeline
func (tr *Pipeline) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Pipeline
func (tr *Pipeline) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Pipeline
func (tr *Pipeline) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Pipeline using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Pipeline) LateInitialize(attrs []byte) (bool, error) {
	params := &PipelineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Pipeline) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TriggerBlobEvent
func (mg *TriggerBlobEvent) GetTerraformResourceType() string {
	return "azurerm_data_factory_trigger_blob_event"
}

// GetConnectionDetailsMapping for this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TriggerBlobEvent
func (tr *TriggerBlobEvent) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TriggerBlobEvent
func (tr *TriggerBlobEvent) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TriggerBlobEvent
func (tr *TriggerBlobEvent) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TriggerBlobEvent using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TriggerBlobEvent) LateInitialize(attrs []byte) (bool, error) {
	params := &TriggerBlobEventParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TriggerBlobEvent) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TriggerCustomEvent
func (mg *TriggerCustomEvent) GetTerraformResourceType() string {
	return "azurerm_data_factory_trigger_custom_event"
}

// GetConnectionDetailsMapping for this TriggerCustomEvent
func (tr *TriggerCustomEvent) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TriggerCustomEvent
func (tr *TriggerCustomEvent) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TriggerCustomEvent
func (tr *TriggerCustomEvent) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TriggerCustomEvent
func (tr *TriggerCustomEvent) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TriggerCustomEvent
func (tr *TriggerCustomEvent) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TriggerCustomEvent
func (tr *TriggerCustomEvent) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TriggerCustomEvent using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TriggerCustomEvent) LateInitialize(attrs []byte) (bool, error) {
	params := &TriggerCustomEventParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TriggerCustomEvent) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TriggerSchedule
func (mg *TriggerSchedule) GetTerraformResourceType() string {
	return "azurerm_data_factory_trigger_schedule"
}

// GetConnectionDetailsMapping for this TriggerSchedule
func (tr *TriggerSchedule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TriggerSchedule
func (tr *TriggerSchedule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TriggerSchedule
func (tr *TriggerSchedule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TriggerSchedule
func (tr *TriggerSchedule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TriggerSchedule
func (tr *TriggerSchedule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TriggerSchedule
func (tr *TriggerSchedule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TriggerSchedule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TriggerSchedule) LateInitialize(attrs []byte) (bool, error) {
	params := &TriggerScheduleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	opts = append(opts, resource.WithNameFilter("Pipeline"))
	opts = append(opts, resource.WithNameFilter("PipelineName"))

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TriggerSchedule) GetTerraformSchemaVersion() int {
	return 0
}
