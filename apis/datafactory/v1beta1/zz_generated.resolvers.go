//go:build (datafactory || all) && !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *CustomDataSet) ResolveReferences( // ResolveReferences of this CustomDataSet.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedService); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedCustomService", "LinkedCustomServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedService[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.LinkedService[i3].NameRef,
				Selector:     mg.Spec.ForProvider.LinkedService[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedService[i3].Name")
		}
		mg.Spec.ForProvider.LinkedService[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedService[i3].NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedService); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedCustomService", "LinkedCustomServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedService[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.LinkedService[i3].NameRef,
				Selector:     mg.Spec.InitProvider.LinkedService[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedService[i3].Name")
		}
		mg.Spec.InitProvider.LinkedService[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedService[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DataFlow.
func (mg *DataFlow) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sink); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Sink[i3].DataSet); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef,
					Selector:     mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Source[i3].DataSet); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].DataSet[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef,
					Selector:     mg.Spec.ForProvider.Source[i3].DataSet[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Source[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Sink); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Sink[i3].DataSet); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Sink[i3].DataSet[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Sink[i3].DataSet[i4].NameRef,
					Selector:     mg.Spec.InitProvider.Sink[i3].DataSet[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Sink[i3].DataSet[i4].Name")
			}
			mg.Spec.InitProvider.Sink[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Sink[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Source); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Source[i3].DataSet); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "DataSetJSON", "DataSetJSONList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source[i3].DataSet[i4].Name),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Source[i3].DataSet[i4].NameRef,
					Selector:     mg.Spec.InitProvider.Source[i3].DataSet[i4].NameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Source[i3].DataSet[i4].Name")
			}
			mg.Spec.InitProvider.Source[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Source[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this DataSetAzureBlob.
func (mg *DataSetAzureBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceAzureBlobStorage", "LinkedServiceAzureBlobStorageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceAzureBlobStorage", "LinkedServiceAzureBlobStorageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetBinary.
func (mg *DataSetBinary) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceSFTP", "LinkedServiceSFTPList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceSFTP", "LinkedServiceSFTPList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetCosmosDBSQLAPI.
func (mg *DataSetCosmosDBSQLAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceCosmosDB", "LinkedServiceCosmosDBList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceCosmosDB", "LinkedServiceCosmosDBList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetDelimitedText.
func (mg *DataSetDelimitedText) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetHTTP.
func (mg *DataSetHTTP) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetJSON.
func (mg *DataSetJSON) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetMySQL.
func (mg *DataSetMySQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceMySQL", "LinkedServiceMySQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceMySQL", "LinkedServiceMySQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetParquet.
func (mg *DataSetParquet) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceWeb", "LinkedServiceWebList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetPostgreSQL.
func (mg *DataSetPostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServicePostgreSQL", "LinkedServicePostgreSQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServicePostgreSQL", "LinkedServicePostgreSQLList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetSQLServerTable.
func (mg *DataSetSQLServerTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceSQLServer", "LinkedServiceSQLServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceSQLServer", "LinkedServiceSQLServerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetSnowflake.
func (mg *DataSetSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceSnowflake", "LinkedServiceSnowflakeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "LinkedServiceSnowflake", "LinkedServiceSnowflakeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.LinkedServiceNameRef,
			Selector:     mg.Spec.InitProvider.LinkedServiceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinkedServiceName")
	}
	mg.Spec.InitProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Factory.
func (mg *Factory) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzure.
func (mg *IntegrationRuntimeAzure) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzureSSIS.
func (mg *IntegrationRuntimeAzureSSIS) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExpressVnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ExpressVnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetID")
		}
		mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ExpressVnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VnetIntegration[i3].SubnetID),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.VnetIntegration[i3].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration[i3].SubnetID")
		}
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VnetIntegration[i3].SubnetName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IntegrationRuntimeManaged.
func (mg *IntegrationRuntimeManaged) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef,
				Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VnetIntegration); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VnetIntegration[i3].SubnetName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameRef,
				Selector:     mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IntegrationRuntimeSelfHosted.
func (mg *IntegrationRuntimeSelfHosted) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedCustomService.
func (mg *LinkedCustomService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureBlobStorage.
func (mg *LinkedServiceAzureBlobStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultSASToken); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.KeyVaultSASToken); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultSASToken[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName")
		}
		mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceAzureDatabricks.
func (mg *LinkedServiceAzureDatabricks) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta1", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MsiWorkSpaceResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef,
			Selector:     mg.Spec.ForProvider.MsiWorkSpaceResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MsiWorkSpaceResourceID")
	}
	mg.Spec.ForProvider.MsiWorkSpaceResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("databricks.azure.upbound.io", "v1beta1", "Workspace", "WorkspaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MsiWorkSpaceResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.MsiWorkSpaceResourceIDRef,
			Selector:     mg.Spec.InitProvider.MsiWorkSpaceResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MsiWorkSpaceResourceID")
	}
	mg.Spec.InitProvider.MsiWorkSpaceResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MsiWorkSpaceResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFileStorage.
func (mg *LinkedServiceAzureFileStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFunction.
func (mg *LinkedServiceAzureFunction) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureSQLDatabase.
func (mg *LinkedServiceAzureSQLDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureSearch.
func (mg *LinkedServiceAzureSearch) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("search.azure.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SearchServiceKey),
			Extract:      resource.ExtractParamPath("primary_key", true),
			Reference:    mg.Spec.ForProvider.SearchServiceKeyRef,
			Selector:     mg.Spec.ForProvider.SearchServiceKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SearchServiceKey")
	}
	mg.Spec.ForProvider.SearchServiceKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SearchServiceKeyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("search.azure.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SearchServiceKey),
			Extract:      resource.ExtractParamPath("primary_key", true),
			Reference:    mg.Spec.InitProvider.SearchServiceKeyRef,
			Selector:     mg.Spec.InitProvider.SearchServiceKeySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SearchServiceKey")
	}
	mg.Spec.InitProvider.SearchServiceKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SearchServiceKeyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureTableStorage.
func (mg *LinkedServiceAzureTableStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceCosmosDB.
func (mg *LinkedServiceCosmosDB) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceCosmosDBMongoapi.
func (mg *LinkedServiceCosmosDBMongoapi) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceDataLakeStorageGen2.
func (mg *LinkedServiceDataLakeStorageGen2) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceKeyVault.
func (mg *LinkedServiceKeyVault) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Vault", "VaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.KeyVaultIDRef,
			Selector:     mg.Spec.ForProvider.KeyVaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultID")
	}
	mg.Spec.ForProvider.KeyVaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("keyvault.azure.upbound.io", "v1beta2", "Vault", "VaultList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.KeyVaultIDRef,
			Selector:     mg.Spec.InitProvider.KeyVaultIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultID")
	}
	mg.Spec.InitProvider.KeyVaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyVaultIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceKusto.
func (mg *LinkedServiceKusto) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kusto.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KustoDatabaseName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KustoDatabaseNameRef,
			Selector:     mg.Spec.ForProvider.KustoDatabaseNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KustoDatabaseName")
	}
	mg.Spec.ForProvider.KustoDatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KustoDatabaseNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kusto.azure.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KustoEndpoint),
			Extract:      resource.ExtractParamPath("uri", true),
			Reference:    mg.Spec.ForProvider.KustoEndpointRef,
			Selector:     mg.Spec.ForProvider.KustoEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KustoEndpoint")
	}
	mg.Spec.ForProvider.KustoEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KustoEndpointRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kusto.azure.upbound.io", "v1beta1", "Database", "DatabaseList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KustoDatabaseName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.KustoDatabaseNameRef,
			Selector:     mg.Spec.InitProvider.KustoDatabaseNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KustoDatabaseName")
	}
	mg.Spec.InitProvider.KustoDatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KustoDatabaseNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("kusto.azure.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KustoEndpoint),
			Extract:      resource.ExtractParamPath("uri", true),
			Reference:    mg.Spec.InitProvider.KustoEndpointRef,
			Selector:     mg.Spec.InitProvider.KustoEndpointSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.KustoEndpoint")
	}
	mg.Spec.InitProvider.KustoEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KustoEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceMySQL.
func (mg *LinkedServiceMySQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOData.
func (mg *LinkedServiceOData) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOdbc.
func (mg *LinkedServiceOdbc) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServicePostgreSQL.
func (mg *LinkedServicePostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceSFTP.
func (mg *LinkedServiceSFTP) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceSQLServer.
func (mg *LinkedServiceSQLServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSnowflake.
func (mg *LinkedServiceSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSynapse.
func (mg *LinkedServiceSynapse) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.KeyVaultPassword); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "LinkedServiceKeyVault", "LinkedServiceKeyVaultList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
				Selector:     mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceWeb.
func (mg *LinkedServiceWeb) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedPrivateEndpoint.
func (mg *ManagedPrivateEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DataFactoryIDRef,
			Selector:     mg.Spec.InitProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataFactoryID")
	}
	mg.Spec.InitProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Pipeline.
func (mg *Pipeline) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TriggerBlobEvent.
func (mg *TriggerBlobEvent) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Pipeline); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Pipeline[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Pipeline[i3].NameRef,
				Selector:     mg.Spec.ForProvider.Pipeline[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Pipeline[i3].Name")
		}
		mg.Spec.ForProvider.Pipeline[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Pipeline[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.StorageAccountIDRef,
			Selector:     mg.Spec.ForProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountID")
	}
	mg.Spec.ForProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Pipeline); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Pipeline[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Pipeline[i3].NameRef,
				Selector:     mg.Spec.InitProvider.Pipeline[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Pipeline[i3].Name")
		}
		mg.Spec.InitProvider.Pipeline[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Pipeline[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageAccountID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.StorageAccountIDRef,
			Selector:     mg.Spec.InitProvider.StorageAccountIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccountID")
	}
	mg.Spec.InitProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TriggerCustomEvent.
func (mg *TriggerCustomEvent) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta2", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("eventgrid.azure.upbound.io", "v1beta2", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EventGridTopicID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.EventGridTopicIDRef,
			Selector:     mg.Spec.ForProvider.EventGridTopicIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EventGridTopicID")
	}
	mg.Spec.ForProvider.EventGridTopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EventGridTopicIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Pipeline); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Pipeline[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Pipeline[i3].NameRef,
				Selector:     mg.Spec.ForProvider.Pipeline[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Pipeline[i3].Name")
		}
		mg.Spec.ForProvider.Pipeline[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Pipeline[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("eventgrid.azure.upbound.io", "v1beta2", "Topic", "TopicList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EventGridTopicID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.EventGridTopicIDRef,
			Selector:     mg.Spec.InitProvider.EventGridTopicIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EventGridTopicID")
	}
	mg.Spec.InitProvider.EventGridTopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EventGridTopicIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Pipeline); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Pipeline[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Pipeline[i3].NameRef,
				Selector:     mg.Spec.InitProvider.Pipeline[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Pipeline[i3].Name")
		}
		mg.Spec.InitProvider.Pipeline[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Pipeline[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this TriggerSchedule.
func (mg *TriggerSchedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Factory", "FactoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
			Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PipelineNameRef,
			Selector:     mg.Spec.ForProvider.PipelineNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineName")
	}
	mg.Spec.ForProvider.PipelineName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datafactory.azure.upbound.io", "v1beta1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.PipelineNameRef,
			Selector:     mg.Spec.InitProvider.PipelineNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineName")
	}
	mg.Spec.InitProvider.PipelineName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineNameRef = rsp.ResolvedReference

	return nil
}
