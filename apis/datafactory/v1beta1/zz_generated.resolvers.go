/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/databricks/v1beta1"
	v1beta14 "github.com/upbound/provider-azure/apis/keyvault/v1beta1"
	v1beta15 "github.com/upbound/provider-azure/apis/kusto/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/network/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	v1beta13 "github.com/upbound/provider-azure/apis/search/v1beta1"
	v1beta16 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CustomDataSet.
func (mg *CustomDataSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedService); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedService[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LinkedService[i3].NameRef,
			Selector:     mg.Spec.ForProvider.LinkedService[i3].NameSelector,
			To: reference.To{
				List:    &LinkedCustomServiceList{},
				Managed: &LinkedCustomService{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedService[i3].Name")
		}
		mg.Spec.ForProvider.LinkedService[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedService[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DataFlow.
func (mg *DataFlow) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sink); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Sink[i3].DataSet); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef,
				Selector:     mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameSelector,
				To: reference.To{
					List:    &DataSetJSONList{},
					Managed: &DataSetJSON{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Source[i3].DataSet); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].DataSet[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef,
				Selector:     mg.Spec.ForProvider.Source[i3].DataSet[i4].NameSelector,
				To: reference.To{
					List:    &DataSetJSONList{},
					Managed: &DataSetJSON{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Source[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this DataSetAzureBlob.
func (mg *DataSetAzureBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceAzureBlobStorageList{},
			Managed: &LinkedServiceAzureBlobStorage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetBinary.
func (mg *DataSetBinary) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceSFTPList{},
			Managed: &LinkedServiceSFTP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetCosmosDBSQLAPI.
func (mg *DataSetCosmosDBSQLAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceCosmosDBList{},
			Managed: &LinkedServiceCosmosDB{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetDelimitedText.
func (mg *DataSetDelimitedText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceWebList{},
			Managed: &LinkedServiceWeb{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetHTTP.
func (mg *DataSetHTTP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceWebList{},
			Managed: &LinkedServiceWeb{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetJSON.
func (mg *DataSetJSON) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceWebList{},
			Managed: &LinkedServiceWeb{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetMySQL.
func (mg *DataSetMySQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceMySQLList{},
			Managed: &LinkedServiceMySQL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetParquet.
func (mg *DataSetParquet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceWebList{},
			Managed: &LinkedServiceWeb{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetPostgreSQL.
func (mg *DataSetPostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServicePostgreSQLList{},
			Managed: &LinkedServicePostgreSQL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetSnowflake.
func (mg *DataSetSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedServiceName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinkedServiceNameRef,
		Selector:     mg.Spec.ForProvider.LinkedServiceNameSelector,
		To: reference.To{
			List:    &LinkedServiceSnowflakeList{},
			Managed: &LinkedServiceSnowflake{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinkedServiceName")
	}
	mg.Spec.ForProvider.LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinkedServiceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Factory.
func (mg *Factory) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzure.
func (mg *IntegrationRuntimeAzure) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzureSSIS.
func (mg *IntegrationRuntimeAzureSSIS) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExpressVnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef,
			Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this IntegrationRuntimeSelfHosted.
func (mg *IntegrationRuntimeSelfHosted) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedCustomService.
func (mg *LinkedCustomService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureBlobStorage.
func (mg *LinkedServiceAzureBlobStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultSASToken); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameSelector,
			To: reference.To{
				List:    &LinkedServiceKeyVaultList{},
				Managed: &LinkedServiceKeyVault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultSASToken[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameSelector,
			To: reference.To{
				List:    &LinkedServiceKeyVaultList{},
				Managed: &LinkedServiceKeyVault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServicePrincipalLinkedKeyVaultKey[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceAzureDatabricks.
func (mg *LinkedServiceAzureDatabricks) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MsiWorkSpaceResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef,
		Selector:     mg.Spec.ForProvider.MsiWorkSpaceResourceIDSelector,
		To: reference.To{
			List:    &v1beta12.WorkspaceList{},
			Managed: &v1beta12.Workspace{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MsiWorkSpaceResourceID")
	}
	mg.Spec.ForProvider.MsiWorkSpaceResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MsiWorkSpaceResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFileStorage.
func (mg *LinkedServiceAzureFileStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureFunction.
func (mg *LinkedServiceAzureFunction) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureSQLDatabase.
func (mg *LinkedServiceAzureSQLDatabase) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureSearch.
func (mg *LinkedServiceAzureSearch) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SearchServiceKey),
		Extract:      resource.ExtractParamPath("primary_key", true),
		Reference:    mg.Spec.ForProvider.SearchServiceKeyRef,
		Selector:     mg.Spec.ForProvider.SearchServiceKeySelector,
		To: reference.To{
			List:    &v1beta13.ServiceList{},
			Managed: &v1beta13.Service{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SearchServiceKey")
	}
	mg.Spec.ForProvider.SearchServiceKey = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SearchServiceKeyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceAzureTableStorage.
func (mg *LinkedServiceAzureTableStorage) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceCosmosDB.
func (mg *LinkedServiceCosmosDB) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceDataLakeStorageGen2.
func (mg *LinkedServiceDataLakeStorageGen2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceKeyVault.
func (mg *LinkedServiceKeyVault) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.KeyVaultIDRef,
		Selector:     mg.Spec.ForProvider.KeyVaultIDSelector,
		To: reference.To{
			List:    &v1beta14.VaultList{},
			Managed: &v1beta14.Vault{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultID")
	}
	mg.Spec.ForProvider.KeyVaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceKusto.
func (mg *LinkedServiceKusto) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KustoDatabaseName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.KustoDatabaseNameRef,
		Selector:     mg.Spec.ForProvider.KustoDatabaseNameSelector,
		To: reference.To{
			List:    &v1beta15.DatabaseList{},
			Managed: &v1beta15.Database{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KustoDatabaseName")
	}
	mg.Spec.ForProvider.KustoDatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KustoDatabaseNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KustoEndpoint),
		Extract:      resource.ExtractParamPath("uri", true),
		Reference:    mg.Spec.ForProvider.KustoEndpointRef,
		Selector:     mg.Spec.ForProvider.KustoEndpointSelector,
		To: reference.To{
			List:    &v1beta15.ClusterList{},
			Managed: &v1beta15.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KustoEndpoint")
	}
	mg.Spec.ForProvider.KustoEndpoint = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KustoEndpointRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceMySQL.
func (mg *LinkedServiceMySQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOData.
func (mg *LinkedServiceOData) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceOdbc.
func (mg *LinkedServiceOdbc) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServicePostgreSQL.
func (mg *LinkedServicePostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceSFTP.
func (mg *LinkedServiceSFTP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LinkedServiceSQLServer.
func (mg *LinkedServiceSQLServer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
			To: reference.To{
				List:    &LinkedServiceKeyVaultList{},
				Managed: &LinkedServiceKeyVault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSnowflake.
func (mg *LinkedServiceSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
			To: reference.To{
				List:    &LinkedServiceKeyVaultList{},
				Managed: &LinkedServiceKeyVault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceSynapse.
func (mg *LinkedServiceSynapse) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.KeyVaultPassword); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef,
			Selector:     mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameSelector,
			To: reference.To{
				List:    &LinkedServiceKeyVaultList{},
				Managed: &LinkedServiceKeyVault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName")
		}
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVaultPassword[i3].LinkedServiceNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceWeb.
func (mg *LinkedServiceWeb) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ManagedPrivateEndpoint.
func (mg *ManagedPrivateEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
		Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
		To: reference.To{
			List:    &v1beta16.AccountList{},
			Managed: &v1beta16.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Pipeline.
func (mg *Pipeline) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TriggerBlobEvent.
func (mg *TriggerBlobEvent) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Pipeline); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Pipeline[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Pipeline[i3].NameRef,
			Selector:     mg.Spec.ForProvider.Pipeline[i3].NameSelector,
			To: reference.To{
				List:    &PipelineList{},
				Managed: &Pipeline{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Pipeline[i3].Name")
		}
		mg.Spec.ForProvider.Pipeline[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Pipeline[i3].NameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StorageAccountIDRef,
		Selector:     mg.Spec.ForProvider.StorageAccountIDSelector,
		To: reference.To{
			List:    &v1beta16.AccountList{},
			Managed: &v1beta16.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountID")
	}
	mg.Spec.ForProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TriggerSchedule.
func (mg *TriggerSchedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PipelineNameRef,
		Selector:     mg.Spec.ForProvider.PipelineNameSelector,
		To: reference.To{
			List:    &PipelineList{},
			Managed: &Pipeline{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineName")
	}
	mg.Spec.ForProvider.PipelineName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineNameRef = rsp.ResolvedReference

	return nil
}
