/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomDataSetObservation struct {

	// The ID of the Data Factory Dataset.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomDataSetParameters struct {

	// A map of additional properties to associate with the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// List of tags that can be used for describing the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DataFactoryID *string `json:"dataFactoryId,omitempty" tf:"data_factory_id,omitempty"`

	// Reference to a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDRef *v1.Reference `json:"dataFactoryIdRef,omitempty" tf:"-"`

	// Selector for a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDSelector *v1.Selector `json:"dataFactoryIdSelector,omitempty" tf:"-"`

	// The description for the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// A linked_service block as defined below.
	// +kubebuilder:validation:Required
	LinkedService []LinkedServiceParameters `json:"linkedService" tf:"linked_service,omitempty"`

	// A map of parameters to associate with the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// A JSON object that contains the schema of the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	SchemaJSON *string `json:"schemaJson,omitempty" tf:"schema_json,omitempty"`

	// The type of dataset that will be associated with Data Factory. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// A JSON object that contains the properties of the Data Factory Dataset.
	// +kubebuilder:validation:Required
	TypePropertiesJSON *string `json:"typePropertiesJson" tf:"type_properties_json,omitempty"`
}

type LinkedServiceObservation struct {
}

type LinkedServiceParameters struct {

	// The name of the Data Factory Linked Service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedCustomService
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a LinkedCustomService in datafactory to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a LinkedCustomService in datafactory to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

// CustomDataSetSpec defines the desired state of CustomDataSet
type CustomDataSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomDataSetParameters `json:"forProvider"`
}

// CustomDataSetStatus defines the observed state of CustomDataSet.
type CustomDataSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomDataSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDataSet is the Schema for the CustomDataSets API. Manages a Dataset inside an Azure Data Factory. This is a generic resource that supports all different Dataset Types.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CustomDataSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomDataSetSpec   `json:"spec"`
	Status            CustomDataSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDataSetList contains a list of CustomDataSets
type CustomDataSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomDataSet `json:"items"`
}

// Repository type metadata.
var (
	CustomDataSet_Kind             = "CustomDataSet"
	CustomDataSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomDataSet_Kind}.String()
	CustomDataSet_KindAPIVersion   = CustomDataSet_Kind + "." + CRDGroupVersion.String()
	CustomDataSet_GroupVersionKind = CRDGroupVersion.WithKind(CustomDataSet_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomDataSet{}, &CustomDataSetList{})
}
