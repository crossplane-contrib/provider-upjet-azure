/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyVaultKeyObservation struct {
}

type KeyVaultKeyParameters struct {

	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// Specifies the secret name in Azure Key Vault that stores the system key of the Azure Function.
	// +kubebuilder:validation:Required
	SecretName *string `json:"secretName" tf:"secret_name,omitempty"`
}

type LinkedServiceAzureFunctionObservation struct {

	// The ID of the Data Factory Linked Service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LinkedServiceAzureFunctionParameters struct {

	// A map of additional properties to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// List of tags that can be used for describing the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DataFactoryID *string `json:"dataFactoryId,omitempty" tf:"data_factory_id,omitempty"`

	// Reference to a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDRef *v1.Reference `json:"dataFactoryIdRef,omitempty" tf:"-"`

	// Selector for a Factory in datafactory to populate dataFactoryId.
	// +kubebuilder:validation:Optional
	DataFactoryIDSelector *v1.Selector `json:"dataFactoryIdSelector,omitempty" tf:"-"`

	// The description for the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The integration runtime reference to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name,omitempty"`

	// The system key of the Azure Function. Exactly one of either key or key_vault_key is required
	// +kubebuilder:validation:Optional
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// A key_vault_key block as defined below. Use this Argument to store the system key of the Azure Function in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either key or key_vault_key is required.
	// +kubebuilder:validation:Optional
	KeyVaultKey []KeyVaultKeyParameters `json:"keyVaultKey,omitempty" tf:"key_vault_key,omitempty"`

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The url of the Azure Function.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

// LinkedServiceAzureFunctionSpec defines the desired state of LinkedServiceAzureFunction
type LinkedServiceAzureFunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LinkedServiceAzureFunctionParameters `json:"forProvider"`
}

// LinkedServiceAzureFunctionStatus defines the observed state of LinkedServiceAzureFunction.
type LinkedServiceAzureFunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LinkedServiceAzureFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LinkedServiceAzureFunction is the Schema for the LinkedServiceAzureFunctions API. Manages a Linked Service (connection) between an Azure Function Account and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LinkedServiceAzureFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LinkedServiceAzureFunctionSpec   `json:"spec"`
	Status            LinkedServiceAzureFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LinkedServiceAzureFunctionList contains a list of LinkedServiceAzureFunctions
type LinkedServiceAzureFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LinkedServiceAzureFunction `json:"items"`
}

// Repository type metadata.
var (
	LinkedServiceAzureFunction_Kind             = "LinkedServiceAzureFunction"
	LinkedServiceAzureFunction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LinkedServiceAzureFunction_Kind}.String()
	LinkedServiceAzureFunction_KindAPIVersion   = LinkedServiceAzureFunction_Kind + "." + CRDGroupVersion.String()
	LinkedServiceAzureFunction_GroupVersionKind = CRDGroupVersion.WithKind(LinkedServiceAzureFunction_Kind)
)

func init() {
	SchemeBuilder.Register(&LinkedServiceAzureFunction{}, &LinkedServiceAzureFunctionList{})
}
