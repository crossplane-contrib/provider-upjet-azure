/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProximityPlacementGroupObservation struct {

	// The ID of the Proximity Placement Group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProximityPlacementGroupParameters struct {

	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are Basic_A4, Basic_A1, Basic_A3, Basic_A2, Basic_A0, Standard_A8, Standard_A8_v2, Standard_A8m_v2, Standard_A5, Standard_A4, Standard_A4_v2, Standard_A4m_v2, Standard_A9, Standard_A1, Standard_A11, Standard_A1_v2, Standard_A10, Standard_A7, Standard_A6, Standard_A3, Standard_A2, Standard_A2_v2, Standard_A2m_v2, Standard_A0, Standard_B8ms, Standard_B4ms, Standard_B1ms, Standard_B1s, Standard_B2ms, Standard_B2s, Standard_D8_v3, Standard_D8s_v3, Standard_D5_v2, Standard_D4, Standard_D4_v3, Standard_D4_v2, Standard_D4s_v3, Standard_D1, Standard_D15_v2, Standard_D14, Standard_D14_v2, Standard_D11, Standard_D11_v2, Standard_D16_v3, Standard_D16s_v3, Standard_D13, Standard_D13_v2, Standard_D12, Standard_D12_v2, Standard_D1_v2, Standard_DS5_v2, Standard_DS4, Standard_DS4_v2, Standard_DS1, Standard_DS15_v2, Standard_DS14, Standard_DS14-8_v2, Standard_DS14-4_v2, Standard_DS14_v2, Standard_DS11, Standard_DS11_v2, Standard_DS13, Standard_DS13-4_v2, Standard_DS13-2_v2, Standard_DS13_v2, Standard_DS12, Standard_DS12_v2, Standard_DS1_v2, Standard_DS3, Standard_DS3_v2, Standard_DS2, Standard_DS2_v2, Standard_D64_v3, Standard_D64s_v3, Standard_D3, Standard_D32_v3, Standard_D32s_v3, Standard_D3_v2, Standard_D2, Standard_D2_v3, Standard_D2_v2, Standard_D2s_v3, Standard_E8_v3, Standard_E8s_v3, Standard_E4_v3, Standard_E4s_v3, Standard_E16_v3, Standard_E16s_v3, Standard_E64-16s_v3, Standard_E64-32s_v3, Standard_E64_v3, Standard_E64s_v3, Standard_E32-8s_v3, Standard_E32-16_v3, Standard_E32_v3, Standard_E32s_v3, Standard_E2_v3, Standard_E2s_v3, Standard_F8, Standard_F8s, Standard_F8s_v2, Standard_F4, Standard_F4s, Standard_F4s_v2, Standard_F1, Standard_F16, Standard_F16s, Standard_F16s_v2, Standard_F1s, Standard_F72s_v2, Standard_F64s_v2, Standard_F32s_v2, Standard_F2, Standard_F2s, Standard_F2s_v2, Standard_G5, Standard_G4, Standard_G1, Standard_GS5, Standard_GS5-8, Standard_GS5-16, Standard_GS4, Standard_GS4-8, Standard_GS4-4, Standard_GS1, Standard_GS3, Standard_GS2, Standard_G3, Standard_G2, Standard_H8, Standard_H8m, Standard_H16, Standard_H16m, Standard_H16mr, Standard_H16r, Standard_L8s, Standard_L4s, Standard_L16s, Standard_L32s, Standard_M128-64ms, Standard_M128-32ms, Standard_M128ms, Standard_M128s, Standard_M64-16ms, Standard_M64-32ms, Standard_M64ms, Standard_M64s, Standard_NC12, Standard_NC12s_v3, Standard_NC12s_v2, Standard_NC6, Standard_NC6s_v3, Standard_NC6s_v2, Standard_NC24, Standard_NC24r, Standard_NC24rs_v3, Standard_NC24rs_v2, Standard_NC24s_v3, Standard_NC24s_v2, Standard_ND12s, Standard_ND6s, Standard_ND24rs, Standard_ND24s, Standard_NV12, Standard_NV6 and Standard_NV24.
	// +kubebuilder:validation:Optional
	AllowedVMSizes []*string `json:"allowedVmSizes,omitempty" tf:"allowed_vm_sizes,omitempty"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ProximityPlacementGroupSpec defines the desired state of ProximityPlacementGroup
type ProximityPlacementGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProximityPlacementGroupParameters `json:"forProvider"`
}

// ProximityPlacementGroupStatus defines the observed state of ProximityPlacementGroup.
type ProximityPlacementGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProximityPlacementGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProximityPlacementGroup is the Schema for the ProximityPlacementGroups API. Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ProximityPlacementGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProximityPlacementGroupSpec   `json:"spec"`
	Status            ProximityPlacementGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProximityPlacementGroupList contains a list of ProximityPlacementGroups
type ProximityPlacementGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProximityPlacementGroup `json:"items"`
}

// Repository type metadata.
var (
	ProximityPlacementGroup_Kind             = "ProximityPlacementGroup"
	ProximityPlacementGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProximityPlacementGroup_Kind}.String()
	ProximityPlacementGroup_KindAPIVersion   = ProximityPlacementGroup_Kind + "." + CRDGroupVersion.String()
	ProximityPlacementGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProximityPlacementGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProximityPlacementGroup{}, &ProximityPlacementGroupList{})
}
