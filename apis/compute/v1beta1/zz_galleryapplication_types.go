/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GalleryApplicationObservation struct {

	// The ID of the Gallery Application.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GalleryApplicationParameters struct {

	// A description of the Gallery Application.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The end of life date in RFC3339 format of the Gallery Application.
	// +kubebuilder:validation:Optional
	EndOfLifeDate *string `json:"endOfLifeDate,omitempty" tf:"end_of_life_date,omitempty"`

	// The End User Licence Agreement of the Gallery Application.
	// +kubebuilder:validation:Optional
	Eula *string `json:"eula,omitempty" tf:"eula,omitempty"`

	// The ID of the Shared Image Gallery. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.SharedImageGallery
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GalleryID *string `json:"galleryId,omitempty" tf:"gallery_id,omitempty"`

	// Reference to a SharedImageGallery in compute to populate galleryId.
	// +kubebuilder:validation:Optional
	GalleryIDRef *v1.Reference `json:"galleryIdRef,omitempty" tf:"-"`

	// Selector for a SharedImageGallery in compute to populate galleryId.
	// +kubebuilder:validation:Optional
	GalleryIDSelector *v1.Selector `json:"galleryIdSelector,omitempty" tf:"-"`

	// The Azure Region where the Gallery Application exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The URI containing the Privacy Statement associated with the Gallery Application.
	// +kubebuilder:validation:Optional
	PrivacyStatementURI *string `json:"privacyStatementUri,omitempty" tf:"privacy_statement_uri,omitempty"`

	// The URI containing the Release Notes associated with the Gallery Application.
	// +kubebuilder:validation:Optional
	ReleaseNoteURI *string `json:"releaseNoteUri,omitempty" tf:"release_note_uri,omitempty"`

	// The type of the Operating System supported for the Gallery Application. Possible values are Linux and Windows. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	SupportedOsType *string `json:"supportedOsType" tf:"supported_os_type,omitempty"`

	// A mapping of tags to assign to the Gallery Application.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// GalleryApplicationSpec defines the desired state of GalleryApplication
type GalleryApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GalleryApplicationParameters `json:"forProvider"`
}

// GalleryApplicationStatus defines the observed state of GalleryApplication.
type GalleryApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GalleryApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GalleryApplication is the Schema for the GalleryApplications API. Manages a Gallery Application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GalleryApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GalleryApplicationSpec   `json:"spec"`
	Status            GalleryApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GalleryApplicationList contains a list of GalleryApplications
type GalleryApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GalleryApplication `json:"items"`
}

// Repository type metadata.
var (
	GalleryApplication_Kind             = "GalleryApplication"
	GalleryApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GalleryApplication_Kind}.String()
	GalleryApplication_KindAPIVersion   = GalleryApplication_Kind + "." + CRDGroupVersion.String()
	GalleryApplication_GroupVersionKind = CRDGroupVersion.WithKind(GalleryApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&GalleryApplication{}, &GalleryApplicationList{})
}
