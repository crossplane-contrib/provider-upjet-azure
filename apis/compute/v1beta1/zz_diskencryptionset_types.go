/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskEncryptionSetObservation struct {

	// The ID of the Disk Encryption Set.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Required
	Identity []IdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`
}

type DiskEncryptionSetParameters struct {

	// Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.
	// +kubebuilder:validation:Optional
	AutoKeyRotationEnabled *bool `json:"autoKeyRotationEnabled,omitempty" tf:"auto_key_rotation_enabled,omitempty"`

	// The type of key used to encrypt the data of the disk. Possible values are EncryptionAtRestWithCustomerKey, EncryptionAtRestWithPlatformAndCustomerKeys and ConfidentialVmEncryptedWithCustomerKey. Defaults to EncryptionAtRestWithCustomerKey. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// Multi-tenant application client id to access key vault in a different tenant.
	// +kubebuilder:validation:Optional
	FederatedClientID *string `json:"federatedClientId,omitempty" tf:"federated_client_id,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Required
	Identity []IdentityParameters `json:"identity" tf:"identity,omitempty"`

	// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	KeyVaultKeyID *string `json:"keyVaultKeyId,omitempty" tf:"key_vault_key_id,omitempty"`

	// Reference to a Key in keyvault to populate keyVaultKeyId.
	// +kubebuilder:validation:Optional
	KeyVaultKeyIDRef *v1.Reference `json:"keyVaultKeyIdRef,omitempty" tf:"-"`

	// Selector for a Key in keyvault to populate keyVaultKeyId.
	// +kubebuilder:validation:Optional
	KeyVaultKeyIDSelector *v1.Selector `json:"keyVaultKeyIdSelector,omitempty" tf:"-"`

	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the Disk Encryption Set.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IdentityObservation struct {

	// The (Client) ID of the Service Principal.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The ID of the Tenant the Service Principal is assigned in.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type IdentityParameters struct {

	// A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.
	// +kubebuilder:validation:Optional
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DiskEncryptionSetSpec defines the desired state of DiskEncryptionSet
type DiskEncryptionSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskEncryptionSetParameters `json:"forProvider"`
}

// DiskEncryptionSetStatus defines the observed state of DiskEncryptionSet.
type DiskEncryptionSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskEncryptionSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DiskEncryptionSet is the Schema for the DiskEncryptionSets API. Manages a Disk Encryption Set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DiskEncryptionSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskEncryptionSetSpec   `json:"spec"`
	Status            DiskEncryptionSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskEncryptionSetList contains a list of DiskEncryptionSets
type DiskEncryptionSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskEncryptionSet `json:"items"`
}

// Repository type metadata.
var (
	DiskEncryptionSet_Kind             = "DiskEncryptionSet"
	DiskEncryptionSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskEncryptionSet_Kind}.String()
	DiskEncryptionSet_KindAPIVersion   = DiskEncryptionSet_Kind + "." + CRDGroupVersion.String()
	DiskEncryptionSet_GroupVersionKind = CRDGroupVersion.WithKind(DiskEncryptionSet_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskEncryptionSet{}, &DiskEncryptionSetList{})
}
