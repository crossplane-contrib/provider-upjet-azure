// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	helper "github.com/crossplane/crossplane-tools/pkg/helpers"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AgentPool) ResolveReferences( // ResolveReferences of this AgentPool.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerRegistryName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ContainerRegistryNameRef,
			Selector:     mg.Spec.ForProvider.ContainerRegistryNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerRegistryName")
	}
	mg.Spec.ForProvider.ContainerRegistryName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRegistryNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.VirtualNetworkSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VirtualNetworkSubnetIDRef,
			Selector:     mg.Spec.ForProvider.VirtualNetworkSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualNetworkSubnetID")
	}
	mg.Spec.ForProvider.VirtualNetworkSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualNetworkSubnetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta2", "Subnet", "SubnetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.VirtualNetworkSubnetID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.VirtualNetworkSubnetIDRef,
			Selector:     mg.Spec.InitProvider.VirtualNetworkSubnetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualNetworkSubnetID")
	}
	mg.Spec.InitProvider.VirtualNetworkSubnetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualNetworkSubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ContainerConnectedRegistry.
func (mg *ContainerConnectedRegistry) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerRegistryID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerRegistryIDRef,
			Selector:     mg.Spec.ForProvider.ContainerRegistryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerRegistryID")
	}
	mg.Spec.ForProvider.ContainerRegistryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRegistryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "Token", "TokenList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.SyncTokenID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SyncTokenIDRef,
			Selector:     mg.Spec.ForProvider.SyncTokenIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SyncTokenID")
	}
	mg.Spec.ForProvider.SyncTokenID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.SyncTokenIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerRegistryID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ContainerRegistryIDRef,
			Selector:     mg.Spec.InitProvider.ContainerRegistryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerRegistryID")
	}
	mg.Spec.InitProvider.ContainerRegistryID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerRegistryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "Token", "TokenList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.SyncTokenID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SyncTokenIDRef,
			Selector:     mg.Spec.InitProvider.SyncTokenIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SyncTokenID")
	}
	mg.Spec.InitProvider.SyncTokenID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.SyncTokenIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Registry.
func (mg *Registry) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Encryption); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.Encryption[i3].IdentityClientID, ""),
				Extract:      resource.ExtractParamPath("client_id", true),
				Reference:    mg.Spec.ForProvider.Encryption[i3].IdentityClientIDRef,
				Selector:     mg.Spec.ForProvider.Encryption[i3].IdentityClientIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Encryption[i3].IdentityClientID")
		}
		mg.Spec.ForProvider.Encryption[i3].IdentityClientID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Encryption[i3].IdentityClientIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Identity); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.ForProvider.Identity[i3].IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Identity[i3].IdentityIdsRefs,
				Selector:      mg.Spec.ForProvider.Identity[i3].IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Identity[i3].IdentityIds")
		}
		mg.Spec.ForProvider.Identity[i3].IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Identity[i3].IdentityIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkRuleSet); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID, ""),
					Extract:      rconfig.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDRef,
					Selector:     mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID")
			}
			mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Encryption); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.Encryption[i3].IdentityClientID, ""),
				Extract:      resource.ExtractParamPath("client_id", true),
				Reference:    mg.Spec.InitProvider.Encryption[i3].IdentityClientIDRef,
				Selector:     mg.Spec.InitProvider.Encryption[i3].IdentityClientIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Encryption[i3].IdentityClientID")
		}
		mg.Spec.InitProvider.Encryption[i3].IdentityClientID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Encryption[i3].IdentityClientIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Identity); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("managedidentity.azure.upbound.io", "v1beta1", "UserAssignedIdentity", "UserAssignedIdentityList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: helper.FromPtrValues(mg.Spec.InitProvider.Identity[i3].IdentityIds),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Identity[i3].IdentityIdsRefs,
				Selector:      mg.Spec.InitProvider.Identity[i3].IdentityIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Identity[i3].IdentityIds")
		}
		mg.Spec.InitProvider.Identity[i3].IdentityIds = helper.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Identity[i3].IdentityIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkRuleSet); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("network.azure.upbound.io", "v1beta1", "Subnet", "SubnetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID, ""),
					Extract:      rconfig.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDRef,
					Selector:     mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID")
			}
			mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetID = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.NetworkRuleSet[i3].VirtualNetwork[i4].SubnetIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this ScopeMap.
func (mg *ScopeMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerRegistryName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ContainerRegistryNameRef,
			Selector:     mg.Spec.ForProvider.ContainerRegistryNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerRegistryName")
	}
	mg.Spec.ForProvider.ContainerRegistryName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRegistryNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Token.
func (mg *Token) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerRegistryName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ContainerRegistryNameRef,
			Selector:     mg.Spec.ForProvider.ContainerRegistryNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerRegistryName")
	}
	mg.Spec.ForProvider.ContainerRegistryName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRegistryNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "ScopeMap", "ScopeMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ScopeMapID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ScopeMapIDRef,
			Selector:     mg.Spec.ForProvider.ScopeMapIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ScopeMapID")
	}
	mg.Spec.ForProvider.ScopeMapID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ScopeMapIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "ScopeMap", "ScopeMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ScopeMapID, ""),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ScopeMapIDRef,
			Selector:     mg.Spec.InitProvider.ScopeMapIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ScopeMapID")
	}
	mg.Spec.InitProvider.ScopeMapID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ScopeMapIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TokenPassword.
func (mg *TokenPassword) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "Token", "TokenList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ContainerRegistryTokenID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ContainerRegistryTokenIDRef,
			Selector:     mg.Spec.ForProvider.ContainerRegistryTokenIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerRegistryTokenID")
	}
	mg.Spec.ForProvider.ContainerRegistryTokenID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRegistryTokenIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta1", "Token", "TokenList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ContainerRegistryTokenID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ContainerRegistryTokenIDRef,
			Selector:     mg.Spec.InitProvider.ContainerRegistryTokenIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerRegistryTokenID")
	}
	mg.Spec.InitProvider.ContainerRegistryTokenID = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerRegistryTokenIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Webhook.
func (mg *Webhook) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.RegistryName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RegistryNameRef,
			Selector:     mg.Spec.ForProvider.RegistryNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RegistryName")
	}
	mg.Spec.ForProvider.RegistryName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegistryNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("containerregistry.azure.upbound.io", "v1beta2", "Registry", "RegistryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.RegistryName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RegistryNameRef,
			Selector:     mg.Spec.InitProvider.RegistryNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RegistryName")
	}
	mg.Spec.InitProvider.RegistryName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegistryNameRef = rsp.ResolvedReference

	return nil
}
