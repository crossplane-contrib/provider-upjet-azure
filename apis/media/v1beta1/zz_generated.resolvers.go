/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	v1beta11 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Asset.
func (mg *Asset) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AssetFilter.
func (mg *AssetFilter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.AssetIDRef,
		Selector:     mg.Spec.ForProvider.AssetIDSelector,
		To: reference.To{
			List:    &AssetList{},
			Managed: &Asset{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssetID")
	}
	mg.Spec.ForProvider.AssetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ContentKeyPolicy.
func (mg *ContentKeyPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.InputAsset); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InputAsset[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InputAsset[i3].NameRef,
			Selector:     mg.Spec.ForProvider.InputAsset[i3].NameSelector,
			To: reference.To{
				List:    &AssetList{},
				Managed: &Asset{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.InputAsset[i3].Name")
		}
		mg.Spec.ForProvider.InputAsset[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.InputAsset[i3].NameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.OutputAsset); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OutputAsset[i3].Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.OutputAsset[i3].NameRef,
			Selector:     mg.Spec.ForProvider.OutputAsset[i3].NameSelector,
			To: reference.To{
				List:    &AssetList{},
				Managed: &Asset{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OutputAsset[i3].Name")
		}
		mg.Spec.ForProvider.OutputAsset[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.OutputAsset[i3].NameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransformName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TransformNameRef,
		Selector:     mg.Spec.ForProvider.TransformNameSelector,
		To: reference.To{
			List:    &TransformList{},
			Managed: &Transform{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransformName")
	}
	mg.Spec.ForProvider.TransformName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransformNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LiveEvent.
func (mg *LiveEvent) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LiveEventOutput.
func (mg *LiveEventOutput) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AssetNameRef,
		Selector:     mg.Spec.ForProvider.AssetNameSelector,
		To: reference.To{
			List:    &AssetList{},
			Managed: &Asset{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssetName")
	}
	mg.Spec.ForProvider.AssetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssetNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LiveEventID),
		Extract:      rconfig.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.LiveEventIDRef,
		Selector:     mg.Spec.ForProvider.LiveEventIDSelector,
		To: reference.To{
			List:    &LiveEventList{},
			Managed: &LiveEvent{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LiveEventID")
	}
	mg.Spec.ForProvider.LiveEventID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LiveEventIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServicesAccount.
func (mg *ServicesAccount) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.StorageAccount); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccount[i3].ID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.StorageAccount[i3].IDRef,
			Selector:     mg.Spec.ForProvider.StorageAccount[i3].IDSelector,
			To: reference.To{
				List:    &v1beta11.AccountList{},
				Managed: &v1beta11.Account{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccount[i3].ID")
		}
		mg.Spec.ForProvider.StorageAccount[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageAccount[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ServicesAccountFilter.
func (mg *ServicesAccountFilter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamingEndpoint.
func (mg *StreamingEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamingLocator.
func (mg *StreamingLocator) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AssetNameRef,
		Selector:     mg.Spec.ForProvider.AssetNameSelector,
		To: reference.To{
			List:    &AssetList{},
			Managed: &Asset{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssetName")
	}
	mg.Spec.ForProvider.AssetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssetNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamingPolicy.
func (mg *StreamingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CommonEncryptionCenc); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyNameRef,
				Selector:     mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyNameSelector,
				To: reference.To{
					List:    &ContentKeyPolicyList{},
					Managed: &ContentKeyPolicy{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyName")
			}
			mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CommonEncryptionCenc[i3].DefaultContentKey[i4].PolicyNameRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Transform.
func (mg *Transform) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MediaServicesAccountName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
		Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
		To: reference.To{
			List:    &ServicesAccountList{},
			Managed: &ServicesAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
