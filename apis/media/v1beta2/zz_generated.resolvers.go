// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	rconfig "github.com/upbound/provider-azure/apis/rconfig"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azure/internal/apis"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AssetFilter) ResolveReferences( // ResolveReferences of this AssetFilter.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta1", "Asset", "AssetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.AssetID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AssetIDRef,
			Selector:     mg.Spec.ForProvider.AssetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssetID")
	}
	mg.Spec.ForProvider.AssetID = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ContentKeyPolicy.
func (mg *ContentKeyPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.InputAsset != nil {
		{
			m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta1", "Asset", "AssetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.InputAsset.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.InputAsset.NameRef,
				Selector:     mg.Spec.ForProvider.InputAsset.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.InputAsset.Name")
		}
		mg.Spec.ForProvider.InputAsset.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.InputAsset.NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.OutputAsset); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta1", "Asset", "AssetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.OutputAsset[i3].Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.OutputAsset[i3].NameRef,
				Selector:     mg.Spec.ForProvider.OutputAsset[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.OutputAsset[i3].Name")
		}
		mg.Spec.ForProvider.OutputAsset[i3].Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.OutputAsset[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "Transform", "TransformList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.TransformName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.TransformNameRef,
			Selector:     mg.Spec.ForProvider.TransformNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransformName")
	}
	mg.Spec.ForProvider.TransformName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransformNameRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.InputAsset != nil {
		{
			m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta1", "Asset", "AssetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.InputAsset.Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.InputAsset.NameRef,
				Selector:     mg.Spec.InitProvider.InputAsset.NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.InputAsset.Name")
		}
		mg.Spec.InitProvider.InputAsset.Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.InputAsset.NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.OutputAsset); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta1", "Asset", "AssetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.OutputAsset[i3].Name, ""),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.OutputAsset[i3].NameRef,
				Selector:     mg.Spec.InitProvider.OutputAsset[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.OutputAsset[i3].Name")
		}
		mg.Spec.InitProvider.OutputAsset[i3].Name = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.OutputAsset[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LiveEvent.
func (mg *LiveEvent) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServicesAccount.
func (mg *ServicesAccount) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.StorageAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.StorageAccount[i3].ID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.StorageAccount[i3].IDRef,
				Selector:     mg.Spec.ForProvider.StorageAccount[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccount[i3].ID")
		}
		mg.Spec.ForProvider.StorageAccount[i3].ID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.StorageAccount[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.StorageAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("storage.azure.upbound.io", "v1beta2", "Account", "AccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.StorageAccount[i3].ID, ""),
				Extract:      rconfig.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.StorageAccount[i3].IDRef,
				Selector:     mg.Spec.InitProvider.StorageAccount[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.StorageAccount[i3].ID")
		}
		mg.Spec.InitProvider.StorageAccount[i3].ID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.StorageAccount[i3].IDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ServicesAccountFilter.
func (mg *ServicesAccountFilter) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamingEndpoint.
func (mg *StreamingEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StreamingPolicy.
func (mg *StreamingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.CommonEncryptionCenc != nil {
		if mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey != nil {
			{
				m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ContentKeyPolicy", "ContentKeyPolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameRef,
					Selector:     mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName")
			}
			mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.CommonEncryptionCenc != nil {
		if mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey != nil {
			{
				m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ContentKeyPolicy", "ContentKeyPolicyList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameRef,
					Selector:     mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName")
			}
			mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyName = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.CommonEncryptionCenc.DefaultContentKey.PolicyNameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Transform.
func (mg *Transform) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("media.azure.upbound.io", "v1beta2", "ServicesAccount", "ServicesAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.MediaServicesAccountName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.MediaServicesAccountNameRef,
			Selector:     mg.Spec.ForProvider.MediaServicesAccountNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MediaServicesAccountName")
	}
	mg.Spec.ForProvider.MediaServicesAccountName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.MediaServicesAccountNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("azure.upbound.io", "v1beta1", "ResourceGroup", "ResourceGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ResourceGroupName, ""),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
			Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}
