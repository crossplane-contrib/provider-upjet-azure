// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalVMShutdownScheduleInitParameters struct {

	// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
	DailyRecurrenceTime *string `json:"dailyRecurrenceTime,omitempty" tf:"daily_recurrence_time,omitempty"`

	// Whether to enable the schedule. Possible values are true and false. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The notification setting of a schedule. A notification_settings as defined below.
	NotificationSettings []NotificationSettingsInitParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a full list of accepted time zone names.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type GlobalVMShutdownScheduleObservation struct {

	// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
	DailyRecurrenceTime *string `json:"dailyRecurrenceTime,omitempty" tf:"daily_recurrence_time,omitempty"`

	// Whether to enable the schedule. Possible values are true and false. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The Dev Test Global Schedule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The notification setting of a schedule. A notification_settings as defined below.
	NotificationSettings []NotificationSettingsObservation `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// A mapping of tags to assign to the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a full list of accepted time zone names.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// The resource ID of the target ARM-based Virtual Machine. Changing this forces a new resource to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type GlobalVMShutdownScheduleParameters struct {

	// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
	// +kubebuilder:validation:Optional
	DailyRecurrenceTime *string `json:"dailyRecurrenceTime,omitempty" tf:"daily_recurrence_time,omitempty"`

	// Whether to enable the schedule. Possible values are true and false. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The location where the schedule is created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The notification setting of a schedule. A notification_settings as defined below.
	// +kubebuilder:validation:Optional
	NotificationSettings []NotificationSettingsParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a full list of accepted time zone names.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// The resource ID of the target ARM-based Virtual Machine. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.LinuxVirtualMachine
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a LinuxVirtualMachine in compute to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a LinuxVirtualMachine in compute to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

type NotificationSettingsInitParameters struct {

	// E-mail address to which the notification will be sent.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Whether to enable pre-shutdown notifications. Possible values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to 30.
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// The webhook URL to which the notification will be sent.
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

type NotificationSettingsObservation struct {

	// E-mail address to which the notification will be sent.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Whether to enable pre-shutdown notifications. Possible values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to 30.
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// The webhook URL to which the notification will be sent.
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

type NotificationSettingsParameters struct {

	// E-mail address to which the notification will be sent.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Whether to enable pre-shutdown notifications. Possible values are true and false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to 30.
	// +kubebuilder:validation:Optional
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// The webhook URL to which the notification will be sent.
	// +kubebuilder:validation:Optional
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

// GlobalVMShutdownScheduleSpec defines the desired state of GlobalVMShutdownSchedule
type GlobalVMShutdownScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalVMShutdownScheduleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GlobalVMShutdownScheduleInitParameters `json:"initProvider,omitempty"`
}

// GlobalVMShutdownScheduleStatus defines the observed state of GlobalVMShutdownSchedule.
type GlobalVMShutdownScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalVMShutdownScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVMShutdownSchedule is the Schema for the GlobalVMShutdownSchedules API. Manages automated shutdown schedules for Azure Resource Manager VMs outside of Dev Test Labs.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GlobalVMShutdownSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dailyRecurrenceTime) || (has(self.initProvider) && has(self.initProvider.dailyRecurrenceTime))",message="spec.forProvider.dailyRecurrenceTime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notificationSettings) || (has(self.initProvider) && has(self.initProvider.notificationSettings))",message="spec.forProvider.notificationSettings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timezone) || (has(self.initProvider) && has(self.initProvider.timezone))",message="spec.forProvider.timezone is a required parameter"
	Spec   GlobalVMShutdownScheduleSpec   `json:"spec"`
	Status GlobalVMShutdownScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVMShutdownScheduleList contains a list of GlobalVMShutdownSchedules
type GlobalVMShutdownScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalVMShutdownSchedule `json:"items"`
}

// Repository type metadata.
var (
	GlobalVMShutdownSchedule_Kind             = "GlobalVMShutdownSchedule"
	GlobalVMShutdownSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalVMShutdownSchedule_Kind}.String()
	GlobalVMShutdownSchedule_KindAPIVersion   = GlobalVMShutdownSchedule_Kind + "." + CRDGroupVersion.String()
	GlobalVMShutdownSchedule_GroupVersionKind = CRDGroupVersion.WithKind(GlobalVMShutdownSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalVMShutdownSchedule{}, &GlobalVMShutdownScheduleList{})
}
