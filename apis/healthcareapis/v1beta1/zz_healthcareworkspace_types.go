/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthcareWorkspaceObservation struct {

	// The ID of the Healthcare Workspace.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrivateEndpointConnection []PrivateEndpointConnectionObservation `json:"privateEndpointConnection,omitempty" tf:"private_endpoint_connection,omitempty"`
}

type HealthcareWorkspaceParameters struct {

	// Specifies the Azure Region where the Healthcare Workspace should be created. Changing this forces a new Healthcare Workspace to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Specifies the name of the Resource Group where the Healthcare Workspace should exist. Changing this forces a new Healthcare Workspace to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PrivateEndpointConnectionObservation struct {

	// The ID of the Healthcare Workspace.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the Healthcare Workspace. Changing this forces a new Healthcare Workspace to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PrivateEndpointConnectionParameters struct {
}

// HealthcareWorkspaceSpec defines the desired state of HealthcareWorkspace
type HealthcareWorkspaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthcareWorkspaceParameters `json:"forProvider"`
}

// HealthcareWorkspaceStatus defines the observed state of HealthcareWorkspace.
type HealthcareWorkspaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthcareWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareWorkspace is the Schema for the HealthcareWorkspaces API. Manages a Healthcare Workspace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HealthcareWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HealthcareWorkspaceSpec   `json:"spec"`
	Status            HealthcareWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareWorkspaceList contains a list of HealthcareWorkspaces
type HealthcareWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthcareWorkspace `json:"items"`
}

// Repository type metadata.
var (
	HealthcareWorkspace_Kind             = "HealthcareWorkspace"
	HealthcareWorkspace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HealthcareWorkspace_Kind}.String()
	HealthcareWorkspace_KindAPIVersion   = HealthcareWorkspace_Kind + "." + CRDGroupVersion.String()
	HealthcareWorkspace_GroupVersionKind = CRDGroupVersion.WithKind(HealthcareWorkspace_Kind)
)

func init() {
	SchemeBuilder.Register(&HealthcareWorkspace{}, &HealthcareWorkspaceList{})
}
