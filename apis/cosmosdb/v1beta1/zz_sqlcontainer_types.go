// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompositeIndexIndexInitParameters struct {

	// Order of the index. Possible values are Ascending or Descending.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CompositeIndexIndexObservation struct {

	// Order of the index. Possible values are Ascending or Descending.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CompositeIndexIndexParameters struct {

	// Order of the index. Possible values are Ascending or Descending.
	// +kubebuilder:validation:Optional
	Order *string `json:"order" tf:"order,omitempty"`

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type ExcludedPathInitParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ExcludedPathObservation struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ExcludedPathParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type IncludedPathInitParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type IncludedPathObservation struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type IncludedPathParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type IndexingPolicyCompositeIndexInitParameters struct {

	// One or more index blocks as defined below.
	Index []CompositeIndexIndexInitParameters `json:"index,omitempty" tf:"index,omitempty"`
}

type IndexingPolicyCompositeIndexObservation struct {

	// One or more index blocks as defined below.
	Index []CompositeIndexIndexObservation `json:"index,omitempty" tf:"index,omitempty"`
}

type IndexingPolicyCompositeIndexParameters struct {

	// One or more index blocks as defined below.
	// +kubebuilder:validation:Optional
	Index []CompositeIndexIndexParameters `json:"index" tf:"index,omitempty"`
}

type IndexingPolicyInitParameters struct {

	// One or more composite_index blocks as defined below.
	CompositeIndex []IndexingPolicyCompositeIndexInitParameters `json:"compositeIndex,omitempty" tf:"composite_index,omitempty"`

	// One or more excluded_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	ExcludedPath []ExcludedPathInitParameters `json:"excludedPath,omitempty" tf:"excluded_path,omitempty"`

	// One or more included_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	IncludedPath []IncludedPathInitParameters `json:"includedPath,omitempty" tf:"included_path,omitempty"`

	// Indicates the indexing mode. Possible values include: consistent and none. Defaults to consistent.
	IndexingMode *string `json:"indexingMode,omitempty" tf:"indexing_mode,omitempty"`

	// One or more spatial_index blocks as defined below.
	SpatialIndex []IndexingPolicySpatialIndexInitParameters `json:"spatialIndex,omitempty" tf:"spatial_index,omitempty"`
}

type IndexingPolicyObservation struct {

	// One or more composite_index blocks as defined below.
	CompositeIndex []IndexingPolicyCompositeIndexObservation `json:"compositeIndex,omitempty" tf:"composite_index,omitempty"`

	// One or more excluded_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	ExcludedPath []ExcludedPathObservation `json:"excludedPath,omitempty" tf:"excluded_path,omitempty"`

	// One or more included_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	IncludedPath []IncludedPathObservation `json:"includedPath,omitempty" tf:"included_path,omitempty"`

	// Indicates the indexing mode. Possible values include: consistent and none. Defaults to consistent.
	IndexingMode *string `json:"indexingMode,omitempty" tf:"indexing_mode,omitempty"`

	// One or more spatial_index blocks as defined below.
	SpatialIndex []IndexingPolicySpatialIndexObservation `json:"spatialIndex,omitempty" tf:"spatial_index,omitempty"`
}

type IndexingPolicyParameters struct {

	// One or more composite_index blocks as defined below.
	// +kubebuilder:validation:Optional
	CompositeIndex []IndexingPolicyCompositeIndexParameters `json:"compositeIndex,omitempty" tf:"composite_index,omitempty"`

	// One or more excluded_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	// +kubebuilder:validation:Optional
	ExcludedPath []ExcludedPathParameters `json:"excludedPath,omitempty" tf:"excluded_path,omitempty"`

	// One or more included_path blocks as defined below. Either included_path or excluded_path must contain the path /*
	// +kubebuilder:validation:Optional
	IncludedPath []IncludedPathParameters `json:"includedPath,omitempty" tf:"included_path,omitempty"`

	// Indicates the indexing mode. Possible values include: consistent and none. Defaults to consistent.
	// +kubebuilder:validation:Optional
	IndexingMode *string `json:"indexingMode,omitempty" tf:"indexing_mode,omitempty"`

	// One or more spatial_index blocks as defined below.
	// +kubebuilder:validation:Optional
	SpatialIndex []IndexingPolicySpatialIndexParameters `json:"spatialIndex,omitempty" tf:"spatial_index,omitempty"`
}

type IndexingPolicySpatialIndexInitParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type IndexingPolicySpatialIndexObservation struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// A set of spatial types of the path.
	Types []*string `json:"types,omitempty" tf:"types,omitempty"`
}

type IndexingPolicySpatialIndexParameters struct {

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type SQLContainerAutoscaleSettingsInitParameters struct {

	// The maximum throughput of the SQL container (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	MaxThroughput *float64 `json:"maxThroughput,omitempty" tf:"max_throughput,omitempty"`
}

type SQLContainerAutoscaleSettingsObservation struct {

	// The maximum throughput of the SQL container (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	MaxThroughput *float64 `json:"maxThroughput,omitempty" tf:"max_throughput,omitempty"`
}

type SQLContainerAutoscaleSettingsParameters struct {

	// The maximum throughput of the SQL container (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	MaxThroughput *float64 `json:"maxThroughput,omitempty" tf:"max_throughput,omitempty"`
}

type SQLContainerConflictResolutionPolicyInitParameters struct {

	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty" tf:"conflict_resolution_path,omitempty"`

	// The procedure to resolve conflicts in the case of Custom mode.
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty" tf:"conflict_resolution_procedure,omitempty"`

	// Indicates the conflict resolution mode. Possible values include: LastWriterWins, Custom.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type SQLContainerConflictResolutionPolicyObservation struct {

	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty" tf:"conflict_resolution_path,omitempty"`

	// The procedure to resolve conflicts in the case of Custom mode.
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty" tf:"conflict_resolution_procedure,omitempty"`

	// Indicates the conflict resolution mode. Possible values include: LastWriterWins, Custom.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type SQLContainerConflictResolutionPolicyParameters struct {

	// The conflict resolution path in the case of LastWriterWins mode.
	// +kubebuilder:validation:Optional
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty" tf:"conflict_resolution_path,omitempty"`

	// The procedure to resolve conflicts in the case of Custom mode.
	// +kubebuilder:validation:Optional
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty" tf:"conflict_resolution_procedure,omitempty"`

	// Indicates the conflict resolution mode. Possible values include: LastWriterWins, Custom.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`
}

type SQLContainerInitParameters struct {

	// The default time to live of Analytical Storage for this SQL container. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	AnalyticalStorageTTL *float64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl,omitempty"`

	// An autoscale_settings block as defined below. Requires partition_key_path to be set.
	AutoscaleSettings []SQLContainerAutoscaleSettingsInitParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings,omitempty"`

	// A conflict_resolution_policy blocks as defined below. Changing this forces a new resource to be created.
	ConflictResolutionPolicy []SQLContainerConflictResolutionPolicyInitParameters `json:"conflictResolutionPolicy,omitempty" tf:"conflict_resolution_policy,omitempty"`

	// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// An indexing_policy block as defined below.
	IndexingPolicy []IndexingPolicyInitParameters `json:"indexingPolicy,omitempty" tf:"indexing_policy,omitempty"`

	// Define a partition key. Changing this forces a new resource to be created.
	PartitionKeyPath *string `json:"partitionKeyPath,omitempty" tf:"partition_key_path,omitempty"`

	// Define a partition key version. Changing this forces a new resource to be created. Possible values are 1and 2. This should be set to 2 in order to use large partition keys.
	PartitionKeyVersion *float64 `json:"partitionKeyVersion,omitempty" tf:"partition_key_version,omitempty"`

	// The throughput of SQL container (RU/s). Must be set in increments of 100. The minimum value is 400.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// One or more unique_key blocks as defined below. Changing this forces a new resource to be created.
	UniqueKey []SQLContainerUniqueKeyInitParameters `json:"uniqueKey,omitempty" tf:"unique_key,omitempty"`
}

type SQLContainerObservation struct {

	// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The default time to live of Analytical Storage for this SQL container. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	AnalyticalStorageTTL *float64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl,omitempty"`

	// An autoscale_settings block as defined below. Requires partition_key_path to be set.
	AutoscaleSettings []SQLContainerAutoscaleSettingsObservation `json:"autoscaleSettings,omitempty" tf:"autoscale_settings,omitempty"`

	// A conflict_resolution_policy blocks as defined below. Changing this forces a new resource to be created.
	ConflictResolutionPolicy []SQLContainerConflictResolutionPolicyObservation `json:"conflictResolutionPolicy,omitempty" tf:"conflict_resolution_policy,omitempty"`

	// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// The ID of the CosmosDB SQL Container.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An indexing_policy block as defined below.
	IndexingPolicy []IndexingPolicyObservation `json:"indexingPolicy,omitempty" tf:"indexing_policy,omitempty"`

	// Define a partition key. Changing this forces a new resource to be created.
	PartitionKeyPath *string `json:"partitionKeyPath,omitempty" tf:"partition_key_path,omitempty"`

	// Define a partition key version. Changing this forces a new resource to be created. Possible values are 1and 2. This should be set to 2 in order to use large partition keys.
	PartitionKeyVersion *float64 `json:"partitionKeyVersion,omitempty" tf:"partition_key_version,omitempty"`

	// The name of the resource group in which the Cosmos DB SQL Container is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The throughput of SQL container (RU/s). Must be set in increments of 100. The minimum value is 400.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// One or more unique_key blocks as defined below. Changing this forces a new resource to be created.
	UniqueKey []SQLContainerUniqueKeyObservation `json:"uniqueKey,omitempty" tf:"unique_key,omitempty"`
}

type SQLContainerParameters struct {

	// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Account
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Reference to a Account to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameRef *v1.Reference `json:"accountNameRef,omitempty" tf:"-"`

	// Selector for a Account to populate accountName.
	// +kubebuilder:validation:Optional
	AccountNameSelector *v1.Selector `json:"accountNameSelector,omitempty" tf:"-"`

	// The default time to live of Analytical Storage for this SQL container. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	// +kubebuilder:validation:Optional
	AnalyticalStorageTTL *float64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl,omitempty"`

	// An autoscale_settings block as defined below. Requires partition_key_path to be set.
	// +kubebuilder:validation:Optional
	AutoscaleSettings []SQLContainerAutoscaleSettingsParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings,omitempty"`

	// A conflict_resolution_policy blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ConflictResolutionPolicy []SQLContainerConflictResolutionPolicyParameters `json:"conflictResolutionPolicy,omitempty" tf:"conflict_resolution_policy,omitempty"`

	// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=SQLDatabase
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Reference to a SQLDatabase to populate databaseName.
	// +kubebuilder:validation:Optional
	DatabaseNameRef *v1.Reference `json:"databaseNameRef,omitempty" tf:"-"`

	// Selector for a SQLDatabase to populate databaseName.
	// +kubebuilder:validation:Optional
	DatabaseNameSelector *v1.Selector `json:"databaseNameSelector,omitempty" tf:"-"`

	// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	// +kubebuilder:validation:Optional
	DefaultTTL *float64 `json:"defaultTtl,omitempty" tf:"default_ttl,omitempty"`

	// An indexing_policy block as defined below.
	// +kubebuilder:validation:Optional
	IndexingPolicy []IndexingPolicyParameters `json:"indexingPolicy,omitempty" tf:"indexing_policy,omitempty"`

	// Define a partition key. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	PartitionKeyPath *string `json:"partitionKeyPath,omitempty" tf:"partition_key_path,omitempty"`

	// Define a partition key version. Changing this forces a new resource to be created. Possible values are 1and 2. This should be set to 2 in order to use large partition keys.
	// +kubebuilder:validation:Optional
	PartitionKeyVersion *float64 `json:"partitionKeyVersion,omitempty" tf:"partition_key_version,omitempty"`

	// The name of the resource group in which the Cosmos DB SQL Container is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The throughput of SQL container (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// One or more unique_key blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	UniqueKey []SQLContainerUniqueKeyParameters `json:"uniqueKey,omitempty" tf:"unique_key,omitempty"`
}

type SQLContainerUniqueKeyInitParameters struct {

	// A list of paths to use for this unique key. Changing this forces a new resource to be created.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`
}

type SQLContainerUniqueKeyObservation struct {

	// A list of paths to use for this unique key. Changing this forces a new resource to be created.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`
}

type SQLContainerUniqueKeyParameters struct {

	// A list of paths to use for this unique key. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Paths []*string `json:"paths" tf:"paths,omitempty"`
}

// SQLContainerSpec defines the desired state of SQLContainer
type SQLContainerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLContainerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLContainerInitParameters `json:"initProvider,omitempty"`
}

// SQLContainerStatus defines the observed state of SQLContainer.
type SQLContainerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SQLContainer is the Schema for the SQLContainers API. Manages a SQL Container within a Cosmos DB Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SQLContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.partitionKeyPath) || (has(self.initProvider) && has(self.initProvider.partitionKeyPath))",message="spec.forProvider.partitionKeyPath is a required parameter"
	Spec   SQLContainerSpec   `json:"spec"`
	Status SQLContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLContainerList contains a list of SQLContainers
type SQLContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLContainer `json:"items"`
}

// Repository type metadata.
var (
	SQLContainer_Kind             = "SQLContainer"
	SQLContainer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLContainer_Kind}.String()
	SQLContainer_KindAPIVersion   = SQLContainer_Kind + "." + CRDGroupVersion.String()
	SQLContainer_GroupVersionKind = CRDGroupVersion.WithKind(SQLContainer_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLContainer{}, &SQLContainerList{})
}
