/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlobInventoryPolicyObservation struct {

	// The ID of the Storage Blob Inventory Policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BlobInventoryPolicyParameters struct {

	// One or more rules blocks as defined below.
	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`

	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`

	// Reference to a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDRef *v1.Reference `json:"storageAccountIdRef,omitempty" tf:"-"`

	// Selector for a Account in storage to populate storageAccountId.
	// +kubebuilder:validation:Optional
	StorageAccountIDSelector *v1.Selector `json:"storageAccountIdSelector,omitempty" tf:"-"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// A set of blob types. Possible values are blockBlob, appendBlob, and pageBlob. The storage account with is_hns_enabled is true doesn't support pageBlob.
	// +kubebuilder:validation:Required
	BlobTypes []*string `json:"blobTypes" tf:"blob_types,omitempty"`

	// Includes blob versions in blob inventory or not? Defaults to false.
	// +kubebuilder:validation:Optional
	IncludeBlobVersions *bool `json:"includeBlobVersions,omitempty" tf:"include_blob_versions,omitempty"`

	// Includes deleted blobs in blob inventory or not? Defaults to false.
	// +kubebuilder:validation:Optional
	IncludeDeleted *bool `json:"includeDeleted,omitempty" tf:"include_deleted,omitempty"`

	// Includes blob snapshots in blob inventory or not? Defaults to false.
	// +kubebuilder:validation:Optional
	IncludeSnapshots *bool `json:"includeSnapshots,omitempty" tf:"include_snapshots,omitempty"`

	// A set of strings for blob prefixes to be matched.
	// +kubebuilder:validation:Optional
	PrefixMatch []*string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// A filter block as defined above. Can only be set when the scope is Blob.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// The format of the inventory files. Possible values are Csv and Parquet.
	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// The name which should be used for this Blob Inventory Policy Rule.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The inventory schedule applied by this rule. Possible values are Daily and Weekly.
	// +kubebuilder:validation:Required
	Schedule *string `json:"schedule" tf:"schedule,omitempty"`

	// A list of fields to be included in the inventory. See the Azure API reference for all the supported fields.
	// +kubebuilder:validation:Required
	SchemaFields []*string `json:"schemaFields" tf:"schema_fields,omitempty"`

	// The scope of the inventory for this rule. Possible values are Blob and Container.
	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`

	// The storage container name to store the blob inventory files for this rule.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Container
	// +kubebuilder:validation:Optional
	StorageContainerName *string `json:"storageContainerName,omitempty" tf:"storage_container_name,omitempty"`

	// Reference to a Container in storage to populate storageContainerName.
	// +kubebuilder:validation:Optional
	StorageContainerNameRef *v1.Reference `json:"storageContainerNameRef,omitempty" tf:"-"`

	// Selector for a Container in storage to populate storageContainerName.
	// +kubebuilder:validation:Optional
	StorageContainerNameSelector *v1.Selector `json:"storageContainerNameSelector,omitempty" tf:"-"`
}

// BlobInventoryPolicySpec defines the desired state of BlobInventoryPolicy
type BlobInventoryPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlobInventoryPolicyParameters `json:"forProvider"`
}

// BlobInventoryPolicyStatus defines the observed state of BlobInventoryPolicy.
type BlobInventoryPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlobInventoryPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BlobInventoryPolicy is the Schema for the BlobInventoryPolicys API. Manages a Storage Blob Inventory Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BlobInventoryPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlobInventoryPolicySpec   `json:"spec"`
	Status            BlobInventoryPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlobInventoryPolicyList contains a list of BlobInventoryPolicys
type BlobInventoryPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BlobInventoryPolicy `json:"items"`
}

// Repository type metadata.
var (
	BlobInventoryPolicy_Kind             = "BlobInventoryPolicy"
	BlobInventoryPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BlobInventoryPolicy_Kind}.String()
	BlobInventoryPolicy_KindAPIVersion   = BlobInventoryPolicy_Kind + "." + CRDGroupVersion.String()
	BlobInventoryPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BlobInventoryPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BlobInventoryPolicy{}, &BlobInventoryPolicyList{})
}
