// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceDisasterRecoveryConfigInitParameters struct {
}

type NamespaceDisasterRecoveryConfigObservation struct {

	// The EventHub Namespace Disaster Recovery Config ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the primary EventHub Namespace to replicate. Changing this forces a new resource to be created.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The ID of the EventHub Namespace to replicate to.
	PartnerNamespaceID *string `json:"partnerNamespaceId,omitempty" tf:"partner_namespace_id,omitempty"`

	// The name of the resource group in which the Disaster Recovery Config exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`
}

type NamespaceDisasterRecoveryConfigParameters struct {

	// Specifies the name of the primary EventHub Namespace to replicate. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHubNamespace
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// Reference to a EventHubNamespace in eventhub to populate namespaceName.
	// +kubebuilder:validation:Optional
	NamespaceNameRef *v1.Reference `json:"namespaceNameRef,omitempty" tf:"-"`

	// Selector for a EventHubNamespace in eventhub to populate namespaceName.
	// +kubebuilder:validation:Optional
	NamespaceNameSelector *v1.Selector `json:"namespaceNameSelector,omitempty" tf:"-"`

	// The ID of the EventHub Namespace to replicate to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHubNamespace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PartnerNamespaceID *string `json:"partnerNamespaceId,omitempty" tf:"partner_namespace_id,omitempty"`

	// Reference to a EventHubNamespace in eventhub to populate partnerNamespaceId.
	// +kubebuilder:validation:Optional
	PartnerNamespaceIDRef *v1.Reference `json:"partnerNamespaceIdRef,omitempty" tf:"-"`

	// Selector for a EventHubNamespace in eventhub to populate partnerNamespaceId.
	// +kubebuilder:validation:Optional
	PartnerNamespaceIDSelector *v1.Selector `json:"partnerNamespaceIdSelector,omitempty" tf:"-"`

	// The name of the resource group in which the Disaster Recovery Config exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// NamespaceDisasterRecoveryConfigSpec defines the desired state of NamespaceDisasterRecoveryConfig
type NamespaceDisasterRecoveryConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceDisasterRecoveryConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NamespaceDisasterRecoveryConfigInitParameters `json:"initProvider,omitempty"`
}

// NamespaceDisasterRecoveryConfigStatus defines the observed state of NamespaceDisasterRecoveryConfig.
type NamespaceDisasterRecoveryConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceDisasterRecoveryConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceDisasterRecoveryConfig is the Schema for the NamespaceDisasterRecoveryConfigs API. Manages an Disaster Recovery Config for an Event Hub Namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NamespaceDisasterRecoveryConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceDisasterRecoveryConfigSpec   `json:"spec"`
	Status            NamespaceDisasterRecoveryConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceDisasterRecoveryConfigList contains a list of NamespaceDisasterRecoveryConfigs
type NamespaceDisasterRecoveryConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceDisasterRecoveryConfig `json:"items"`
}

// Repository type metadata.
var (
	NamespaceDisasterRecoveryConfig_Kind             = "NamespaceDisasterRecoveryConfig"
	NamespaceDisasterRecoveryConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceDisasterRecoveryConfig_Kind}.String()
	NamespaceDisasterRecoveryConfig_KindAPIVersion   = NamespaceDisasterRecoveryConfig_Kind + "." + CRDGroupVersion.String()
	NamespaceDisasterRecoveryConfig_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceDisasterRecoveryConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceDisasterRecoveryConfig{}, &NamespaceDisasterRecoveryConfigList{})
}
