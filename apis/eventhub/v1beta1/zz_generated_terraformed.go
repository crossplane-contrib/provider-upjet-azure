// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this EventHub
func (mg *EventHub) GetTerraformResourceType() string {
	return "azurerm_eventhub"
}

// GetConnectionDetailsMapping for this EventHub
func (tr *EventHub) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EventHub
func (tr *EventHub) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EventHub
func (tr *EventHub) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EventHub
func (tr *EventHub) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EventHub
func (tr *EventHub) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EventHub
func (tr *EventHub) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this EventHub
func (tr *EventHub) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this EventHub using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EventHub) LateInitialize(attrs []byte) (bool, error) {
	params := &EventHubParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EventHub) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AuthorizationRule
func (mg *AuthorizationRule) GetTerraformResourceType() string {
	return "azurerm_eventhub_authorization_rule"
}

// GetConnectionDetailsMapping for this AuthorizationRule
func (tr *AuthorizationRule) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"primary_connection_string": "status.atProvider.primaryConnectionString", "primary_connection_string_alias": "status.atProvider.primaryConnectionStringAlias", "primary_key": "status.atProvider.primaryKey", "secondary_connection_string": "status.atProvider.secondaryConnectionString", "secondary_connection_string_alias": "status.atProvider.secondaryConnectionStringAlias", "secondary_key": "status.atProvider.secondaryKey"}
}

// GetObservation of this AuthorizationRule
func (tr *AuthorizationRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AuthorizationRule
func (tr *AuthorizationRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AuthorizationRule
func (tr *AuthorizationRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AuthorizationRule
func (tr *AuthorizationRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AuthorizationRule
func (tr *AuthorizationRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AuthorizationRule
func (tr *AuthorizationRule) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this AuthorizationRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AuthorizationRule) LateInitialize(attrs []byte) (bool, error) {
	params := &AuthorizationRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AuthorizationRule) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ConsumerGroup
func (mg *ConsumerGroup) GetTerraformResourceType() string {
	return "azurerm_eventhub_consumer_group"
}

// GetConnectionDetailsMapping for this ConsumerGroup
func (tr *ConsumerGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConsumerGroup
func (tr *ConsumerGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConsumerGroup
func (tr *ConsumerGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConsumerGroup
func (tr *ConsumerGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConsumerGroup
func (tr *ConsumerGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConsumerGroup
func (tr *ConsumerGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this ConsumerGroup
func (tr *ConsumerGroup) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this ConsumerGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConsumerGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &ConsumerGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConsumerGroup) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this EventHubNamespace
func (mg *EventHubNamespace) GetTerraformResourceType() string {
	return "azurerm_eventhub_namespace"
}

// GetConnectionDetailsMapping for this EventHubNamespace
func (tr *EventHubNamespace) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"default_primary_connection_string": "status.atProvider.defaultPrimaryConnectionString", "default_primary_connection_string_alias": "status.atProvider.defaultPrimaryConnectionStringAlias", "default_primary_key": "status.atProvider.defaultPrimaryKey", "default_secondary_connection_string": "status.atProvider.defaultSecondaryConnectionString", "default_secondary_connection_string_alias": "status.atProvider.defaultSecondaryConnectionStringAlias", "default_secondary_key": "status.atProvider.defaultSecondaryKey"}
}

// GetObservation of this EventHubNamespace
func (tr *EventHubNamespace) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EventHubNamespace
func (tr *EventHubNamespace) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EventHubNamespace
func (tr *EventHubNamespace) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EventHubNamespace
func (tr *EventHubNamespace) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EventHubNamespace
func (tr *EventHubNamespace) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this EventHubNamespace
func (tr *EventHubNamespace) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this EventHubNamespace using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EventHubNamespace) LateInitialize(attrs []byte) (bool, error) {
	params := &EventHubNamespaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
	opts = append(opts, resource.WithNameFilter("NetworkRulesets"))

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EventHubNamespace) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NamespaceAuthorizationRule
func (mg *NamespaceAuthorizationRule) GetTerraformResourceType() string {
	return "azurerm_eventhub_namespace_authorization_rule"
}

// GetConnectionDetailsMapping for this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"primary_connection_string": "status.atProvider.primaryConnectionString", "primary_connection_string_alias": "status.atProvider.primaryConnectionStringAlias", "primary_key": "status.atProvider.primaryKey", "secondary_connection_string": "status.atProvider.secondaryConnectionString", "secondary_connection_string_alias": "status.atProvider.secondaryConnectionStringAlias", "secondary_key": "status.atProvider.secondaryKey"}
}

// GetObservation of this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this NamespaceAuthorizationRule
func (tr *NamespaceAuthorizationRule) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this NamespaceAuthorizationRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NamespaceAuthorizationRule) LateInitialize(attrs []byte) (bool, error) {
	params := &NamespaceAuthorizationRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NamespaceAuthorizationRule) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this NamespaceDisasterRecoveryConfig
func (mg *NamespaceDisasterRecoveryConfig) GetTerraformResourceType() string {
	return "azurerm_eventhub_namespace_disaster_recovery_config"
}

// GetConnectionDetailsMapping for this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this NamespaceDisasterRecoveryConfig
func (tr *NamespaceDisasterRecoveryConfig) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this NamespaceDisasterRecoveryConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NamespaceDisasterRecoveryConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &NamespaceDisasterRecoveryConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NamespaceDisasterRecoveryConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NamespaceSchemaGroup
func (mg *NamespaceSchemaGroup) GetTerraformResourceType() string {
	return "azurerm_eventhub_namespace_schema_group"
}

// GetConnectionDetailsMapping for this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this NamespaceSchemaGroup
func (tr *NamespaceSchemaGroup) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this NamespaceSchemaGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NamespaceSchemaGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NamespaceSchemaGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NamespaceSchemaGroup) GetTerraformSchemaVersion() int {
	return 0
}
