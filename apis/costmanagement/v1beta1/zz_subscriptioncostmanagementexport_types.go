// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionCostManagementExportExportDataOptionsInitParameters struct {

	// The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: WeekToDate, MonthToDate, BillingMonthToDate, TheLast7Days, TheLastMonth, TheLastBillingMonth, Custom.
	TimeFrame *string `json:"timeFrame,omitempty" tf:"time_frame,omitempty"`

	// The type of the query. Possible values are ActualCost, AmortizedCost and Usage.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubscriptionCostManagementExportExportDataOptionsObservation struct {

	// The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: WeekToDate, MonthToDate, BillingMonthToDate, TheLast7Days, TheLastMonth, TheLastBillingMonth, Custom.
	TimeFrame *string `json:"timeFrame,omitempty" tf:"time_frame,omitempty"`

	// The type of the query. Possible values are ActualCost, AmortizedCost and Usage.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubscriptionCostManagementExportExportDataOptionsParameters struct {

	// The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: WeekToDate, MonthToDate, BillingMonthToDate, TheLast7Days, TheLastMonth, TheLastBillingMonth, Custom.
	// +kubebuilder:validation:Optional
	TimeFrame *string `json:"timeFrame" tf:"time_frame,omitempty"`

	// The type of the query. Possible values are ActualCost, AmortizedCost and Usage.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SubscriptionCostManagementExportExportDataStorageLocationInitParameters struct {

	// The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
	RootFolderPath *string `json:"rootFolderPath,omitempty" tf:"root_folder_path,omitempty"`
}

type SubscriptionCostManagementExportExportDataStorageLocationObservation struct {

	// The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
	ContainerID *string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
	RootFolderPath *string `json:"rootFolderPath,omitempty" tf:"root_folder_path,omitempty"`
}

type SubscriptionCostManagementExportExportDataStorageLocationParameters struct {

	// The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Container
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("resource_manager_id",true)
	// +kubebuilder:validation:Optional
	ContainerID *string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// Reference to a Container in storage to populate containerId.
	// +kubebuilder:validation:Optional
	ContainerIDRef *v1.Reference `json:"containerIdRef,omitempty" tf:"-"`

	// Selector for a Container in storage to populate containerId.
	// +kubebuilder:validation:Optional
	ContainerIDSelector *v1.Selector `json:"containerIdSelector,omitempty" tf:"-"`

	// The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	RootFolderPath *string `json:"rootFolderPath" tf:"root_folder_path,omitempty"`
}

type SubscriptionCostManagementExportInitParameters struct {

	// Is the cost management export active? Default is true.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// A export_data_options block as defined below.
	ExportDataOptions []SubscriptionCostManagementExportExportDataOptionsInitParameters `json:"exportDataOptions,omitempty" tf:"export_data_options,omitempty"`

	// A export_data_storage_location block as defined below.
	ExportDataStorageLocation []SubscriptionCostManagementExportExportDataStorageLocationInitParameters `json:"exportDataStorageLocation,omitempty" tf:"export_data_storage_location,omitempty"`

	// Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The date the export will stop capturing information.
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate,omitempty" tf:"recurrence_period_end_date,omitempty"`

	// The date the export will start capturing information.
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate,omitempty" tf:"recurrence_period_start_date,omitempty"`

	// How often the requested information will be exported. Valid values include Annually, Daily, Monthly, Weekly.
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`
}

type SubscriptionCostManagementExportObservation struct {

	// Is the cost management export active? Default is true.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// A export_data_options block as defined below.
	ExportDataOptions []SubscriptionCostManagementExportExportDataOptionsObservation `json:"exportDataOptions,omitempty" tf:"export_data_options,omitempty"`

	// A export_data_storage_location block as defined below.
	ExportDataStorageLocation []SubscriptionCostManagementExportExportDataStorageLocationObservation `json:"exportDataStorageLocation,omitempty" tf:"export_data_storage_location,omitempty"`

	// The ID of the Cost Management Export for this Subscription.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The date the export will stop capturing information.
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate,omitempty" tf:"recurrence_period_end_date,omitempty"`

	// The date the export will start capturing information.
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate,omitempty" tf:"recurrence_period_start_date,omitempty"`

	// How often the requested information will be exported. Valid values include Annually, Daily, Monthly, Weekly.
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// The id of the subscription on which to create an export. Changing this forces a new resource to be created.
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type SubscriptionCostManagementExportParameters struct {

	// Is the cost management export active? Default is true.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// A export_data_options block as defined below.
	// +kubebuilder:validation:Optional
	ExportDataOptions []SubscriptionCostManagementExportExportDataOptionsParameters `json:"exportDataOptions,omitempty" tf:"export_data_options,omitempty"`

	// A export_data_storage_location block as defined below.
	// +kubebuilder:validation:Optional
	ExportDataStorageLocation []SubscriptionCostManagementExportExportDataStorageLocationParameters `json:"exportDataStorageLocation,omitempty" tf:"export_data_storage_location,omitempty"`

	// Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The date the export will stop capturing information.
	// +kubebuilder:validation:Optional
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate,omitempty" tf:"recurrence_period_end_date,omitempty"`

	// The date the export will start capturing information.
	// +kubebuilder:validation:Optional
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate,omitempty" tf:"recurrence_period_start_date,omitempty"`

	// How often the requested information will be exported. Valid values include Annually, Daily, Monthly, Weekly.
	// +kubebuilder:validation:Optional
	RecurrenceType *string `json:"recurrenceType,omitempty" tf:"recurrence_type,omitempty"`

	// The id of the subscription on which to create an export. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.Subscription
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// Reference to a Subscription in azure to populate subscriptionId.
	// +kubebuilder:validation:Optional
	SubscriptionIDRef *v1.Reference `json:"subscriptionIdRef,omitempty" tf:"-"`

	// Selector for a Subscription in azure to populate subscriptionId.
	// +kubebuilder:validation:Optional
	SubscriptionIDSelector *v1.Selector `json:"subscriptionIdSelector,omitempty" tf:"-"`
}

// SubscriptionCostManagementExportSpec defines the desired state of SubscriptionCostManagementExport
type SubscriptionCostManagementExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionCostManagementExportParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionCostManagementExportInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionCostManagementExportStatus defines the observed state of SubscriptionCostManagementExport.
type SubscriptionCostManagementExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionCostManagementExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionCostManagementExport is the Schema for the SubscriptionCostManagementExports API. Manages an Azure Cost Management Export for a Subscription.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SubscriptionCostManagementExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exportDataOptions) || (has(self.initProvider) && has(self.initProvider.exportDataOptions))",message="spec.forProvider.exportDataOptions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exportDataStorageLocation) || (has(self.initProvider) && has(self.initProvider.exportDataStorageLocation))",message="spec.forProvider.exportDataStorageLocation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recurrencePeriodEndDate) || (has(self.initProvider) && has(self.initProvider.recurrencePeriodEndDate))",message="spec.forProvider.recurrencePeriodEndDate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recurrencePeriodStartDate) || (has(self.initProvider) && has(self.initProvider.recurrencePeriodStartDate))",message="spec.forProvider.recurrencePeriodStartDate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recurrenceType) || (has(self.initProvider) && has(self.initProvider.recurrenceType))",message="spec.forProvider.recurrenceType is a required parameter"
	Spec   SubscriptionCostManagementExportSpec   `json:"spec"`
	Status SubscriptionCostManagementExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionCostManagementExportList contains a list of SubscriptionCostManagementExports
type SubscriptionCostManagementExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionCostManagementExport `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionCostManagementExport_Kind             = "SubscriptionCostManagementExport"
	SubscriptionCostManagementExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionCostManagementExport_Kind}.String()
	SubscriptionCostManagementExport_KindAPIVersion   = SubscriptionCostManagementExport_Kind + "." + CRDGroupVersion.String()
	SubscriptionCostManagementExport_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionCostManagementExport_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionCostManagementExport{}, &SubscriptionCostManagementExportList{})
}
