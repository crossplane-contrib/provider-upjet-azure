/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubscriptionCostManagementExportExportDataOptionsObservation struct {
}

type SubscriptionCostManagementExportExportDataOptionsParameters struct {

	// The time frame for pulling data for the query. If custom, then a specific time period must be provided. Possible values include: WeekToDate, MonthToDate, BillingMonthToDate, TheLastWeek, TheLastMonth, TheLastBillingMonth, Custom.
	// +kubebuilder:validation:Required
	TimeFrame *string `json:"timeFrame" tf:"time_frame,omitempty"`

	// The type of the query. Possible values are ActualCost, AmortizedCost and Usage.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SubscriptionCostManagementExportExportDataStorageLocationObservation struct {
}

type SubscriptionCostManagementExportExportDataStorageLocationParameters struct {

	// The Resource Manager ID of the container where exports will be uploaded. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Container
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("resource_manager_id",true)
	// +kubebuilder:validation:Optional
	ContainerID *string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// Reference to a Container in storage to populate containerId.
	// +kubebuilder:validation:Optional
	ContainerIDRef *v1.Reference `json:"containerIdRef,omitempty" tf:"-"`

	// Selector for a Container in storage to populate containerId.
	// +kubebuilder:validation:Optional
	ContainerIDSelector *v1.Selector `json:"containerIdSelector,omitempty" tf:"-"`

	// The path of the directory where exports will be uploaded. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	RootFolderPath *string `json:"rootFolderPath" tf:"root_folder_path,omitempty"`
}

type SubscriptionCostManagementExportObservation struct {

	// The ID of the Cost Management Export for this Subscription.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SubscriptionCostManagementExportParameters struct {

	// Is the cost management export active? Default is true.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// A export_data_options block as defined below.
	// +kubebuilder:validation:Required
	ExportDataOptions []SubscriptionCostManagementExportExportDataOptionsParameters `json:"exportDataOptions" tf:"export_data_options,omitempty"`

	// A export_data_storage_location block as defined below.
	// +kubebuilder:validation:Required
	ExportDataStorageLocation []SubscriptionCostManagementExportExportDataStorageLocationParameters `json:"exportDataStorageLocation" tf:"export_data_storage_location,omitempty"`

	// Specifies the name of the Cost Management Export. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The date the export will stop capturing information.
	// +kubebuilder:validation:Required
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate" tf:"recurrence_period_end_date,omitempty"`

	// The date the export will start capturing information.
	// +kubebuilder:validation:Required
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate" tf:"recurrence_period_start_date,omitempty"`

	// How often the requested information will be exported. Valid values include Annually, Daily, Monthly, Weekly.
	// +kubebuilder:validation:Required
	RecurrenceType *string `json:"recurrenceType" tf:"recurrence_type,omitempty"`

	// The id of the subscription on which to create an export. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

// SubscriptionCostManagementExportSpec defines the desired state of SubscriptionCostManagementExport
type SubscriptionCostManagementExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionCostManagementExportParameters `json:"forProvider"`
}

// SubscriptionCostManagementExportStatus defines the observed state of SubscriptionCostManagementExport.
type SubscriptionCostManagementExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionCostManagementExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionCostManagementExport is the Schema for the SubscriptionCostManagementExports API. Manages an Azure Cost Management Export for a Subscription.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SubscriptionCostManagementExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubscriptionCostManagementExportSpec   `json:"spec"`
	Status            SubscriptionCostManagementExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionCostManagementExportList contains a list of SubscriptionCostManagementExports
type SubscriptionCostManagementExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubscriptionCostManagementExport `json:"items"`
}

// Repository type metadata.
var (
	SubscriptionCostManagementExport_Kind             = "SubscriptionCostManagementExport"
	SubscriptionCostManagementExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubscriptionCostManagementExport_Kind}.String()
	SubscriptionCostManagementExport_KindAPIVersion   = SubscriptionCostManagementExport_Kind + "." + CRDGroupVersion.String()
	SubscriptionCostManagementExport_GroupVersionKind = CRDGroupVersion.WithKind(SubscriptionCostManagementExport_Kind)
)

func init() {
	SchemeBuilder.Register(&SubscriptionCostManagementExport{}, &SubscriptionCostManagementExportList{})
}
